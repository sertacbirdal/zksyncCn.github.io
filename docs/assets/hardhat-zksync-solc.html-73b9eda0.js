import{_ as l,W as r,X as d,Z as e,$ as n,a0 as a,a2 as c,Y as s,D as i}from"./framework-674379d2.js";const p={},u=e("h1",{id:"hardhat-zksync-solc",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#hardhat-zksync-solc","aria-hidden":"true"},"#"),n(),e("code",null,"hardhat-zksync-solc")],-1),h=e("p",null,"这个插件用于在将Solidity智能合约部署到zkSync Era之前提供一个方便的接口来编译它们。",-1),m=e("h2",{id:"安装",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#"),n(" 安装")],-1),k={href:"https://www.npmjs.com/package/@matterlabs/hardhat-zksync-solc",target:"_blank",rel:"noopener noreferrer"},b=s(`<p>用以下命令将该插件的最新版本添加到你的项目中。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># Yarn
yarn add -D @matterlabs/hardhat-zksync-solc

# Npm
npm i -D @matterlabs/hardhat-zksync-solc
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="exports" tabindex="-1"><a class="header-anchor" href="#exports" aria-hidden="true">#</a> Exports</h3><p>这个插件大多数时候不会直接在代码中使用。</p><h3 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h3><p>这个插件是在你的项目的<code>hardhat.config.ts</code>文件中配置的。下面是一个例子</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>zksolc<span class="token operator">:</span> <span class="token punctuation">{</span>
  version<span class="token operator">:</span> <span class="token string">&quot;1.3.1&quot;</span><span class="token punctuation">,</span>
  compilerSource<span class="token operator">:</span> <span class="token string">&quot;binary&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// binary or docker (deprecated)</span>
  settings<span class="token operator">:</span> <span class="token punctuation">{</span>
    compilerPath<span class="token operator">:</span> <span class="token string">&quot;zksolc&quot;</span><span class="token punctuation">,</span>  <span class="token comment">// ignored for compilerSource: &quot;docker&quot;</span>
    experimental<span class="token operator">:</span> <span class="token punctuation">{</span>
      dockerImage<span class="token operator">:</span> <span class="token string">&quot;matterlabs/zksolc&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Deprecated: used for compilerSource: &quot;docker&quot;</span>
      tag<span class="token operator">:</span> <span class="token string">&quot;latest&quot;</span>   <span class="token comment">// Deprecated: used for compilerSource: &quot;docker&quot;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    libraries<span class="token operator">:</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// optional. References to non-inlinable libraries</span>
    isSystem<span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment">// optional.  Enables Yul instructions available only for zkSync system contracts and libraries</span>
    forceEvmla<span class="token operator">:</span> <span class="token boolean">false</span> <span class="token comment">// optional. Falls back to EVM legacy assembly if there is a bug with Yul</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
networks<span class="token operator">:</span> <span class="token punctuation">{</span>
  hardhat<span class="token operator">:</span> <span class="token punctuation">{</span>
    zksync<span class="token operator">:</span> <span class="token boolean">true</span>  <span class="token comment">// enables zksync in hardhat local network</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Note</p><p>编译器不再作为Docker镜像发布，不再推荐使用。使用Hardhat配置文件中的 <code>compilerSource: &quot;binary&quot;</code>在Hardhat配置文件中使用二进制文件来代替。</p></div>`,8),v=e("code",null,"version",-1),f=e("code",null,"zksolc",-1),y={href:"https://github.com/matter-labs/zksolc-bin",target:"_blank",rel:"noopener noreferrer"},_=s("<li><code>compilerSource</code> indicates the compiler source and can be either <code>docker</code> or <code>binary</code> (recommended). If there isn&#39;t a compiler binary already installed, the plugin will automatically download it. If <code>docker</code> is used, you&#39;d need to run Docker desktop in the background and provide both <code>dockerImage</code> and <code>tag</code> in the experimental section.</li><li><code>compilerPath</code> (optional) is a field with the path to the <code>zksolc</code> binary. By default, the binary in <code>$PATH</code> is used. If <code>compilerSource</code> is <code>docker</code>, this field is ignored.</li><li><code>dockerImage</code> and <code>tag</code> make up the name of the compiler docker image. If <code>compilerSource</code> is <code>binary</code>, these fields are ignored.</li>",3),g=e("code",null,"libraries",-1),q=e("li",null,[e("code",null,"isSystem"),n(" - required if contracts use enables Yul instructions available only for zkSync system contracts and libraries")],-1),z=e("li",null,[e("code",null,"forceEvmla"),n(" - falls back to EVM legacy assembly if there is a bug with Yul")],-1),x=e("li",null,[e("code",null,"zksync"),n(" network option indicates whether zksolc is enabled on a certain network. "),e("code",null,"false"),n(" by default. Useful for multichain projects in which you can enable "),e("code",null,"zksync"),n(" only for specific networks.")],-1),w=s('<div class="hint-container warning"><p class="hint-container-title">`forceEvmla` usage</p><p>将 &quot;forceEvmla &quot;字段设置为 &quot;true &quot;会产生以下负面影响。</p><ul><li>不支持递归。</li><li>不支持内部函数指针。</li><li>合同大小或性能影响。</li></ul><p>对于0.8以前的solidity版本，该设置在编译时是默认执行的。</p></div><h3 id="commands" tabindex="-1"><a class="header-anchor" href="#commands" aria-hidden="true">#</a> Commands</h3><p><code>hardhat compile</code> -- 编译<code>contracts</code>目录下的所有智能合约，并创建<code>artifacts-zk</code>文件夹，其中包含所有编译工件，包括合约的工厂依赖，可用于合约部署。</p>',3);function S(E,I){const o=i("ExternalLinkIcon"),t=i("RouterLink");return r(),d("div",null,[u,h,m,e("p",null,[e("a",k,[n("@matterlabs/hardhat-zksync-solc"),a(o)])]),b,e("ul",null,[e("li",null,[v,n(" is a field with the version of the "),f,n(" compiler. Compiler versions can be found in "),e("a",y,[n("the following repository"),a(o)]),n(".")]),_,e("li",null,[g,n(" if your contract uses non-inlinable libraries as dependencies, they have to be defined here. Learn more about "),a(t,{to:"/api/hardhat/compiling-libraries.html"},{default:c(()=>[n("compiling libraries here")]),_:1})]),q,z,x]),w,e("p",null,[n("要了解什么是工厂依赖，请阅读"),a(t,{to:"/api/hardhat/.../api.html"},{default:c(()=>[n("Web3 API")]),_:1}),n("文档中的更多内容。")])])}const N=l(p,[["render",S],["__file","hardhat-zksync-solc.html.vue"]]);export{N as default};
