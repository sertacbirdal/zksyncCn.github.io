import{_ as t,W as o,X as c,Z as n,$ as a,a0 as e,Y as r,D as p}from"./framework-674379d2.js";const i={},l=n("h1",{id:"hardhat-zksync-verify",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#hardhat-zksync-verify","aria-hidden":"true"},"#"),a(),n("code",null,"hardhat-zksync-verify")],-1),d=n("p",null,"这个插件用于验证zkSync Era网络上的合同。",-1),u=n("h2",{id:"安装",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#安装","aria-hidden":"true"},"#"),a(" 安装")],-1),k={href:"https://www.npmjs.com/package/@matterlabs/hardhat-zksync-verify",target:"_blank",rel:"noopener noreferrer"},v={href:"https://www.npmjs.com/package/@nomiclabs/hardhat-etherscan",target:"_blank",rel:"noopener noreferrer"},h=n("code",null,"@matterlabs/hardhat-zksync-verify",-1),m=r(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code># Yarn
yarn add <span class="token operator">-</span><span class="token constant">D</span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">matterlabs</span></span><span class="token operator">/</span>hardhat<span class="token operator">-</span>zksync<span class="token operator">-</span>verify <span class="token decorator"><span class="token at operator">@</span><span class="token function">nomiclabs</span></span><span class="token operator">/</span>hardhat<span class="token operator">-</span>etherscan

# Npm
npm i <span class="token operator">-</span><span class="token constant">D</span> <span class="token decorator"><span class="token at operator">@</span><span class="token function">matterlabs</span></span><span class="token operator">/</span>hardhat<span class="token operator">-</span>zksync<span class="token operator">-</span>verify <span class="token decorator"><span class="token at operator">@</span><span class="token function">nomiclabs</span></span><span class="token operator">/</span>hardhat<span class="token operator">-</span>etherscan
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置" tabindex="-1"><a class="header-anchor" href="#配置" aria-hidden="true">#</a> 配置</h3><p>在<code>hardhat.config.ts</code>文件中导入该插件。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token string">&quot;@matterlabs/hardhat-zksync-verify&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Add the <code>verifyURL</code> property to the zkSync network in the <code>hardhat.config.ts</code> file as shown below:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>networks<span class="token operator">:</span> <span class="token punctuation">{</span>
  goerli<span class="token operator">:</span> <span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&quot;https://goerli.infura.io/v3/&lt;API_KEY&gt;&quot;</span> <span class="token comment">// URL of the Ethereum Web3 RPC (optional)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  zkTestnet<span class="token operator">:</span> <span class="token punctuation">{</span>
    url<span class="token operator">:</span> <span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">,</span> <span class="token comment">// URL of the zkSync network RPC</span>
    ethNetwork<span class="token operator">:</span> <span class="token string">&quot;goerli&quot;</span><span class="token punctuation">,</span> <span class="token comment">// URL of the Ethereum Web3 RPC, or the identifier of the network (e.g. \`mainnet\` or \`goerli\`)</span>
    zksync<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token comment">// Verification endpoint for Goerli</span>
    verifyURL<span class="token operator">:</span> <span class="token string">&#39;https://zksync2-testnet-explorer.zksync.dev/contract_verification&#39;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token comment">// defaultNetwork: &quot;zkTestnet&quot;, // optional (if not set, use &#39;--network zkTestnet&#39;)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>附加的网络属性。</p><ul><li><code>zkTestnet</code>是一个任意的zkSync网络名称。你可以使用<code>defaultNetwork</code>属性选择它作为默认网络。</li><li><code>ethNetwork</code>是一个带有Ethereum节点的URL的字段。你也可以提供网络名称（例如：<code>goerli</code>）作为这个字段的值。在这种情况下，插件将使用适当的以太坊网络配置的URL（来自<code>networks</code>部分），如果没有提供配置，则使用该网络的默认<code>ethers</code>提供者。这个字段对于这个插件使用的所有zkSync网络都是必需的。</li><li><code>url</code>是一个字段，在zkSync网络（<code>zksync</code>标志设置为<code>true</code>）的情况下，包含zkSync节点的URL，或者Ethereum节点的URL。本插件使用的所有zkSync和Ethereum网络都需要这个字段。</li><li><code>zksync</code>是一个标志，表示该网络是否代表zkSync网络配置。对于所有zkSync网络，这个字段需要设置为<code>true</code>。如果你想运行<code>hardhat-etherscan</code>验证，这个字段需要设置为<code>false</code>。如果设置为<code>true</code>，验证过程将总是尝试在zkSync网络上运行验证过程。</li><li><code>verifyURL</code>是一个指向特定zkSync网络的验证端点的字段。这个参数是可选的，其默认值是testnet验证网址。 <ul><li>测试网：<code>https://zksync2-testnet-explorer.zksync.dev/contract_verification</code>。</li><li>主网。<code>https://zksync2-mainnet-explorer.zksync.io/contract_verification</code></li></ul></li></ul><p>如果你想在同一个项目中验证Ethereum上的智能合约，必须在<code>hardhat.config.ts</code>文件中添加<code>etherscan</code>字段和API密钥。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>
networks<span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token operator">...</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
etherscan<span class="token operator">:</span> <span class="token punctuation">{</span>
  apiKey<span class="token operator">:</span> <span class="token comment">//&lt;Your API key for Etherscan&gt;,</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="命令" tabindex="-1"><a class="header-anchor" href="#命令" aria-hidden="true">#</a> 命令</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>hardhat verify <span class="token parameter variable">--network</span> <span class="token operator">&lt;</span>network<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>contract address<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>用给定合同的地址验证给定网络上的合同。 <br> 注意：当像这样运行时，验证任务将尝试比较你本地设置中所有合同的编译字节码和你试图验证的合同的部署字节码。如果不匹配，它将报告一个错误。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> hardhat verify <span class="token parameter variable">--network</span> <span class="token operator">&lt;</span>network<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>contract address<span class="token operator">&gt;</span> <span class="token parameter variable">--contract</span> <span class="token operator">&lt;</span>fully qualified name<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>通过<code>--合同</code>参数，你也可以指定你想验证的本地设置中的哪份合同，指定其完全合格的名称。完全合格的名称结构看起来像这样。&quot;contract/AContract.sol:TheContract&quot; <br></p><h4 id="构造函数参数" tabindex="-1"><a class="header-anchor" href="#构造函数参数" aria-hidden="true">#</a> 构造函数参数</h4><p>如果你的合同在部署时有特定的构造参数，你需要在运行验证任务时指定它们。比如说。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> hardhat verify <span class="token parameter variable">--network</span> testnet 0x7cf08341524AAF292255F3ecD435f8EE1a910AbF <span class="token string">&quot;Hi there!&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你的构造函数需要一个复杂的参数列表，你可以写一个单独的javascript模块来导出它。例如，创建一个<code>arguments.js</code>文件，结构如下。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token string">&quot;a string argument&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;0xabcdef&quot;</span><span class="token punctuation">,</span>
  <span class="token string">&quot;42&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span>
    property1<span class="token operator">:</span> <span class="token string">&quot;one&quot;</span><span class="token punctuation">,</span>
    property2<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在验证函数调用中加入一个新的参数：<code>--constructor-args arguments.js</code>。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> hardhat verify <span class="token parameter variable">--network</span> testnet 0x7cf08341524AAF292288F3ecD435f8EE1a910AbF --constructor-args arguments.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="核查状态检查" tabindex="-1"><a class="header-anchor" href="#核查状态检查" aria-hidden="true">#</a> 核查状态检查</h3><p>验证过程包括两个步骤。首先，发送一个验证请求，以确认你的合同的给定参数是否正确。然后，我们检查该请求的验证状态。这些步骤都是在你运行<code>验证</code>任务时运行的，但你将能够看到你的特定验证请求ID。 然后你可以使用这个ID来检查你的验证请求的状态，而不用从头开始运行整个过程。</p><p>下面的命令检查特定验证ID的验证请求的状态。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> hardhat verify-status --verification-id <span class="token operator">&lt;</span>your verification id<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="以编程方式验证智能合约" tabindex="-1"><a class="header-anchor" href="#以编程方式验证智能合约" aria-hidden="true">#</a> 以编程方式验证智能合约</h3><p>如果你需要直接从你的代码中运行验证任务，你可以使用硬帽 &quot;verify:verify &quot;任务和前面提到的参数，不同的是在指定contarct的地址时使用<code>--address</code>参数。<br></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">await</span> hre<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token string">&quot;verify:verify&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
  address<span class="token operator">:</span> contractAddress<span class="token punctuation">,</span>
  contract<span class="token operator">:</span> contractFullyQualifedName<span class="token punctuation">,</span>
  constructorArguments<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,29);function b(g,y){const s=p("ExternalLinkIcon");return o(),c("div",null,[l,d,u,n("p",null,[n("a",k,[a("@matterlabs/hardhat-zksync-verify"),e(s)])]),n("p",null,[a("该插件与 "),n("a",v,[a("@nomiclabs/hardhat-etherscan"),e(s)]),a(" 一起使用，它支持向后兼容该插件。 要使用它，你必须安装这两个插件，然后在hardhat.config.ts文件中导入"),h,a("。")]),m])}const z=t(i,[["render",b],["__file","hardhat-zksync-verify.html.vue"]]);export{z as default};
