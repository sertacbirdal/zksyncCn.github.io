import{_ as i,W as p,X as l,Z as n,$ as a,a0 as e,a2 as c,Y as t,D as r}from"./framework-674379d2.js";const d={},u=t('<h1 id="支持账户抽象化" tabindex="-1"><a class="header-anchor" href="#支持账户抽象化" aria-hidden="true">#</a> 支持账户抽象化</h1><div class="hint-container warning"><p class="hint-container-title">Note</p><p>请注意，在新的<code>0.13.0</code>SDK中，API层使用气体操作。ergs的概念只被VM使用。</p></div><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h2>',3),h={href:"https://ethereum.org/en/developers/docs/accounts/#externally-owned-accounts-and-key-pairs",target:"_blank",rel:"noopener noreferrer"},k={href:"https://ethereum.org/en/developers/docs/accounts/#contract-accounts",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,'zkSync Era中的账户可以像EOA一样发起交易，但也可以像智能合约一样在其中实现任意的逻辑。这个功能被称为 "账户 抽象"，它的目的是解决上述问题。',-1),b=n("div",{class:"hint-container warning"},[n("p",{class:"hint-container-title"},"不稳定的功能"),n("p",null,"这是zkSync时代的账户抽象（AA）的测试版本。我们非常高兴听到您的反馈 请注意： **应预计到AA所需的API/接口的突破性变化。"),n("p",null,'zkSync Era是首批采用AA的EVM兼容链之一，所以这个测试网也被用来观察EVM链的 "经典 "项目如何与账户抽象功能共存。')],-1),v=n("h2",{id:"先决条件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#先决条件","aria-hidden":"true"},"#"),a(" 先决条件")],-1),y={href:"https://ethereum.org/en/developers/docs/accounts/",target:"_blank",rel:"noopener noreferrer"},_=n("h2",{id:"设计",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#设计","aria-hidden":"true"},"#"),a(" 设计")],-1),g={href:"https://eips.ethereum.org/EIPS/eip-4337",target:"_blank",rel:"noopener noreferrer"},f=n("h3",{id:"保持非代码的唯一性",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#保持非代码的唯一性","aria-hidden":"true"},"#"),a(" 保持非代码的唯一性")],-1),x=n("div",{class:"hint-container warning"},[n("p",{class:"hint-container-title"},"预计会有变化"),n("p",null,"目前的模式有一些重要的缺点：它不允许自定义钱包在同一时间发送多个交易，同时保持确定性的排序。对于 EOA来说，nonces应该是按顺序增长的，而对于自定义账户来说，交易的顺序是不能确定的。"),n("p",null,"在未来，我们计划切换到这样一种模式，即账户可以选择他们是否希望有顺序的nonce排序（与EOA相同）或者他们希望有任意的排序。")],-1),E=n("p",null,"每个区块链的重要不变因素之一是每个交易都有一个唯一的哈希值。用一个任意的账户抽象持有这个属性并不容易。 尽管一般来说，账户可以接受多个相同的交易。即使这些交易根据区块链的规则在技术上是有效的，违反 散列唯一性对于索引器和其他工具来说是很难处理的。",-1),A=n("p",null,"在协议层面上需要有一个解决方案，对用户来说既便宜又稳健，以防止恶意操作者的出现。确保交易哈希值不重复的最简单的方法之一是让一对（发送者，非ce）总是唯一的。",-1),w=n("p",null,"以下是使用的协议。",-1),P=n("li",null,'如果nonce还没有被使用，就会运行交易验证。在这段时间内，所提供的nonce有望被标记为 "已使用"。',-1),I=n("li",null,"验证后，系统检查该nonce是否被标记为已使用。",-1),S=n("p",null,"用户将被允许使用任何256位数字作为nonce，他们可以将任何非零值放在系统合同中的相应密钥下。这已经被协议所支持，但在服务器上不支持。 协议已经支持，但在服务器端不支持。",-1),C=n("p",null,'一旦服务器端的支持发布，将会有更多关于与 "NonceHolder "系统合约的各种交互的文档以及教程。目前来说。 建议只使用 "incrementNonceIfEquals "方法，它实际上是强制执行nonces的顺序排序。',-1),q=n("h3",{id:"交易哈希值的标准化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#交易哈希值的标准化","aria-hidden":"true"},"#"),a(" 交易哈希值的标准化")],-1),T=n("p",null,'在未来，我们计划在zkSync上支持高效的交易包含证明。这需要我们在[bootloader]（.../developer-guides/system-contracts.md#bootloader）中计算交易的哈希值。由于这些计算对用户来说不是免费的，所以把交易的哈希值包含在AA 方法的接口中（以防账户因某种原因需要这个值）。这就是为什么 "IAccount "和 "IPaymaster "接口的所有方法，将在下面介绍。 包含交易的哈希值以及推荐的签名摘要（由EOA为该交易签名的摘要）。',-1),z=n("h3",{id:"iaccount接口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#iaccount接口","aria-hidden":"true"},"#"),a(" IAccount接口")],-1),D={href:"https://github.com/matter-labs/v2-testnet-contracts/blob/main/l2/system-contracts/interfaces/IAccount.sol",target:"_blank",rel:"noopener noreferrer"},O=n("li",null,[n("code",null,"validateTransaction"),a("是强制性的，将被系统用来确定AA逻辑是否同意继续进行交易。如果交易不被接受（例如，签名是错误的），该方法应该被退回。如果对该方法的调用成功，则实现的账户逻辑被认为接受该交易，系统将继续进行交易流程。")],-1),L=n("li",null,[n("code",null,"executeTransaction"),a("是强制性的，在向用户收取费用后，系统将调用该函数。这个函数应该执行交易的执行。")],-1),R=n("code",null,"payForTransaction",-1),H=n("a",{href:"#paymasters"},"paymaster",-1),N=n("code",null,"tx.gasprice * tx.gasLimit",-1),F=n("li",null,[n("code",null,"prePaymaster"),a("是可选的，如果交易有付款人，即有一个不同的地址为用户支付交易费用，则系统会调用该方法。这个方法应该被用来准备与付款人的互动。其中一个值得注意的"),n("a",{href:"#approval-based-paymaster-flow"},"例子"),a("，它可以帮助批准支付人的ERC-20代币。")],-1),V=n("li",null,'从技术上讲，"executeTransactionFromOutside "不是强制性的，但它是_高度鼓励的，因为需要有一些方法，在优先模式的情况下（例如，如果运营商没有响应），能够从你的账户 "外部 "启动交易（基本上这是标准的以太坊方法的后备措施，其中EOA从你的智能合约启动交易）。',-1),K=n("h3",{id:"ipaymaster接口",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#ipaymaster接口","aria-hidden":"true"},"#"),a(" IPaymaster接口")],-1),B=n("p",null,[a("与EIP4337一样，我们的账户抽象协议支持付款人：可以为其他账户的交易执行提供补偿的账户。你可以阅读更多关于他们的信息 "),n("a",{href:"#paymasters"},"这里"),a("。")],-1),M={href:"https://github.com/matter-labs/v2-testnet-contracts/blob/main/l2/system-contracts/interfaces/IPaymaster.sol",target:"_blank",rel:"noopener noreferrer"},j=t('<ul><li><code>validateAndPayForPaymasterTransaction</code>是强制性的，将被系统用来确定付款人是否同意为这个交易付款。如果付款人愿意为该交易付款，该方法必须至少向操作员发送<code>tx.gasprice * tx.gasLimit&#39;。它应该返回</code>context<code>，这将是</code>postOp`方法的调用参数之一。</li><li><code>postOp</code>是可选的，将在交易执行后被调用。注意，与EIP4337不同，不能保证这个方法会被调用。特别是，如果交易失败，出现 &quot;out of gas &quot;错误，这个方法就不会被调用。它需要四个参数：由 &quot;validateAndPayForPaymasterTransaction &quot;方法返回的上下文，交易本身，交易的执行是否成功，以及支付者可能被退回的最大气体量。一旦zkSync增加了对退款的支持，就会有更多关于退款的文档。</li></ul><h3 id="交易结构的保留字段具有特殊意义" tabindex="-1"><a class="header-anchor" href="#交易结构的保留字段具有特殊意义" aria-hidden="true">#</a> <code>交易</code>结构的保留字段具有特殊意义</h3>',2),X={href:"https://github.com/matter-labs/v2-testnet-contracts/blob/main/l2/system-contracts/TransactionHelper.sol#L15",target:"_blank",rel:"noopener noreferrer"},W=t('<ul><li><code>reserved[0]</code>是nonce。</li><li><code>reserved[1]</code>是<code>msg.value</code>，应与交易一起传递。</li></ul><h3 id="交易流程" tabindex="-1"><a class="header-anchor" href="#交易流程" aria-hidden="true">#</a> 交易流程</h3><p>每个交易都要经过以下流程。</p><h4 id="验证步骤" tabindex="-1"><a class="header-anchor" href="#验证步骤" aria-hidden="true">#</a> 验证步骤</h4><p>在验证步骤中，账户应该决定它是否接受该交易，如果接受，则支付该交易的费用。如果验证的任何部分失败，该账户将不被收取费用，并且该交易不能被纳入一个区块中。</p><p><strong>步骤1</strong>系统检查该交易的nonce是否以前被使用过。你可以阅读更多关于保持nonce唯一性的信息<a href="#keeping-nonces-unique">这里</a>。</p><p><strong>步骤2</strong> 系统调用账户的 &quot;validateTransaction &quot;方法。如果它没有恢复，则进入下一步。</p><p><strong>步骤3</strong> 系统检查交易的nonce是否已被标记为使用。</p><p><strong>步骤4</strong>(no paymaster)系统调用账户的<code>payForTransaction</code>方法。如果它没有恢复，则进入下一步。</p><p><strong>步骤4</strong>(paymaster)系统调用发送者的<code>prePaymaster</code>方法。如果这个调用没有恢复，则调用付款人的<code>validateAndPayForPaymasterTransaction</code>方法。如果它也没有恢复，则继续进行下一个步骤。</p><p><strong>步骤5</strong>系统验证bootloader是否已经收到至少<code>tx.gasPrice * tx.gasLimit</code>的ETH给bootloader。如果是这样的话，验证被认为是 完成，我们可以进入下一步。</p><h4 id="执行步骤" tabindex="-1"><a class="header-anchor" href="#执行步骤" aria-hidden="true">#</a> 执行步骤</h4><p>执行步骤被认为是负责交易的实际执行，并将任何未使用的气体的退款送回给用户。如果在这个步骤中出现任何逆转，该交易仍被认为是有效的，并将被纳入区块中。</p><p><strong>步骤6</strong>系统调用账户的<code>执行交易</code>方法。</p><p>**步骤7(仅在交易有一个付款人的情况下)**付款人的<code>postOp</code>方法被调用。这一步通常应该用于退还发送者未使用的气体，如果paymaster被用来促进以ERC-20代币支付费用。</p><h3 id="费用" tabindex="-1"><a class="header-anchor" href="#费用" aria-hidden="true">#</a> 费用</h3><p>在EIP4337中，你可以看到三种类型的气体限制：&quot;验证气体&quot;、&quot;执行气体&quot;、&quot;预验证气体&quot;，它们描述了一个区块中包含的交易的不同步骤的气体限制。 zkSync Era只有一个字段，<code>gasLimit&#39;，涵盖了所有三个的费用。当提交交易时，确保</code>gasLimit`足够支付验证。 支付费用（上面提到的ERC20转账），以及实际执行本身。</p><p>默认情况下，调用<code>estimateGas</code>会增加一个常量来支付收费和EOA账户的签名验证。</p><h2 id="使用systemcontractscaller库" tabindex="-1"><a class="header-anchor" href="#使用systemcontractscaller库" aria-hidden="true">#</a> 使用<code>SystemContractsCaller</code>库</h2>',19),G={href:"https://github.com/matter-labs/v2-testnet-contracts/blob/main/l2/system-contracts/SystemContractsCaller.sol",target:"_blank",rel:"noopener noreferrer"},Y=n("code",null,"systemCall",-1),Z=n("code",null,"systemCallWithPropagatedRevert",-1),$=n("code",null,"systemCallWithReturndata",-1),J=n("code",null,"NonceHolder",-1),Q={href:"https://github.com/matter-labs/v2-testnet-contracts/blob/main/l2/system-contracts/DefaultAccount.sol",target:"_blank",rel:"noopener noreferrer"},U=n("h2",{id:"扩展eip4337",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#扩展eip4337","aria-hidden":"true"},"#"),a(" 扩展EIP4337")],-1),nn={href:"https://eips.ethereum.org/EIPS/eip-4337#simulation",target:"_blank",rel:"noopener noreferrer"},an=t('<h3 id="扩容允许的操作码" tabindex="-1"><a class="header-anchor" href="#扩容允许的操作码" aria-hidden="true">#</a> 扩容允许的操作码</h3><ul><li>允许<code>call</code>/<code>delegateCall</code>/<code>staticcall</code>已经部署好的合约。与Ethereum不同的是，我们没有办法编辑已部署的代码或通过自毁删除合同，因此我们可以确保合同执行期间的代码将是相同的。</li></ul><h3 id="扩展属于一个用户的槽的集合" tabindex="-1"><a class="header-anchor" href="#扩展属于一个用户的槽的集合" aria-hidden="true">#</a> 扩展属于一个用户的槽的集合</h3><p>在最初的EIP中，AA的<code>validateTransaction</code>步骤只允许账户读取属于自己的存储槽。然而，有些槽位_表面上是属于该用户的，但实际上位于另一个合同的地址上。一个值得注意的例子是<code>ERC20</code>余额。</p><p>这种限制提供了DDoS的安全性，确保不同账户用于验证的槽_不会重叠，所以没有必要让它们_实际上_属于账户的存储。</p><p>为了能够在验证步骤中读取用户的ERC20余额或津贴，在验证步骤中，地址为<code>A</code>的账户将允许以下类型的槽。</p><ol><li>属于地址<code>A</code>的槽位。</li><li>属于任何其他地址的槽位<code>A</code>。</li><li><ol start="3"><li>任何其他地址上的 &quot;keccak256(A || X) &quot;类型的槽。(以涵盖<code>mapping(address =&gt; value)</code>，这通常用于ERC20代币的平衡)。</li></ol></li></ol><h3 id="未来可能会允许什么" tabindex="-1"><a class="header-anchor" href="#未来可能会允许什么" aria-hidden="true">#</a> 未来可能会允许什么？</h3><p>在未来，我们甚至可以允许有时间限制的交易，例如，允许检查<code>block.timestamp &lt;= value</code>，如果它返回<code>false</code>，等等。这将需要部署一个单独的可信方法库，但这将大大增加账户的功能。</p><h2 id="建立自定义账户" tabindex="-1"><a class="header-anchor" href="#建立自定义账户" aria-hidden="true">#</a> 建立自定义账户</h2><p>正如上面已经提到的，每个账户都应该实现<a href="#iaccount-interface">IAccount</a>接口。</p>',11),en={href:"https://github.com/matter-labs/v2-testnet-contracts/blob/main/l2/system-contracts/DefaultAccount.sol#L17",target:"_blank",rel:"noopener noreferrer"},sn=n("h3",{id:"eip1271",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#eip1271","aria-hidden":"true"},"#"),a(" EIP1271")],-1),tn={href:"https://eips.ethereum.org/EIPS/eip-1271",target:"_blank",rel:"noopener noreferrer"},on=t(`<h3 id="部署过程" tabindex="-1"><a class="header-anchor" href="#部署过程" aria-hidden="true">#</a> 部署过程</h3><p>部署账户逻辑的过程与部署智能合约的过程非常相似。 为了保护那些不想被当作账户的智能合约，应该使用部署者系统合约的不同方法来做。 你不应该使用<code>create</code>/<code>create2</code>，而应该使用部署者系统合约的<code>createAccount</code>/<code>create2Account</code>方法。</p><p>下面是一个如何使用<code>zksync-web3</code>SDK来部署账户逻辑的例子。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ContractFactory <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> contractFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ContractFactory</span><span class="token punctuation">(</span>abi<span class="token punctuation">,</span> bytecode<span class="token punctuation">,</span> initiator<span class="token punctuation">,</span> <span class="token string">&quot;createAccount&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> aa <span class="token operator">=</span> <span class="token keyword">await</span> contractFactory<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">await</span> aa<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="验证步骤的局限性" tabindex="-1"><a class="header-anchor" href="#验证步骤的局限性" aria-hidden="true">#</a> 验证步骤的局限性</h3><div class="hint-container warning"><p class="hint-container-title">尚未实施</p><p>验证规则现在还没有完全执行。即使你的自定义账户现在可以使用，但如果不遵守以下规则，将来也可能停止使用。</p></div><p>为了保护系统免受DoS威胁，验证步骤必须有以下限制。</p><ul><li>账户逻辑只能触及属于该账户的槽。注意，<a href="#extending-the-set-of-slots-that-belong-to-a-user">定义</a>远远超出了属于用户地址的槽位。</li><li>账户逻辑不能使用上下文变量（如<code>block.number</code>）。</li><li>还要求你的账户将nonce增加1。这个限制只是为了保持交易哈希的抗碰撞性。在未来，这一要求将被取消，以允许更多的通用情况（如隐私协议）。</li></ul><p>违反上述规则的交易将不被API接受，尽管这些要求不能在电路/VM层面上强制执行，也不适用于L1-&gt;L2交易。</p><p>为了让你更快地尝试这个功能，我们决定在完全实现账户验证步骤的限制&#39;检查之前公开发布账户的抽象性。 目前，尽管违反了上述要求，你的交易仍然可以通过API，但很快这一点就会被改变。</p><h3 id="nonce-holder-contract" tabindex="-1"><a class="header-anchor" href="#nonce-holder-contract" aria-hidden="true">#</a> Nonce holder contract</h3>`,11),cn={href:"https://github.com/matter-labs/v2-testnet-contracts/blob/main/l2/system-contracts/interfaces/INonceHolder.sol#L12",target:"_blank",rel:"noopener noreferrer"},rn=t(`<p>这是白名单调用之一，账户逻辑被允许调用外部智能合约。</p><h3 id="从一个账户发送交易" tabindex="-1"><a class="header-anchor" href="#从一个账户发送交易" aria-hidden="true">#</a> 从一个账户发送交易</h3><p>目前，只支持EIP712交易。要从一个特定的账户提交交易，你应该提供交易的<code>from</code>字段作为发送者的地址，并在<code>customData</code>的<code>customSignature</code>字段中提供该账户的签名。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> utils <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// here the \`tx\` is a \`TransactionRequest\` object from \`zksync-web3\` SDK.</span>
<span class="token comment">// and the zksyncProvider is the \`Provider\` object from \`zksync-web3\` SDK connected to zkSync network.</span>
tx<span class="token punctuation">.</span>from <span class="token operator">=</span> aaAddress<span class="token punctuation">;</span>
tx<span class="token punctuation">.</span>customData <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>tx<span class="token punctuation">.</span>customData<span class="token punctuation">,</span>
  customSignature<span class="token operator">:</span> aaSignature<span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> serializedTx <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token operator">...</span>tx <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> sentTx <span class="token operator">=</span> <span class="token keyword">await</span> zksyncProvider<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span>serializedTx<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="paymasters" tabindex="-1"><a class="header-anchor" href="#paymasters" aria-hidden="true">#</a> Paymasters</h2><p>想象一下，能够为你的协议的用户支付费用! 付费者是可以为其他账户的交易提供补偿的账户。另一个重要的使用情况 Paymasters的另一个重要用途是促进以ERC20代币支付费用。虽然ETH是zkSync的正式费用代币，但paymasters可以提供将ERC20代币实时兑换成ETH的能力。</p><p>如果用户想与付款人互动，他们应该在其EIP712交易中提供非零的<code>付款人</code>地址。付款人的输入数据在付款人的<code>paymasterInput</code>字段中提供。</p><h3 id="付款人验证规则" tabindex="-1"><a class="header-anchor" href="#付款人验证规则" aria-hidden="true">#</a> 付款人验证规则</h3><div class="hint-container warning"><p class="hint-container-title">尚未实施</p><p>验证规则现在还没有完全执行。即使你的paymaster现在可以工作，但如果它不遵循以下规则，将来也可能停止工作。</p></div>`,9),pn={href:"https://eips.ethereum.org/EIPS/eip-4337#reputation-scoring-and-throttlingbanning-for-paymasters",target:"_blank",rel:"noopener noreferrer"},ln=t(`<p>与原来的EIP不同的是，允许付费者接触任何存储槽。另外，如果以下任何一种情况，支付者不会被扼杀。</p><ul><li>在API节点上通过验证后，已经超过<code>X</code>分钟（<code>X</code>的确切值将在后面定义）。</li><li>被读取的槽的顺序与在API节点上运行时相同，并且第一个值发生变化的槽是用户的槽之一。这是为了保护paymaster不受恶意用户的影响（例如，用户可能已经删除了ERC20令牌的津贴）。</li></ul><h3 id="内置paymaster流量" tabindex="-1"><a class="header-anchor" href="#内置paymaster流量" aria-hidden="true">#</a> 内置paymaster流量</h3><p>虽然有些paymaster可以在没有用户任何互动的情况下进行琐碎的操作（例如，一个总是为他们的用户支付费用的协议），但有些需要交易的发送者的积极参与。一个值得注意的例子是一个将用户的ERC20代币换成ETH的支付方，因为它需要用户向支付方设置必要的津贴。</p><p>账户抽象协议本身是通用的，允许账户和付款人实现任意的互动。然而，默认账户（EOAs）的代码是恒定的，但我们仍然希望他们能够参与到自定义账户和支付者的生态系统中。这就是为什么我们对交易的 &quot;paymasterInput &quot;字段进行了标准化，以涵盖paymaster功能的最常见的用途。</p><p>你的账户可以自由实施或不实施对这些流量的支持。然而，我们强烈建议你这样做，以保持EOA和自定义账户的接口相同。</p><h4 id="一般付款人流程" tabindex="-1"><a class="header-anchor" href="#一般付款人流程" aria-hidden="true">#</a> 一般付款人流程</h4><p>如果用户不需要事先进行操作，就可以使用该流程。</p><p><code>paymasterInput</code>字段必须被编码为对一个具有以下接口的函数的调用。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">function</span> <span class="token function">general</span><span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">calldata</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>EOA账户将不做任何事情，付款人可以以任何方式解释这个\`数据&#39;。</p><h4 id="基于批准的薪资管理流程" tabindex="-1"><a class="header-anchor" href="#基于批准的薪资管理流程" aria-hidden="true">#</a> 基于批准的薪资管理流程</h4><p>如果用户被要求对一个令牌设置某些津贴，以便支付主管进行操作，则应使用该流程。<code>paymasterInput</code>字段必须被编码为对一个函数的调用，签名如下。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">function</span> <span class="token function">approvalBased</span><span class="token punctuation">(</span>
    <span class="token builtin">address</span> _token<span class="token punctuation">,</span>
    <span class="token builtin">uint256</span> _minAllowance<span class="token punctuation">,</span>
    <span class="token builtin">bytes</span> <span class="token keyword">calldata</span> _innerInput
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>EOA将确保<code>_token&#39;对paymaster的允许值至少被设置为</code>_minAllowance&#39;。<code>_innerInput</code>参数是一个额外的有效载荷，可以被发送到paymaster来实现任何逻辑（例如，一个额外的签名或密钥，可以被paymaster验证）。</p><p>如果你正在开发一个paymaster，你_不应该_相信交易发送者的行为是诚实的（例如，用<code>approvalBased</code>流程提供所需的津贴）。这些流程主要是作为对EOA的指示，要求应该总是由付款人进行双重检查。</p><h4 id="使用-zksync-web3-sdk来处理付款人流程。" tabindex="-1"><a class="header-anchor" href="#使用-zksync-web3-sdk来处理付款人流程。" aria-hidden="true">#</a> 使用 &quot;zksync-web3 &quot;SDK来处理付款人流程。</h4>`,17),dn=n("code",null,"zksync-web3",-1),un=t('<h3 id="测试网支付系统" tabindex="-1"><a class="header-anchor" href="#测试网支付系统" aria-hidden="true">#</a> 测试网支付系统</h3><p>为了确保用户在testnet上体验到paymasters，以及继续支持以ERC20代币支付费用，Matter Labs团队提供了testnet paymaster，它能够以ERC20代币与ETH的1:1汇率支付费用（即该代币的一个单位等于ETH的1wei）。</p><p>该支付系统只支持<a href="#approval-based-paymaster-flow">基于批准</a>的支付系统流程，并要求<code>token</code>参数等于被交换的代币，<code>minAllowance</code>至少等于<code>tx.maxFeePerGas * tx.gasLimit</code>。此外，testnet paymaster不使用<code>_innerInput</code>参数，所以不应提供任何东西（空的<code>bytes</code>）。</p>',3),hn=n("h2",{id:"aa-signature-checker。",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#aa-signature-checker。","aria-hidden":"true"},"#"),a(),n("code",null,"aa-signature-checker"),a("。")],-1),kn=n("p",null,"你的项目可以开始为本地AA支持做准备了。我们非常鼓励你这样做，因为这将使你能够接纳成千上万的用户（例如，已经使用第一版zkSync的阿根廷用户）。 我们预计，在未来，甚至更多的用户将转向智能钱包。",-1),mn={href:"https://eips.ethereum.org/EIPS/eip-1271",target:"_blank",rel:"noopener noreferrer"},bn=t(`<p><code>aa-signature-checker</code>库提供了一种验证不同账户实现的签名的方法。目前它只支持验证ECDSA的签名。很快，我们也将增加对EIP-1271的支持。</p><p>我们强烈建议你在需要检查一个账户的签名是否正确时使用这个库。</p><h3 id="将该库添加到你的项目中。" tabindex="-1"><a class="header-anchor" href="#将该库添加到你的项目中。" aria-hidden="true">#</a> 将该库添加到你的项目中。</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add @matterlabs/signature-checker
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="使用该库的例子" tabindex="-1"><a class="header-anchor" href="#使用该库的例子" aria-hidden="true">#</a> 使用该库的例子</h3><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span> SignatureChecker <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@matterlabs/signature-checker/contracts/SignatureChecker.sol&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">TestSignatureChecker</span> <span class="token punctuation">{</span>
    <span class="token keyword">using</span> <span class="token class-name">SignatureChecker</span> <span class="token keyword">for</span> <span class="token builtin">address</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">isValidSignature</span><span class="token punctuation">(</span>
        <span class="token builtin">address</span> _address<span class="token punctuation">,</span>
        <span class="token builtin">bytes32</span> _hash<span class="token punctuation">,</span>
        <span class="token builtin">bytes</span> <span class="token keyword">memory</span> _signature
    <span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">pure</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _address<span class="token punctuation">.</span><span class="token function">checkSignature</span><span class="token punctuation">(</span>_hash<span class="token punctuation">,</span> _signature<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="在我们的sdk中验证aa签名" tabindex="-1"><a class="header-anchor" href="#在我们的sdk中验证aa签名" aria-hidden="true">#</a> 在我们的SDK中验证AA签名</h2><p>也<strong>不建议</strong>使用<code>ethers.js</code>库来验证用户的签名。</p><p>我们的SDK在其<code>utils</code>中提供了两种方法来验证账户的签名。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">isMessageSignatureCorrect</span><span class="token punctuation">(</span>address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span> message<span class="token operator">:</span> ethers<span class="token punctuation">.</span>Bytes <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">,</span> signature<span class="token operator">:</span> SignatureLike<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">isTypedDataSignatureCorrect</span><span class="token punctuation">(</span>
  address<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>
  domain<span class="token operator">:</span> TypedDataDomain<span class="token punctuation">,</span>
  types<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">Array</span><span class="token operator">&lt;</span>TypedDataField<span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>
  value<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>
  signature<span class="token operator">:</span> SignatureLike
<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>目前这些方法只支持验证ECDSA签名，但很快它们也将支持EIP1271签名验证。</p><p>这两个方法都返回 &quot;true &quot;或 &quot;false&quot;，取决于消息签名是否正确。</p>`,12);function vn(yn,_n){const s=r("ExternalLinkIcon"),o=r("RouterLink");return p(),l("div",null,[u,n("p",null,[a("在以太坊上，有两种类型的账户。"),n("a",h,[a("外部拥有的账户（EOAs）"),e(s)]),a("和"),n("a",k,[a("合约账户"),e(s)]),a("。 前者是唯一可以发起交易的类型。 而后者则是唯一可以实现任意逻辑的账户。对于一些用例，如智能合约钱包或隐私协议，这种差异会造成很多摩擦。 因此，这类应用需要L1中继器，例如EOA，以帮助促进智能合约钱包的交易。")]),m,b,v,n("p",null,[a("为了更好地理解这个页面，我们建议你花些时间先阅读一下"),n("a",y,[a("账户"),e(s)]),a("的指南。")]),_,n("p",null,[a("zkSync上的账户抽象协议与"),n("a",g,[a("EIP4337"),e(s)]),a("非常相似，尽管我们的协议为了提高效率和更好的用户体验而有所不同。")]),f,x,E,A,w,n("ul",null,[n("li",null,[a("在每个交易开始之前，系统会查询"),e(o,{to:"/dev/developer-guides/.../developer-guides/system-contracts.html#nonceholder"},{default:c(()=>[a("NonceHolder")]),_:1}),a("以检查所提供的nonce是否已经被使用。")]),P,I]),S,C,q,T,z,n("p",null,[a("建议每个账户都实现"),n("a",D,[a("IAccount"),e(s)]),a("接口。它包含以下五个方法。")]),n("ul",null,[O,L,n("li",null,[R,a("是可选的，如果交易没有付款人，即账户愿意为交易付款，系统将调用该函数。这个方法应该被用来支付账户的费用。注意，如果你的账户永远不会支付任何费用，而总是依赖"),H,a("功能，你就不必实现这个方法。这个方法必须至少发送"),N,a("ETH到"),e(o,{to:"/dev/developer-guides/system-contracts.html#bootloader"},{default:c(()=>[a("bootloader")]),_:1}),a("地址。")]),F,V]),K,B,n("p",null,[a("每个paymaster应该实现"),n("a",M,[a("IPaymaster"),e(s)]),a("接口。它包含以下两个方法。")]),j,n("p",null,[a("请注意，上面的每个方法都接受"),n("a",X,[a("Transaction"),e(s)]),a('结构。 虽然它的一些字段是不言自明的，但也有6个 "保留 "字段，每个字段的含义是由交易的类型决定的。我们决定不给这些字段命名，因为它们在未来的一些交易类型中可能是不需要的。现在，我们的惯例是。')]),W,n("p",null,[a('为了安全起见，"NonceHolder "和 "ContractDeployer "系统合约都只能用一个特殊的 "isSystem "标志来调用。你可以在这里阅读更多关于它的信息（./system-contracts.md#protected-access to-some-of-the-system-contracts）。要用这个标志进行调用，应该使用'),n("a",G,[a("SystemContractsCaller"),e(s)]),a("库的"),Y,a("/"),Z,a("/"),$,a("方法。")]),n("p",null,[a("在开发自定义账户时，使用这个库实际上是必须的，因为这是调用"),J,a("系统合约的非视图方法的唯一方法。另外，如果你想让用户部署自己的合约，你就必须使用这个库。你可以使用EOA账户的"),n("a",Q,[a("实现"),e(s)]),a("作为参考。")]),U,n("p",null,[a("为了给运营商提供DoS保护，EIP4337对账户的验证步骤施加了一些"),n("a",nn,[a("限制"),e(s)]),a("。 其中大部分，特别是那些关于被禁止的操作码，仍然是相关的。然而，为了提高用户体验，有几个限制被取消了。")]),an,n("p",null,[a("实现AA接口的一个例子是EOA账户的"),n("a",en,[a("实现"),e(s)]),a("。 请注意，这个账户，就像以太坊上的标准EOA账户一样，只要被外部地址调用，就会成功返回空值，而这可能不是你的账户所希望的行为。")]),sn,n("p",null,[a("如果你正在建立一个智能钱包，我们也_高度鼓励_你实施"),n("a",tn,[a("EIP1271"),e(s)]),a("签名验证方案。 这是由zkSync团队认可的标准。它被用于本节下面描述的签名验证库中。")]),on,n("p",null,[a("为了优化，"),e(o,{to:"/dev/developer-guides/building-on-zksync/contracts/contract-deployment.html#differences-in-create-behaviour"},{default:c(()=>[a("tx nonce和部署nonce")]),_:1}),a("都放在"),e(o,{to:"/dev/developer-guides/system-contracts.html#nonceholder"},{default:c(()=>[a("NonceHolder")]),_:1}),a("系统合同中的一个存储槽中。 为了增加账户的nonce，强烈建议调用"),n("a",cn,[a("incrementNonceIfEquals"),e(s)]),a("函数并传递交易中提供的nonce的值。")]),rn,n("p",null,[a("由于应允许多个用户访问同一个支付系统，恶意的支付系统_可以对我们的系统进行DoS攻击。为了解决这个问题，将使用一个类似于"),n("a",pn,[a("EIP4337信誉评分"),e(s)]),a("的系统。")]),ln,n("p",null,[dn,a("SDK提供了"),e(o,{to:"/dev/developer-guides/api/js/utils.html#encoding-paymaster-params"},{default:c(()=>[a("方法")]),_:1}),a("，用于为所有内置的paymaster流程正确编码格式化的paymaster参数。")]),un,n("p",null,[a("在"),e(o,{to:"/dev/building-on-zksync/hello-world.html#paying-fees-using-testnet-paymaster"},{default:c(()=>[a("quickstart")]),_:1}),a("教程中可以看到如何使用testnet paymaster的例子。")]),hn,kn,n("p",null,[a("将要建立的各种类型的账户之间最明显的区别之一是不同的签名方案。我们期望账户支持"),n("a",mn,[a("EIP-1271"),e(s)]),a("标准。我们的团队已经创建了一个用于验证账户签名的实用程序库。目前，它只支持ECDSA签名，但我们很快也会增加对EIP-1271的支持。")]),bn])}const fn=i(d,[["render",vn],["__file","aa.html.vue"]]);export{fn as default};
