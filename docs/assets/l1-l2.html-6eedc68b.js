import{_ as c,W as o,X as i,Z as s,$ as n,a0 as t,a2 as e,Y as p,D as l}from"./framework-674379d2.js";const u={},d=s("h1",{id:"l1-l2通信",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#l1-l2通信","aria-hidden":"true"},"#"),n(" L1->L2通信")],-1),r=p(`<div class="hint-container warning"><p class="hint-container-title">Note</p><p>请注意，在新的<code>0.13.0</code>SDK中，API层用气体操作。ergs的概念只被VM使用。</p></div><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h2><p>对于最常见的用例，有一个交易的 &quot;baseFee&quot;，这基本上意味着用户必须向运营商支付的最低金额，以便他包括这项交易。它是根据交易的 &quot;l2gasLimit &quot;和L1的天然气价格得出的。 此外，无论用户在上面支付什么费用，都被称为<strong>layer2 tip</strong>，并将用于按提供的L2费用对交易进行排序。</p><p>目前，所有L1-&gt;L2的交易都以先入先出的方式提供服务，但在未来，我们将引入 &quot;优先堆&quot;，这将允许对交易进行排序。 交易。 基本费用是以气体为单位，而不是以ETH为单位，所以提交交易的实际费用取决于 交易气体价格。一般来说，调用任何这些方法的流程应该是这样的。</p><ol><li>获取你将用于发送交易的气体价格。</li><li>获取交易的基本成本。</li><li>发送包括所需 &quot;值 &quot;的交易。</li></ol><h2 id="在你的项目中使用合同接口" tabindex="-1"><a class="header-anchor" href="#在你的项目中使用合同接口" aria-hidden="true">#</a> 在你的项目中使用合同接口</h2><p>要使用 Solidity 与 zkSync 邮箱合同互动，您需要使用 zkSync 合同接口。有两种主要方式来获得它。</p><ul><li>通过从 <code>@matterlabs/zksync-contracts</code> npm 包中导入它（首选）。</li><li>通过从[repo]下载合同（https://github.com/matter-labs/v2-testnet-contracts）。</li></ul><p><code>@matterlabs/zksync-contracts</code>包可以通过运行以下命令来安装。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add -D @matterlabs/zksync-contracts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在下面的例子中，我们假设通过<code>@matterlabs/zksync-contracts</code> npm包访问该接口。</p><h3 id="获取基本成本" tabindex="-1"><a class="header-anchor" href="#获取基本成本" aria-hidden="true">#</a> 获取基本成本</h3><p>下面的视图函数返回用户需要提供的ETH数量，以支付交易的基本成本。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">function</span> <span class="token function">l2TransactionBaseCost</span><span class="token punctuation">(</span>
    <span class="token builtin">uint256</span> _gasPrice<span class="token punctuation">,</span>
    <span class="token builtin">uint256</span> _gasLimit<span class="token punctuation">,</span>
    <span class="token builtin">uint256</span> _l2GasPerPubdataByteLimit
<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,14),k=s("li",null,[s("code",null,"_gasPrice"),n("是一个参数，包含交易的天然气价格。")],-1),v=s("code",null,"_gasLimit",-1),m=s("li",null,[s("code",null,"_l2GasPerPubdataByteLimit"),n("是一个参数，包含每个发布的L1 calldata字节的二级气体价格。")],-1),b=p(`<h3 id="接口" tabindex="-1"><a class="header-anchor" href="#接口" aria-hidden="true">#</a> 接口</h3><p>下面的函数返回规范的哈希值或请求的交易，可用于跟踪交易在L2中的执行情况。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">function</span> <span class="token function">requestL2Transaction</span><span class="token punctuation">(</span>
    <span class="token builtin">address</span> _contractL2<span class="token punctuation">,</span>
    <span class="token builtin">uint256</span> _l2Value<span class="token punctuation">,</span>
    <span class="token builtin">bytes</span> <span class="token keyword">calldata</span> _calldata<span class="token punctuation">,</span>
    <span class="token builtin">uint256</span> _l2GasLimit<span class="token punctuation">,</span>
    <span class="token builtin">uint256</span> _l2GasPerPubdataByteLimit<span class="token punctuation">,</span>
    <span class="token builtin">bytes</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">calldata</span> _factoryDeps<span class="token punctuation">,</span>
    <span class="token builtin">address</span> _refundRecipient
<span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes32</span> txHash<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><p><code>_contractL2</code>是一个参数，定义了要调用的合约地址。</p></li><li><p><code>_l2Value</code>是一个参数，它定义了你想在调用L2时传递的ETH的数量。这个数字将被用作交易的\`msg.value&#39;。</p></li><li><p><code>_calldata</code>是一个参数，包含交易调用的calldata。它的编码方式与Ethereum上的相同。</p></li><li><p><code>_l2GasLimit</code>是一个参数，包含交易调用的气体限制。你可以了解更多关于气体和zkSync收费系统的信息[这里]（.../transactions/fee-model.md）。</p></li><li><p><code>_l2GasPerPubdataByteLimit</code>是一个参数，包含每个发布到L1 calldata字节的L2气体价格。</p></li><li><p><code>_factoryDeps</code>是一个字节码的列表。它应该包含被部署的合同的字节码。如果被部署的合同是一个工厂合同，即它可以部署其他合同，该数组还应该包含可以被它部署的合同的字节码。</p></li><li><p><code>_refundRecipient</code>是一个在交易执行后接收剩余费用的地址。(如果指定的地址为零，那么将使用L2 <code>msg.sender</code>)</p></li></ul><p>随着方法的调用，应该提供一定数量的ETH来支付交易的基本费用（包括<code>_l2Value</code>）+第二层操作员的小费。</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>A <strong>successful</strong> L1 -&gt; L2 message produces an <code>L2Log</code> with <code>key = l2TxHash</code>, and <code>value = bytes32(1)</code> whereas a <strong>failed</strong> L1 -&gt; L2 message produces an <code>L2Log</code> with <code>key = l2TxHash</code>, and <code>value = bytes32(0)</code>.</p></div><h3 id="实例" tabindex="-1"><a class="header-anchor" href="#实例" aria-hidden="true">#</a> 实例</h3><h4 id="solidity" tabindex="-1"><a class="header-anchor" href="#solidity" aria-hidden="true">#</a> Solidity</h4><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">//SPDX-License-Identifier: Unlicense</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token comment">// Importing zkSync contract interface</span>
<span class="token keyword">import</span> <span class="token string">&quot;@matterlabs/zksync-contracts/l1/contracts/zksync/interfaces/IZkSync.sol&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">callZkSync</span><span class="token punctuation">(</span>
        <span class="token comment">// The address of the zkSync smart contract.</span>
        <span class="token comment">// It is not recommended to hardcode it during the alpha testnet as regenesis may happen.</span>
        <span class="token builtin">address</span> _zkSyncAddress
    <span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> txHash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        IZkSync zksync <span class="token operator">=</span> <span class="token function">IZkSync</span><span class="token punctuation">(</span>_zkSyncAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token builtin">address</span> someL2Contract <span class="token operator">=</span> <span class="token number">0xDbA0833e8c4b37cecC177a665E9207962e337299</span><span class="token punctuation">;</span>
        <span class="token comment">// calling L2 smart contract from L1 Example contract</span>
        txHash <span class="token operator">=</span> zksync<span class="token punctuation">.</span>requestL2Transaction<span class="token punctuation">{</span>value<span class="token punctuation">:</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">(</span>
            <span class="token comment">// The address of the L2 contract to call</span>
            someL2Contract<span class="token punctuation">,</span>
            <span class="token comment">// We pass no ETH with the call</span>
            <span class="token number">0</span><span class="token punctuation">,</span>
            <span class="token comment">// Encoding the calldata for the execute</span>
            abi<span class="token punctuation">.</span><span class="token function">encodeWithSignature</span><span class="token punctuation">(</span><span class="token string">&quot;someMethod()&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">// Gas limit</span>
            <span class="token number">10000</span><span class="token punctuation">,</span>
            <span class="token comment">// gas price per pubdata byte</span>
            <span class="token number">800</span><span class="token punctuation">,</span>
            <span class="token comment">// factory dependencies</span>
            <span class="token keyword">new</span> <span class="token class-name">bytes</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token comment">// refund address</span>
            <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="zksync-web3。" tabindex="-1"><a class="header-anchor" href="#zksync-web3。" aria-hidden="true">#</a> zksync-web3。</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Wallet<span class="token punctuation">,</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ethers<span class="token punctuation">,</span> BigNumber <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">TEST_PRIVATE_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> zkSyncProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ethereumProvider <span class="token operator">=</span> ethers<span class="token punctuation">.</span><span class="token function">getDefaultProvider</span><span class="token punctuation">(</span><span class="token string">&quot;goerli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token constant">TEST_PRIVATE_KEY</span><span class="token punctuation">,</span> zkSyncProvider<span class="token punctuation">,</span> ethereumProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> gasPrice <span class="token operator">=</span> <span class="token keyword">await</span> wallet<span class="token punctuation">.</span>providerL1<span class="token operator">!</span><span class="token punctuation">.</span><span class="token function">getGasPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// The calldata can be encoded the same way as for Ethereum</span>
<span class="token keyword">const</span> calldata <span class="token operator">=</span> <span class="token string">&quot;0x...&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> gasLimit <span class="token operator">=</span> BigNumber<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> gasPerPubdataByte <span class="token operator">=</span> BigNumber<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">800</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> txCostPrice <span class="token operator">=</span> <span class="token keyword">await</span> wallet<span class="token punctuation">.</span><span class="token function">getBaseCost</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  gasPrice<span class="token punctuation">,</span>
  gasLimit<span class="token punctuation">,</span>
  gasPerPubdataByte
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Executing the transaction will cost </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">formatEther</span><span class="token punctuation">(</span>txCostPrice<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> ETH</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// initiating L2 transfer via L1 execute from zksync wallet</span>
<span class="token keyword">const</span> someL2Contract <span class="token operator">=</span> <span class="token string">&quot;0x19a5bfcbe15f98aa073b9f81b58466521479df8d&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> executeTx <span class="token operator">=</span> <span class="token keyword">await</span> wallet<span class="token punctuation">.</span><span class="token function">requestExecute</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  calldata<span class="token punctuation">,</span>
  l2GasLimit<span class="token operator">:</span> gasLimit<span class="token punctuation">,</span>
  gasPerPubdataByte<span class="token punctuation">,</span>
  contractAddress<span class="token operator">:</span> someL2Contract<span class="token punctuation">,</span>
  overrides<span class="token operator">:</span> <span class="token punctuation">{</span>
    gasPrice<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">await</span> executeTx<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11);function y(h,g){const a=l("RouterLink");return o(),i("div",null,[d,s("p",null,[n("本节描述了从L1与zkSync交互的界面。它假定你已经熟悉了与优先级队列工作的基本概念。如果你是这个话题的新手，你可以阅读概念性介绍"),t(a,{to:"/dev/developer-guides/bridging/l1-l2-interop.html#priority-queue"},{default:e(()=>[n("这里")]),_:1}),n("。如果你想直接钻研代码，那么你可以阅读跨链治理"),t(a,{to:"/dev/developer-guides/bridging/tutorials/cross-chain-tutorial.html"},{default:e(()=>[n("教程")]),_:1}),n("。")]),r,s("ul",null,[k,s("li",null,[v,n("是一个参数，包含交易调用的气体限额。你可以了解更多关于气体和zkSync收费系统的信息"),t(a,{to:"/dev/developer-guides/bridging/.../transactions/fee-model.html"},{default:e(()=>[n("这里")]),_:1}),n("。")]),m]),b])}const f=c(u,[["render",y],["__file","l1-l2.html.vue"]]);export{f as default};
