import{_ as t,W as e,X as o,Z as s,$ as n,a0 as p,Y as c,D as i}from"./framework-674379d2.js";const l={},r=s("h1",{id:"提供者",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#提供者","aria-hidden":"true"},"#"),n(" 提供者")],-1),d={href:"https://web3py.readthedocs.io/en/v5/providers.html?highlight=providers",target:"_blank",rel:"noopener noreferrer"},u=c(`<p>zkSync完全支持Ethereum Web3 API，所以你可以使用web3.py的提供者对象。然而，zkSync API提供了一些额外的JSON-RPC方法，这些方法允许。</p><ul><li>轻松地跟踪L1&lt;-&gt;L2交易。</li><li>交易的不同阶段的最终结果。默认情况下，我们的RPC返回服务器处理的最后一个状态的信息，但有些用例可能只需要跟踪 &quot;最终完成 &quot;的事务。</li></ul><p>*****init *****</p><p>初始化zkSync SDK。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>
                 web3<span class="token punctuation">:</span> Web3<span class="token punctuation">,</span>
                 erc20_bridge<span class="token punctuation">:</span> L1Bridge<span class="token punctuation">,</span>
                 eth_bridge<span class="token punctuation">:</span> L1Bridge<span class="token punctuation">,</span>
                 account<span class="token punctuation">:</span> BaseAccount<span class="token punctuation">,</span>
                 zksync<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span>ZkSyncContract<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Arguments</strong></p><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>web3</td><td>The provider instance to use for getting on-chain data.</td></tr><tr><td>erc20_bridge</td><td>The erc20 token address you want to bridge.</td></tr><tr><td>eth_bridge</td><td>The eth token address you want to bridge</td></tr><tr><td>account</td><td>Your wallet address used for transactions.</td></tr><tr><td>zksync (optional)</td><td>zkSync contract address</td></tr><tr><td>returns</td><td><code>Provider</code> object.</td></tr></tbody></table><h2 id="approve-deposits" tabindex="-1"><a class="header-anchor" href="#approve-deposits" aria-hidden="true">#</a> <code>approve_deposits</code></h2><p>从以太坊桥接ERC20代币需要批准代币到zkSync以太坊智能合约，它返回桥接的erc20代币地址。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">def</span> <span class="token function">approve_deposits</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> token<span class="token punctuation">:</span> Token<span class="token punctuation">,</span> limit<span class="token punctuation">:</span> Optional<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> txn_receipt

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Arguments</strong></p><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>token</td><td>The Ethereum address of the token.</td></tr><tr><td>limit(optional)</td><td>The number of tokens to be returned from the API.</td></tr></tbody></table><h2 id="transfer" tabindex="-1"><a class="header-anchor" href="#transfer" aria-hidden="true">#</a> <code>transfer</code></h2><p>转移方法，可以在同一接口内转移ETH或任何ERC20代币，并返回转移的交易收据。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">def</span> <span class="token function">transfer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> token<span class="token punctuation">:</span> Token<span class="token punctuation">,</span> amount<span class="token punctuation">:</span> Decimal<span class="token punctuation">,</span> to<span class="token punctuation">:</span> HexStr<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> txn_receipt

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Arguments</strong></p><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>token</td><td>The address of the token. ETH by default.</td></tr><tr><td>to</td><td>The wallet address to transfer the tokens to</td></tr><tr><td>amount</td><td>The amount of tokens to transfer</td></tr></tbody></table><p>从连接的钱包转移指定数量的代币到一个指定的地址。</p><blockquote><p>Example</p></blockquote><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
 <span class="token keyword">def</span> <span class="token function">transfer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> token<span class="token punctuation">:</span> Token<span class="token punctuation">,</span> amount<span class="token punctuation">:</span> Decimal<span class="token punctuation">,</span> to<span class="token punctuation">:</span> HexStr<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> token<span class="token punctuation">.</span>is_eth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># Checks if the token is a ETH token.</span>
            tx <span class="token operator">=</span> <span class="token punctuation">{</span>
                <span class="token string">&#39;nonce&#39;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>get_transaction_count<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token comment">#The nonce of the transaction.</span>
                <span class="token string">&#39;to&#39;</span><span class="token punctuation">:</span> to<span class="token punctuation">,</span> <span class="token comment"># Address to send tokens to</span>
                <span class="token string">&#39;value&#39;</span><span class="token punctuation">:</span> Web3<span class="token punctuation">.</span>toWei<span class="token punctuation">(</span>amount<span class="token punctuation">,</span> <span class="token string">&#39;ether&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment"># The amount of the token sent, converted to Wei.</span>
                <span class="token string">&#39;gas&#39;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>GAS_LIMIT<span class="token punctuation">,</span> <span class="token comment"># The gas limit</span>
                <span class="token string">&#39;gasPrice&#39;</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>gas_price <span class="token comment"># The gas price of the transaction.</span>
            <span class="token punctuation">}</span>
            signed_tx <span class="token operator">=</span> self<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>account<span class="token punctuation">.</span>sign_transaction<span class="token punctuation">(</span>tx<span class="token punctuation">,</span> self<span class="token punctuation">.</span>account<span class="token punctuation">)</span>
            txn_hash <span class="token operator">=</span> self<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>send_raw_transaction<span class="token punctuation">(</span>signed_tx<span class="token punctuation">.</span>rawTransaction<span class="token punctuation">)</span>
            txn_receipt <span class="token operator">=</span> self<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>wait_for_transaction_receipt<span class="token punctuation">(</span>txn_hash<span class="token punctuation">)</span>
            <span class="token keyword">return</span> txn_receipt <span class="token comment"># Returns the transaction receipt of the transfer.</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            token_contract <span class="token operator">=</span> ERC20Contract<span class="token punctuation">(</span>web3<span class="token operator">=</span>self<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>eth<span class="token punctuation">,</span>
                                           contract_address<span class="token operator">=</span>token<span class="token punctuation">.</span>l1_address<span class="token punctuation">,</span>
                                           account<span class="token operator">=</span>self<span class="token punctuation">.</span>account<span class="token punctuation">,</span>
                                           gas_provider<span class="token operator">=</span>self<span class="token punctuation">.</span>l1_erc20_bridge<span class="token punctuation">.</span>gas_provider<span class="token punctuation">)</span>
            <span class="token keyword">return</span> token_contract<span class="token punctuation">.</span>transfer<span class="token punctuation">(</span>to<span class="token punctuation">,</span> token<span class="token punctuation">.</span>to_int<span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># Returns the transaction receipt of the transfer.</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="get-deposit-base-cost" tabindex="-1"><a class="header-anchor" href="#get-deposit-base-cost" aria-hidden="true">#</a> <code>get_deposit_base_cost</code></h2><p>返回请求合约调用的基本费用（ETH）。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">def</span> <span class="token function">get_deposit_base_cost</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> gas_price<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> base_cost

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Arguments</strong></p><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>gas price</td><td>The gas price of the L1 transaction that will send the request for an execute call.</td></tr></tbody></table><h2 id="deposit" tabindex="-1"><a class="header-anchor" href="#deposit" aria-hidden="true">#</a> <code>deposit</code></h2><p>返回存款的交易收据。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">def</span> <span class="token function">deposit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> token<span class="token punctuation">:</span> Token<span class="token punctuation">,</span> amount<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> user_address<span class="token punctuation">:</span> HexStr<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> txn_receipt

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Arguments</strong></p><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>token</td><td>The address of the token to deposit.</td></tr><tr><td>amount</td><td>The amount of the token to be deposited.</td></tr><tr><td>user_address</td><td>The address that will receive the deposited tokens on L2.</td></tr></tbody></table><h2 id="is-deposit-approved" tabindex="-1"><a class="header-anchor" href="#is-deposit-approved" aria-hidden="true">#</a> <code>is_deposit_approved</code></h2><p>返回津贴集的交易收据。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code>
<span class="token keyword">def</span> <span class="token function">is_deposit_approved</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> token<span class="token punctuation">:</span> Token<span class="token punctuation">,</span> to<span class="token punctuation">:</span> HexStr<span class="token punctuation">,</span> threshold<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> DEFAULT_THRESHOLD<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> txn_receipt

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Arguments</strong></p><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>token</td><td>The address of the token to deposit.</td></tr><tr><td>to</td><td>The amount of the token to be deposited.</td></tr><tr><td>threshold</td><td>The daily automatic payout of all balances above your configured payout</td></tr></tbody></table>`,35);function k(h,v){const a=i("ExternalLinkIcon");return e(),o("div",null,[r,s("p",null,[n('提供者是包裹与zkSync节点的交互的对象。如果你对 "web3 "中提供者的概念感到陌生，你应该看看他们的文档'),s("a",d,[n("这里"),p(a)]),n("。")]),u])}const m=t(l,[["render",k],["__file","providers.html.vue"]]);export{m as default};
