import{_ as p,W as e,X as o,Z as s,$ as n,a0 as c,a2 as i,Y as a,D as l}from"./framework-674379d2.js";const u={},r=a('<h1 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h1><p>在本指南中，我们将演示如何。</p><ol><li>连接到zkSync网络。</li><li>将资产从以太坊存入zkSync。</li><li>检查余额。</li><li>4.转移和提取资金（本地和ERC20代币）。</li><li><ol start="5"><li>部署一个智能合约。</li></ol></li><li>6.用create2部署一个智能合约。</li></ol>',3),k={class:"hint-container warning"},d=s("p",{class:"hint-container-title"},"Note",-1),v=a(`<h2 id="添加依赖性" tabindex="-1"><a class="header-anchor" href="#添加依赖性" aria-hidden="true">#</a> 添加依赖性</h2><p>要安装zkSync Era，请在终端运行以下命令。</p><div class="language-console line-numbers-mode" data-ext="console"><pre class="language-console"><code>pip install zksync2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="连接到zksync" tabindex="-1"><a class="header-anchor" href="#连接到zksync" aria-hidden="true">#</a> 连接到zkSync</h2><p>一旦你有了所有必要的依赖，使用操作员节点的端点连接到zkSync。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>module<span class="token punctuation">.</span>module_builder <span class="token keyword">import</span> ZkSyncBuilder
<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
sdk <span class="token operator">=</span> ZkSyncBuilder<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该SDK支持主网和goerli网络。</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><p>一旦你实例化了SDK，你就可以用它来访问你的zkSync合同。你可以使用SDK的合同获取器功能，例如。</p><h3 id="存入资金" tabindex="-1"><a class="header-anchor" href="#存入资金" aria-hidden="true">#</a> 存入资金</h3><p>这是一个如何将资产从Ethereum账户存入zkSync账户的例子。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> web3 <span class="token keyword">import</span> Web3
<span class="token keyword">from</span> web3<span class="token punctuation">.</span>middleware <span class="token keyword">import</span> geth_poa_middleware
<span class="token keyword">from</span> eth_account <span class="token keyword">import</span> Account
<span class="token keyword">from</span> eth_account<span class="token punctuation">.</span>signers<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalAccount
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>manage_contracts<span class="token punctuation">.</span>gas_provider <span class="token keyword">import</span> StaticGasProvider
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>module<span class="token punctuation">.</span>module_builder <span class="token keyword">import</span> ZkSyncBuilder
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>core<span class="token punctuation">.</span>types <span class="token keyword">import</span> Token
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>provider<span class="token punctuation">.</span>eth_provider <span class="token keyword">import</span> EthereumProvider


<span class="token keyword">def</span> <span class="token function">deposit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    URL_TO_ETH_NETWORK <span class="token operator">=</span> <span class="token string">&quot;https://goerli.infura.io/v3/25be7ab42c414680a5f89297f8a11a4d&quot;</span>
    ZKSYNC_NETWORK_URL <span class="token operator">=</span> <span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span>

    eth_web3 <span class="token operator">=</span> Web3<span class="token punctuation">(</span>Web3<span class="token punctuation">.</span>HTTPProvider<span class="token punctuation">(</span>URL_TO_ETH_NETWORK<span class="token punctuation">)</span><span class="token punctuation">)</span>
    eth_web3<span class="token punctuation">.</span>middleware_onion<span class="token punctuation">.</span>inject<span class="token punctuation">(</span>geth_poa_middleware<span class="token punctuation">,</span> layer<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
    zksync_web3 <span class="token operator">=</span> ZkSyncBuilder<span class="token punctuation">.</span>build<span class="token punctuation">(</span>ZKSYNC_NETWORK_URL<span class="token punctuation">)</span>
    account<span class="token punctuation">:</span> LocalAccount <span class="token operator">=</span> Account<span class="token punctuation">.</span>from_key<span class="token punctuation">(</span><span class="token string">&#39;YOUR_PRIVATE_KEY&#39;</span><span class="token punctuation">)</span>
    gas_provider <span class="token operator">=</span> StaticGasProvider<span class="token punctuation">(</span>Web3<span class="token punctuation">.</span>toWei<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">&quot;gwei&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">555000</span><span class="token punctuation">)</span>
    eth_provider <span class="token operator">=</span> EthereumProvider<span class="token punctuation">.</span>build_ethereum_provider<span class="token punctuation">(</span>zksync<span class="token operator">=</span>zksync_web3<span class="token punctuation">,</span>
                                                            eth<span class="token operator">=</span>eth_web3<span class="token punctuation">,</span>
                                                            account<span class="token operator">=</span>account<span class="token punctuation">,</span>
                                                            gas_provider<span class="token operator">=</span>gas_provider<span class="token punctuation">)</span>
    tx_receipt <span class="token operator">=</span> eth_provider<span class="token punctuation">.</span>deposit<span class="token punctuation">(</span>Token<span class="token punctuation">.</span>create_eth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                      eth_web3<span class="token punctuation">.</span>toWei<span class="token punctuation">(</span><span class="token string">&quot;YOUR_AMOUNT_OF_ETH&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;ether&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                      account<span class="token punctuation">.</span>address<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;tx status: </span><span class="token interpolation"><span class="token punctuation">{</span>tx_receipt<span class="token punctuation">[</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    deposit<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="检查余额" tabindex="-1"><a class="header-anchor" href="#检查余额" aria-hidden="true">#</a> 检查余额</h3><p>下面是另一个关于如何检查你的余额的例子。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> eth_account <span class="token keyword">import</span> Account
<span class="token keyword">from</span> eth_account<span class="token punctuation">.</span>signers<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalAccount
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>module<span class="token punctuation">.</span>module_builder <span class="token keyword">import</span> ZkSyncBuilder
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>core<span class="token punctuation">.</span>types <span class="token keyword">import</span> EthBlockParams


<span class="token keyword">def</span> <span class="token function">get_account_balance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    ZKSYNC_NETWORK_URL<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;https://zksync2-testnet.zksync.dev&#39;</span>
    account<span class="token punctuation">:</span> LocalAccount <span class="token operator">=</span> Account<span class="token punctuation">.</span>from_key<span class="token punctuation">(</span><span class="token string">&#39;YOUR_PRIVATE_KEY&#39;</span><span class="token punctuation">)</span>
    zksync_web3 <span class="token operator">=</span> ZkSyncBuilder<span class="token punctuation">.</span>build<span class="token punctuation">(</span>ZKSYNC_NETWORK_URL<span class="token punctuation">)</span>
    zk_balance <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>get_balance<span class="token punctuation">(</span>account<span class="token punctuation">.</span>address<span class="token punctuation">,</span> EthBlockParams<span class="token punctuation">.</span>LATEST<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;ZkSync balance: </span><span class="token interpolation"><span class="token punctuation">{</span>zk_balance<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    get_account_balance<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转移" tabindex="-1"><a class="header-anchor" href="#转移" aria-hidden="true">#</a> 转移</h3><p>下面是一个关于如何在zkSync网络上转移资金的例子。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> eth_typing <span class="token keyword">import</span> HexStr
<span class="token keyword">from</span> web3 <span class="token keyword">import</span> Web3
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>module<span class="token punctuation">.</span>module_builder <span class="token keyword">import</span> ZkSyncBuilder
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>core<span class="token punctuation">.</span>types <span class="token keyword">import</span> ZkBlockParams
<span class="token keyword">from</span> eth_account <span class="token keyword">import</span> Account
<span class="token keyword">from</span> eth_account<span class="token punctuation">.</span>signers<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalAccount
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>signer<span class="token punctuation">.</span>eth_signer <span class="token keyword">import</span> PrivateKeyEthSigner
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>transaction712 <span class="token keyword">import</span> TxFunctionCall


<span class="token keyword">def</span> <span class="token function">transfer_to_self</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    amount <span class="token operator">=</span> <span class="token number">0.05</span>
    account<span class="token punctuation">:</span> LocalAccount <span class="token operator">=</span> Account<span class="token punctuation">.</span>from_key<span class="token punctuation">(</span><span class="token string">&quot;YOUR_PRIVATE_KEY&quot;</span><span class="token punctuation">)</span>
    zksync_web3 <span class="token operator">=</span> ZkSyncBuilder<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token string">&quot;ZKSYNC_NETWORK_URL&quot;</span><span class="token punctuation">)</span>
    chain_id <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>chain_id
    signer <span class="token operator">=</span> PrivateKeyEthSigner<span class="token punctuation">(</span>account<span class="token punctuation">,</span> chain_id<span class="token punctuation">)</span>

    nonce <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>get_transaction_count<span class="token punctuation">(</span>account<span class="token punctuation">.</span>address<span class="token punctuation">,</span> ZkBlockParams<span class="token punctuation">.</span>COMMITTED<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    gas_price <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>gas_price

    tx_func_call <span class="token operator">=</span> TxFunctionCall<span class="token punctuation">(</span>chain_id<span class="token operator">=</span>chain_id<span class="token punctuation">,</span>
                                  nonce<span class="token operator">=</span>nonce<span class="token punctuation">,</span>
                                  from_<span class="token operator">=</span>account<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
                                  to<span class="token operator">=</span>account<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
                                  value<span class="token operator">=</span>Web3<span class="token punctuation">.</span>toWei<span class="token punctuation">(</span>amount<span class="token punctuation">,</span> <span class="token string">&#39;ether&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  data<span class="token operator">=</span>HexStr<span class="token punctuation">(</span><span class="token string">&quot;0x&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                  gas_limit<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment"># unknown at this state, will be replaced by estimate_gas</span>
                                  gas_price<span class="token operator">=</span>gas_price<span class="token punctuation">,</span>
                                  max_priority_fee_per_gas<span class="token operator">=</span><span class="token number">100000000</span><span class="token punctuation">)</span>
    estimate_gas <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>eth_estimate_gas<span class="token punctuation">(</span>tx_func_call<span class="token punctuation">.</span>tx<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Fee for transaction is: </span><span class="token interpolation"><span class="token punctuation">{</span>estimate_gas <span class="token operator">*</span> gas_price<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    tx_712 <span class="token operator">=</span> tx_func_call<span class="token punctuation">.</span>tx712<span class="token punctuation">(</span>estimate_gas<span class="token punctuation">)</span>

    singed_message <span class="token operator">=</span> signer<span class="token punctuation">.</span>sign_typed_data<span class="token punctuation">(</span>tx_712<span class="token punctuation">.</span>to_eip712_struct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    msg <span class="token operator">=</span> tx_712<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>singed_message<span class="token punctuation">)</span>
    tx_hash <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>send_raw_transaction<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    tx_receipt <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>wait_for_transaction_receipt<span class="token punctuation">(</span>tx_hash<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">240</span><span class="token punctuation">,</span> poll_latency<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;tx_hash : </span><span class="token interpolation"><span class="token punctuation">{</span>tx_hash<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">, status: </span><span class="token interpolation"><span class="token punctuation">{</span>tx_receipt<span class="token punctuation">[</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    transfer_to_self<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="转移资金-erc20代币" tabindex="-1"><a class="header-anchor" href="#转移资金-erc20代币" aria-hidden="true">#</a> 转移资金（ERC20代币）</h3><p>下面这个例子显示了你如何转移ERC20代币。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>manage_contracts<span class="token punctuation">.</span>erc20_contract <span class="token keyword">import</span> ERC20FunctionEncoder
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>module<span class="token punctuation">.</span>module_builder <span class="token keyword">import</span> ZkSyncBuilder
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>core<span class="token punctuation">.</span>types <span class="token keyword">import</span> ZkBlockParams
<span class="token keyword">from</span> eth_account <span class="token keyword">import</span> Account
<span class="token keyword">from</span> eth_account<span class="token punctuation">.</span>signers<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalAccount
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>signer<span class="token punctuation">.</span>eth_signer <span class="token keyword">import</span> PrivateKeyEthSigner
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>transaction712 <span class="token keyword">import</span> TxFunctionCall


<span class="token keyword">def</span> <span class="token function">transfer_erc20_token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    account<span class="token punctuation">:</span> LocalAccount <span class="token operator">=</span> Account<span class="token punctuation">.</span>from_key<span class="token punctuation">(</span><span class="token string">&quot;YOUR_PRIVATE_KEY&quot;</span><span class="token punctuation">)</span>
    zksync_web3 <span class="token operator">=</span> ZkSyncBuilder<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token string">&quot;ZKSYNC_NETWORK_URL&quot;</span><span class="token punctuation">)</span>
    chain_id <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>chain_id
    signer <span class="token operator">=</span> PrivateKeyEthSigner<span class="token punctuation">(</span>account<span class="token punctuation">,</span> chain_id<span class="token punctuation">)</span>

    nonce <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>get_transaction_count<span class="token punctuation">(</span>account<span class="token punctuation">.</span>address<span class="token punctuation">,</span> ZkBlockParams<span class="token punctuation">.</span>COMMITTED<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    gas_price <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>gas_price

    tokens <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>zks_get_confirmed_tokens<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span>
    not_eth_tokens <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> tokens <span class="token keyword">if</span> <span class="token keyword">not</span> x<span class="token punctuation">.</span>is_eth<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
    token_address <span class="token operator">=</span> not_eth_tokens<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>l2_address

    erc20_encoder <span class="token operator">=</span> ERC20FunctionEncoder<span class="token punctuation">(</span>zksync_web3<span class="token punctuation">)</span>
    transfer_params <span class="token operator">=</span> <span class="token punctuation">[</span>account<span class="token punctuation">.</span>address<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>
    call_data <span class="token operator">=</span> erc20_encoder<span class="token punctuation">.</span>encode_method<span class="token punctuation">(</span><span class="token string">&quot;transfer&quot;</span><span class="token punctuation">,</span> args<span class="token operator">=</span>transfer_params<span class="token punctuation">)</span>

    func_call <span class="token operator">=</span> TxFunctionCall<span class="token punctuation">(</span>chain_id<span class="token operator">=</span>chain_id<span class="token punctuation">,</span>
                               nonce<span class="token operator">=</span>nonce<span class="token punctuation">,</span>
                               from_<span class="token operator">=</span>account<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
                               to<span class="token operator">=</span>token_address<span class="token punctuation">,</span>
                               data<span class="token operator">=</span>call_data<span class="token punctuation">,</span>
                               gas_limit<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment"># unknown at this state, will be replaced by estimate_gas</span>
                               gas_price<span class="token operator">=</span>gas_price<span class="token punctuation">,</span>
                               max_priority_fee_per_gas<span class="token operator">=</span><span class="token number">100000000</span><span class="token punctuation">)</span>
    estimate_gas <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>eth_estimate_gas<span class="token punctuation">(</span>func_call<span class="token punctuation">.</span>tx<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Fee for transaction is: </span><span class="token interpolation"><span class="token punctuation">{</span>estimate_gas <span class="token operator">*</span> gas_price<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    tx_712 <span class="token operator">=</span> func_call<span class="token punctuation">.</span>tx712<span class="token punctuation">(</span>estimate_gas<span class="token punctuation">)</span>
    singed_message <span class="token operator">=</span> signer<span class="token punctuation">.</span>sign_typed_data<span class="token punctuation">(</span>tx_712<span class="token punctuation">.</span>to_eip712_struct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    msg <span class="token operator">=</span> tx_712<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>singed_message<span class="token punctuation">)</span>
    tx_hash <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>send_raw_transaction<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    tx_receipt <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>wait_for_transaction_receipt<span class="token punctuation">(</span>tx_hash<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">240</span><span class="token punctuation">,</span> poll_latency<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;tx_hash : </span><span class="token interpolation"><span class="token punctuation">{</span>tx_hash<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">, status: </span><span class="token interpolation"><span class="token punctuation">{</span>tx_receipt<span class="token punctuation">[</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    transfer_erc20_token<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="提取资金-本地币" tabindex="-1"><a class="header-anchor" href="#提取资金-本地币" aria-hidden="true">#</a> 提取资金（本地币）</h3><p>这个例子展示了如何从zkSync提取资金。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimal
<span class="token keyword">from</span> eth_typing <span class="token keyword">import</span> HexStr
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>manage_contracts<span class="token punctuation">.</span>l2_bridge <span class="token keyword">import</span> L2BridgeEncoder
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>module<span class="token punctuation">.</span>module_builder <span class="token keyword">import</span> ZkSyncBuilder
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>core<span class="token punctuation">.</span>types <span class="token keyword">import</span> Token<span class="token punctuation">,</span> ZkBlockParams<span class="token punctuation">,</span> BridgeAddresses
<span class="token keyword">from</span> eth_account <span class="token keyword">import</span> Account
<span class="token keyword">from</span> eth_account<span class="token punctuation">.</span>signers<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalAccount
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>signer<span class="token punctuation">.</span>eth_signer <span class="token keyword">import</span> PrivateKeyEthSigner
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>transaction712 <span class="token keyword">import</span> TxFunctionCall


<span class="token keyword">def</span> <span class="token function">withdraw</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    value <span class="token operator">=</span> Decimal<span class="token punctuation">(</span><span class="token string">&quot;0.001&quot;</span><span class="token punctuation">)</span>

    account<span class="token punctuation">:</span> LocalAccount <span class="token operator">=</span> Account<span class="token punctuation">.</span>from_key<span class="token punctuation">(</span><span class="token string">&quot;PRIVATE_KEY&quot;</span><span class="token punctuation">)</span>
    zksync_web3 <span class="token operator">=</span> ZkSyncBuilder<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token string">&quot;ZKSYNC_NETWORK_URL&quot;</span><span class="token punctuation">)</span>
    chain_id <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>chain_id
    signer <span class="token operator">=</span> PrivateKeyEthSigner<span class="token punctuation">(</span>account<span class="token punctuation">,</span> chain_id<span class="token punctuation">)</span>
    ETH_TOKEN <span class="token operator">=</span> Token<span class="token punctuation">.</span>create_eth<span class="token punctuation">(</span><span class="token punctuation">)</span>

    nonce <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>get_transaction_count<span class="token punctuation">(</span>account<span class="token punctuation">.</span>address<span class="token punctuation">,</span> ZkBlockParams<span class="token punctuation">.</span>COMMITTED<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    gas_price <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>gas_price
    bridges<span class="token punctuation">:</span> BridgeAddresses <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>zks_get_bridge_contracts<span class="token punctuation">(</span><span class="token punctuation">)</span>

    l2_func_encoder <span class="token operator">=</span> L2BridgeEncoder<span class="token punctuation">(</span>zksync_web3<span class="token punctuation">)</span>
    call_data <span class="token operator">=</span> l2_func_encoder<span class="token punctuation">.</span>encode_function<span class="token punctuation">(</span>fn_name<span class="token operator">=</span><span class="token string">&quot;withdraw&quot;</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span>
        account<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
        ETH_TOKEN<span class="token punctuation">.</span>l2_address<span class="token punctuation">,</span>
        ETH_TOKEN<span class="token punctuation">.</span>to_int<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
    <span class="token punctuation">]</span><span class="token punctuation">)</span>

    func_call <span class="token operator">=</span> TxFunctionCall<span class="token punctuation">(</span>chain_id<span class="token operator">=</span>chain_id<span class="token punctuation">,</span>
                               nonce<span class="token operator">=</span>nonce<span class="token punctuation">,</span>
                               from_<span class="token operator">=</span>account<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
                               to<span class="token operator">=</span>bridges<span class="token punctuation">.</span>l2_eth_default_bridge<span class="token punctuation">,</span>
                               data<span class="token operator">=</span>HexStr<span class="token punctuation">(</span>call_data<span class="token punctuation">)</span><span class="token punctuation">,</span>
                               gas_limit<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token comment"># unknown at this state, will be replaced by estimate_gas</span>
                               gas_price<span class="token operator">=</span>gas_price<span class="token punctuation">,</span>
                               max_priority_fee_per_gas<span class="token operator">=</span><span class="token number">100000000</span><span class="token punctuation">)</span>
    estimate_gas <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>eth_estimate_gas<span class="token punctuation">(</span>func_call<span class="token punctuation">.</span>tx<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Fee for transaction is: </span><span class="token interpolation"><span class="token punctuation">{</span>estimate_gas <span class="token operator">*</span> gas_price<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    tx_712 <span class="token operator">=</span> func_call<span class="token punctuation">.</span>tx712<span class="token punctuation">(</span>estimate_gas<span class="token punctuation">)</span>
    singed_message <span class="token operator">=</span> signer<span class="token punctuation">.</span>sign_typed_data<span class="token punctuation">(</span>tx_712<span class="token punctuation">.</span>to_eip712_struct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    msg <span class="token operator">=</span> tx_712<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>singed_message<span class="token punctuation">)</span>
    tx_hash <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>send_raw_transaction<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    tx_receipt <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>wait_for_transaction_receipt<span class="token punctuation">(</span>tx_hash<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">240</span><span class="token punctuation">,</span> poll_latency<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;tx_hash : </span><span class="token interpolation"><span class="token punctuation">{</span>tx_hash<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">, status: </span><span class="token interpolation"><span class="token punctuation">{</span>tx_receipt<span class="token punctuation">[</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    withdraw<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="部署一个智能合约" tabindex="-1"><a class="header-anchor" href="#部署一个智能合约" aria-hidden="true">#</a> 部署一个智能合约</h3><p>使用zkSync，您可以使用创建方法部署合同，只需将合同构建为二进制格式并将其部署到zkSync网络中。</p><p>在接下来的步骤中，我们将引导你了解它是如何工作的。</p><h4 id="第1步-创建一个合同" tabindex="-1"><a class="header-anchor" href="#第1步-创建一个合同" aria-hidden="true">#</a> 第1步：创建一个合同</h4><p>这里是一个简单的合同。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint256</span> value<span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> x<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        value <span class="token operator">+=</span> x<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint256</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> value<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>它必须只由zkSync编译器来编译!</p></div><ul><li><p>编译后，必须有2个文件，其中有。</p><ul><li>合同的二进制表示</li><li>json格式的合同ABI</li></ul></li></ul><h4 id="第2步-部署合同" tabindex="-1"><a class="header-anchor" href="#第2步-部署合同" aria-hidden="true">#</a> 第2步：部署合同</h4><p>为了部署合同，需要合同ABI来以标准的web3方式调用其方法。</p><p>在某些情况下，你需要在部署前获得合同地址。</p><p>下面是一个例子，说明你将如何做。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> json
<span class="token keyword">import</span> os
<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path
<span class="token keyword">from</span> eth_typing <span class="token keyword">import</span> HexStr
<span class="token keyword">from</span> web3 <span class="token keyword">import</span> Web3
<span class="token keyword">from</span> web3<span class="token punctuation">.</span>types <span class="token keyword">import</span> TxParams
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>manage_contracts<span class="token punctuation">.</span>contract_deployer <span class="token keyword">import</span> ContractDeployer
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>manage_contracts<span class="token punctuation">.</span>nonce_holder <span class="token keyword">import</span> NonceHolder
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>module<span class="token punctuation">.</span>module_builder <span class="token keyword">import</span> ZkSyncBuilder
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>core<span class="token punctuation">.</span>types <span class="token keyword">import</span> ZkBlockParams<span class="token punctuation">,</span> EthBlockParams
<span class="token keyword">from</span> eth_account <span class="token keyword">import</span> Account
<span class="token keyword">from</span> eth_account<span class="token punctuation">.</span>signers<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalAccount
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>signer<span class="token punctuation">.</span>eth_signer <span class="token keyword">import</span> PrivateKeyEthSigner
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>transaction712 <span class="token keyword">import</span> TxCreateContract


<span class="token keyword">def</span> <span class="token function">generate_random_salt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">read_hex_binary</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;./</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> p<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> contact_file<span class="token punctuation">:</span>
        lines <span class="token operator">=</span> contact_file<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lines<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>data<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">read_binary</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> Path<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> p<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> contact_file<span class="token punctuation">:</span>
        data <span class="token operator">=</span> contact_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> data


<span class="token keyword">def</span> <span class="token function">get_abi</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> Path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> p<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> json_f<span class="token punctuation">:</span>
        <span class="token keyword">return</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>json_f<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">CounterContractEncoder</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> web3<span class="token punctuation">:</span> Web3<span class="token punctuation">,</span> bin_path<span class="token punctuation">:</span> Path<span class="token punctuation">,</span> abi_path<span class="token punctuation">:</span> Path<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>web3 <span class="token operator">=</span> web3
        self<span class="token punctuation">.</span>counter_contract <span class="token operator">=</span> self<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>contract<span class="token punctuation">(</span>abi<span class="token operator">=</span>get_abi<span class="token punctuation">(</span>abi_path<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                       bytecode<span class="token operator">=</span>read_hex_binary<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>bin_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">encode_method</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fn_name<span class="token punctuation">,</span> args<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> HexStr<span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>counter_contract<span class="token punctuation">.</span>encodeABI<span class="token punctuation">(</span>fn_name<span class="token punctuation">,</span> args<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">deploy_contract_create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    account<span class="token punctuation">:</span> LocalAccount <span class="token operator">=</span> Account<span class="token punctuation">.</span>from_key<span class="token punctuation">(</span><span class="token string">&quot;PRIVATE_KEY&quot;</span><span class="token punctuation">)</span>
    zksync_web3 <span class="token operator">=</span> ZkSyncBuilder<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token string">&quot;ZKSYNC_NETWORK_URL&quot;</span><span class="token punctuation">)</span>
    chain_id <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>chain_id
    signer <span class="token operator">=</span> PrivateKeyEthSigner<span class="token punctuation">(</span>account<span class="token punctuation">,</span> chain_id<span class="token punctuation">)</span>

    counter_contract_bin <span class="token operator">=</span> read_hex_binary<span class="token punctuation">(</span><span class="token string">&quot;counter_contract.hex&quot;</span><span class="token punctuation">)</span>

    nonce <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>get_transaction_count<span class="token punctuation">(</span>account<span class="token punctuation">.</span>address<span class="token punctuation">,</span> EthBlockParams<span class="token punctuation">.</span>PENDING<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    gas_price <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>gas_price

    nonce_holder <span class="token operator">=</span> NonceHolder<span class="token punctuation">(</span>zksync_web3<span class="token punctuation">,</span> account<span class="token punctuation">)</span>
    deployment_nonce <span class="token operator">=</span> nonce_holder<span class="token punctuation">.</span>get_deployment_nonce<span class="token punctuation">(</span>account<span class="token punctuation">.</span>address<span class="token punctuation">)</span>
    deployer <span class="token operator">=</span> ContractDeployer<span class="token punctuation">(</span>zksync_web3<span class="token punctuation">)</span>
    precomputed_address <span class="token operator">=</span> deployer<span class="token punctuation">.</span>compute_l2_create_address<span class="token punctuation">(</span>account<span class="token punctuation">.</span>address<span class="token punctuation">,</span> deployment_nonce<span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;precomputed address: </span><span class="token interpolation"><span class="token punctuation">{</span>precomputed_address<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    random_salt <span class="token operator">=</span> generate_random_salt<span class="token punctuation">(</span><span class="token punctuation">)</span>
    create_contract <span class="token operator">=</span> TxCreateContract<span class="token punctuation">(</span>web3<span class="token operator">=</span>zksync_web3<span class="token punctuation">,</span>
                                       chain_id<span class="token operator">=</span>chain_id<span class="token punctuation">,</span>
                                       nonce<span class="token operator">=</span>nonce<span class="token punctuation">,</span>
                                       from_<span class="token operator">=</span>account<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
                                       gas_limit<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>  <span class="token comment"># unknown at this state, will be replaced by estimate_gas</span>
                                       gas_price<span class="token operator">=</span>gas_price<span class="token punctuation">,</span>
                                       bytecode<span class="token operator">=</span>counter_contract_bin<span class="token punctuation">,</span>
                                       salt<span class="token operator">=</span>random_salt<span class="token punctuation">)</span>
    estimate_gas <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>eth_estimate_gas<span class="token punctuation">(</span>create_contract<span class="token punctuation">.</span>tx<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Fee for transaction is: </span><span class="token interpolation"><span class="token punctuation">{</span>estimate_gas <span class="token operator">*</span> gas_price<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    tx_712 <span class="token operator">=</span> create_contract<span class="token punctuation">.</span>tx712<span class="token punctuation">(</span>estimate_gas<span class="token punctuation">)</span>

    singed_message <span class="token operator">=</span> signer<span class="token punctuation">.</span>sign_typed_data<span class="token punctuation">(</span>tx_712<span class="token punctuation">.</span>to_eip712_struct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    msg <span class="token operator">=</span> tx_712<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>singed_message<span class="token punctuation">)</span>
    tx_hash <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>send_raw_transaction<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;tx_hash:</span><span class="token interpolation"><span class="token punctuation">{</span>tx_hash<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    tx_receipt <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>wait_for_transaction_receipt<span class="token punctuation">(</span>tx_hash<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">240</span><span class="token punctuation">,</span> poll_latency<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;tx status: </span><span class="token interpolation"><span class="token punctuation">{</span>tx_receipt<span class="token punctuation">[</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    contract_address <span class="token operator">=</span> tx_receipt<span class="token punctuation">[</span><span class="token string">&quot;contractAddress&quot;</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;contract address: </span><span class="token interpolation"><span class="token punctuation">{</span>contract_address<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    counter_contract_encoder <span class="token operator">=</span> CounterContractEncoder<span class="token punctuation">(</span>zksync_web3<span class="token punctuation">,</span> Path<span class="token punctuation">(</span><span class="token string">&quot;./counter_contract.hex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                      Path<span class="token punctuation">(</span><span class="token string">&quot;counter_contract_abi.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    call_data <span class="token operator">=</span> counter_contract_encoder<span class="token punctuation">.</span>encode_method<span class="token punctuation">(</span>fn_name<span class="token operator">=</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    eth_tx<span class="token punctuation">:</span> TxParams <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;from&quot;</span><span class="token punctuation">:</span> account<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
        <span class="token string">&quot;to&quot;</span><span class="token punctuation">:</span> contract_address<span class="token punctuation">,</span>
        <span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> call_data
    <span class="token punctuation">}</span>
    <span class="token comment"># Value is type dependent so might need to be converted to corresponded type under Python</span>
    eth_ret <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>call<span class="token punctuation">(</span>eth_tx<span class="token punctuation">,</span> ZkBlockParams<span class="token punctuation">.</span>COMMITTED<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    converted_result <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>eth_ret<span class="token punctuation">,</span> <span class="token string">&quot;big&quot;</span><span class="token punctuation">,</span> signed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Call method for deployed contract, address: </span><span class="token interpolation"><span class="token punctuation">{</span>contract_address<span class="token punctuation">}</span></span><span class="token string">, value: </span><span class="token interpolation"><span class="token punctuation">{</span>converted_result<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    deploy_contract_create<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用方法create2部署合同" tabindex="-1"><a class="header-anchor" href="#使用方法create2部署合同" aria-hidden="true">#</a> 使用方法create2部署合同</h4><p>这个例子展示了如何使用create2方法部署合同。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">import</span> os
<span class="token keyword">import</span> json
<span class="token keyword">from</span> pathlib <span class="token keyword">import</span> Path
<span class="token keyword">from</span> eth_typing <span class="token keyword">import</span> HexStr
<span class="token keyword">from</span> web3 <span class="token keyword">import</span> Web3
<span class="token keyword">from</span> web3<span class="token punctuation">.</span>types <span class="token keyword">import</span> TxParams
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>manage_contracts<span class="token punctuation">.</span>contract_deployer <span class="token keyword">import</span> ContractDeployer
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>module<span class="token punctuation">.</span>module_builder <span class="token keyword">import</span> ZkSyncBuilder
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>core<span class="token punctuation">.</span>types <span class="token keyword">import</span> ZkBlockParams<span class="token punctuation">,</span> EthBlockParams
<span class="token keyword">from</span> eth_account <span class="token keyword">import</span> Account
<span class="token keyword">from</span> eth_account<span class="token punctuation">.</span>signers<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalAccount
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>signer<span class="token punctuation">.</span>eth_signer <span class="token keyword">import</span> PrivateKeyEthSigner
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>transaction<span class="token punctuation">.</span>transaction712 <span class="token keyword">import</span> TxCreate2Contract


<span class="token keyword">def</span> <span class="token function">generate_random_salt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">read_hex_binary</span><span class="token punctuation">(</span>name<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>
    p <span class="token operator">=</span> Path<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;./</span><span class="token interpolation"><span class="token punctuation">{</span>name<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> p<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> contact_file<span class="token punctuation">:</span>
        lines <span class="token operator">=</span> contact_file<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>lines<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>data<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">read_binary</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> Path<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bytes</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> p<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">&#39;rb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> contact_file<span class="token punctuation">:</span>
        data <span class="token operator">=</span> contact_file<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> data


<span class="token keyword">def</span> <span class="token function">get_abi</span><span class="token punctuation">(</span>p<span class="token punctuation">:</span> Path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">with</span> p<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>mode<span class="token operator">=</span><span class="token string">&#39;r&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> json_f<span class="token punctuation">:</span>
        <span class="token keyword">return</span> json<span class="token punctuation">.</span>load<span class="token punctuation">(</span>json_f<span class="token punctuation">)</span>


<span class="token keyword">class</span> <span class="token class-name">CounterContractEncoder</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> web3<span class="token punctuation">:</span> Web3<span class="token punctuation">,</span> bin_path<span class="token punctuation">:</span> Path<span class="token punctuation">,</span> abi_path<span class="token punctuation">:</span> Path<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>web3 <span class="token operator">=</span> web3
        self<span class="token punctuation">.</span>counter_contract <span class="token operator">=</span> self<span class="token punctuation">.</span>web3<span class="token punctuation">.</span>eth<span class="token punctuation">.</span>contract<span class="token punctuation">(</span>abi<span class="token operator">=</span>get_abi<span class="token punctuation">(</span>abi_path<span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                       bytecode<span class="token operator">=</span>read_hex_binary<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>bin_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">encode_method</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fn_name<span class="token punctuation">,</span> args<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> HexStr<span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>counter_contract<span class="token punctuation">.</span>encodeABI<span class="token punctuation">(</span>fn_name<span class="token punctuation">,</span> args<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">deploy_contract_create2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    account<span class="token punctuation">:</span> LocalAccount <span class="token operator">=</span> Account<span class="token punctuation">.</span>from_key<span class="token punctuation">(</span><span class="token string">&quot;PRIVATE_KEY&quot;</span><span class="token punctuation">)</span>
    zksync_web3 <span class="token operator">=</span> ZkSyncBuilder<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token string">&quot;ZKSYNC_NETWORK_URL&quot;</span><span class="token punctuation">)</span>
    chain_id <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>chain_id
    signer <span class="token operator">=</span> PrivateKeyEthSigner<span class="token punctuation">(</span>account<span class="token punctuation">,</span> chain_id<span class="token punctuation">)</span>

    counter_contract_bin <span class="token operator">=</span> read_hex_binary<span class="token punctuation">(</span><span class="token string">&quot;counter_contract.hex&quot;</span><span class="token punctuation">)</span>

    nonce <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>get_transaction_count<span class="token punctuation">(</span>account<span class="token punctuation">.</span>address<span class="token punctuation">,</span> EthBlockParams<span class="token punctuation">.</span>PENDING<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    gas_price <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>gas_price

    deployer <span class="token operator">=</span> ContractDeployer<span class="token punctuation">(</span>zksync_web3<span class="token punctuation">)</span>
    random_salt <span class="token operator">=</span> generate_random_salt<span class="token punctuation">(</span><span class="token punctuation">)</span>
    precomputed_address <span class="token operator">=</span> deployer<span class="token punctuation">.</span>compute_l2_create2_address<span class="token punctuation">(</span>sender<span class="token operator">=</span>account<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
                                                              bytecode<span class="token operator">=</span>counter_contract_bin<span class="token punctuation">,</span>
                                                              constructor<span class="token operator">=</span><span class="token string">b&#39;&#39;</span><span class="token punctuation">,</span>
                                                              salt<span class="token operator">=</span>random_salt<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;precomputed address: </span><span class="token interpolation"><span class="token punctuation">{</span>precomputed_address<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    create2_contract <span class="token operator">=</span> TxCreate2Contract<span class="token punctuation">(</span>web3<span class="token operator">=</span>zksync_web3<span class="token punctuation">,</span>
                                         chain_id<span class="token operator">=</span>chain_id<span class="token punctuation">,</span>
                                         nonce<span class="token operator">=</span>nonce<span class="token punctuation">,</span>
                                         from_<span class="token operator">=</span>account<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
                                         gas_limit<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>
                                         gas_price<span class="token operator">=</span>gas_price<span class="token punctuation">,</span>
                                         bytecode<span class="token operator">=</span>counter_contract_bin<span class="token punctuation">,</span>
                                         salt<span class="token operator">=</span>random_salt<span class="token punctuation">)</span>
    estimate_gas <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>eth_estimate_gas<span class="token punctuation">(</span>create2_contract<span class="token punctuation">.</span>tx<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Fee for transaction is: </span><span class="token interpolation"><span class="token punctuation">{</span>estimate_gas <span class="token operator">*</span> gas_price<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    tx_712 <span class="token operator">=</span> create2_contract<span class="token punctuation">.</span>tx712<span class="token punctuation">(</span>estimate_gas<span class="token punctuation">)</span>
    singed_message <span class="token operator">=</span> signer<span class="token punctuation">.</span>sign_typed_data<span class="token punctuation">(</span>tx_712<span class="token punctuation">.</span>to_eip712_struct<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    msg <span class="token operator">=</span> tx_712<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>singed_message<span class="token punctuation">)</span>
    tx_hash <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>send_raw_transaction<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;tx_hash: </span><span class="token interpolation"><span class="token punctuation">{</span>tx_hash<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>
    tx_receipt <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>wait_for_transaction_receipt<span class="token punctuation">(</span>tx_hash<span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">240</span><span class="token punctuation">,</span> poll_latency<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;tx status: </span><span class="token interpolation"><span class="token punctuation">{</span>tx_receipt<span class="token punctuation">[</span><span class="token string">&#39;status&#39;</span><span class="token punctuation">]</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    contract_address <span class="token operator">=</span> tx_receipt<span class="token punctuation">[</span><span class="token string">&quot;contractAddress&quot;</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;contract address: </span><span class="token interpolation"><span class="token punctuation">{</span>contract_address<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>

    counter_contract_encoder <span class="token operator">=</span> CounterContractEncoder<span class="token punctuation">(</span>zksync_web3<span class="token punctuation">,</span> Path<span class="token punctuation">(</span><span class="token string">&quot;counter_contract.hex&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                      Path<span class="token punctuation">(</span><span class="token string">&quot;counter_contract_abi.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    call_data <span class="token operator">=</span> counter_contract_encoder<span class="token punctuation">.</span>encode_method<span class="token punctuation">(</span>fn_name<span class="token operator">=</span><span class="token string">&quot;get&quot;</span><span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    eth_tx<span class="token punctuation">:</span> TxParams <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token string">&quot;from&quot;</span><span class="token punctuation">:</span> account<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
        <span class="token string">&quot;to&quot;</span><span class="token punctuation">:</span> contract_address<span class="token punctuation">,</span>
        <span class="token string">&quot;data&quot;</span><span class="token punctuation">:</span> call_data
    <span class="token punctuation">}</span>
    eth_ret <span class="token operator">=</span> zksync_web3<span class="token punctuation">.</span>zksync<span class="token punctuation">.</span>call<span class="token punctuation">(</span>eth_tx<span class="token punctuation">,</span> ZkBlockParams<span class="token punctuation">.</span>COMMITTED<span class="token punctuation">.</span>value<span class="token punctuation">)</span>
    result <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>eth_ret<span class="token punctuation">,</span> <span class="token string">&quot;big&quot;</span><span class="token punctuation">,</span> signed<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f&quot;Call method for deployed contract, address: </span><span class="token interpolation"><span class="token punctuation">{</span>contract_address<span class="token punctuation">}</span></span><span class="token string">, value: </span><span class="token interpolation"><span class="token punctuation">{</span>result<span class="token punctuation">}</span></span><span class="token string">&quot;</span></span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&quot;__main__&quot;</span><span class="token punctuation">:</span>
    deploy_contract_create2<span class="token punctuation">(</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,40);function m(b,_){const t=l("RouterLink");return e(),o("div",null,[r,s("div",k,[d,s("p",null,[n("文件的这一部分正在审查中，以反映对系统合同的修改（"),c(t,{to:"/api/python/.../.../dev/troubleshooting/changelog.html"},{default:i(()=>[n("见changelog")]),_:1}),n("）。修订后的版本很快就会推出。")])]),v])}const g=p(u,[["render",m],["__file","getting-started.html.vue"]]);export{g as default};
