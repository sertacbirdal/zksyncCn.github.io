import{_ as p,W as o,X as c,Z as s,$ as n,a0 as t,Y as e,D as l}from"./framework-674379d2.js";const i={},r=s("h1",{id:"公平入驻阿尔法",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#公平入驻阿尔法","aria-hidden":"true"},"#"),n(" 公平入驻阿尔法")],-1),u={href:"https://forms.gle/wXjWiEeg16eMCWKJ8",target:"_blank",rel:"noopener noreferrer"},d=e('<h2 id="公平入驻如何运作" tabindex="-1"><a class="header-anchor" href="#公平入驻如何运作" aria-hidden="true">#</a> 公平入驻如何运作</h2><p>在Fair Onboarding Alpha期间，注册地址可以将代币桥接到zkSync，以部署和测试其产品/协议。</p><p>一旦桥接，对于如何在系统内使用令牌没有任何限制。例如，一个注册地址可以向一个非注册地址发送ETH，之后非注册地址可以不受限制地在zkSync内部使用它们（与任何智能合约互动）。话虽如此，但公平入职的明确目的是为了合同部署和测试 - 所以我们建议将交易保持在你的团队内。</p><p>**注意:**虽然非注册地址可以接收代币，但只有注册地址可以调用<code>finaliseWithdrawal</code>，因此将资产送回L1。当公平入职结束，L1 &lt;&gt; L2通信变得无权限时，这种情况就会改变。</p><h2 id="如何桥接资产" tabindex="-1"><a class="header-anchor" href="#如何桥接资产" aria-hidden="true">#</a> 如何桥接资产</h2><h3 id="使用门户桥接" tabindex="-1"><a class="header-anchor" href="#使用门户桥接" aria-hidden="true">#</a> 使用门户桥接</h3>',6),k={href:"http://portal.zksync.io",target:"_blank",rel:"noopener noreferrer"},v={href:"https://5p68rkvrcqg.typeform.com/to/NbYpe2pw",target:"_blank",rel:"noopener noreferrer"},m=e(`<h3 id="桥接脚本" tabindex="-1"><a class="header-anchor" href="#桥接脚本" aria-hidden="true">#</a> 桥接脚本</h3><p>要存入ETH，你可以使用<code>Deployer</code>类的<code>deposit</code>方法。下面是一个例子。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Wallet<span class="token punctuation">,</span> Provider<span class="token punctuation">,</span> utils <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ethers <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HardhatRuntimeEnvironment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;hardhat/types&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Deployer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@matterlabs/hardhat-zksync-deploy&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// load env file</span>
<span class="token keyword">import</span> dotenv <span class="token keyword">from</span> <span class="token string">&quot;dotenv&quot;</span><span class="token punctuation">;</span>
dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// HTTPS RPC endpoint</span>
<span class="token keyword">const</span> <span class="token constant">MAINNET_RPC_ENDPOINT</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Amount in ETH</span>
<span class="token keyword">const</span> <span class="token constant">AMOUNT</span> <span class="token operator">=</span> <span class="token string">&quot;0.1&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">WALLET_PRIV_KEY</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">WALLET_PRIV_KEY</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">WALLET_PRIV_KEY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Wallet private key not configured in env file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>hre<span class="token operator">:</span> HardhatRuntimeEnvironment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Running script to deposit ETH in L2</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Initialize the wallet.</span>
  <span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span><span class="token constant">MAINNET_RPC_ENDPOINT</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token constant">WALLET_PRIV_KEY</span><span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Create deployer object </span>
  <span class="token keyword">const</span> deployer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Deployer</span><span class="token punctuation">(</span>hre<span class="token punctuation">,</span> wallet<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Deposit ETH to L2</span>
  <span class="token keyword">const</span> depositHandle <span class="token operator">=</span> <span class="token keyword">await</span> deployer<span class="token punctuation">.</span>zkWallet<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    to<span class="token operator">:</span> deployer<span class="token punctuation">.</span>zkWallet<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
    token<span class="token operator">:</span> utils<span class="token punctuation">.</span><span class="token constant">ETH_ADDRESS</span><span class="token punctuation">,</span>
    amount<span class="token operator">:</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">parseEther</span><span class="token punctuation">(</span><span class="token constant">AMOUNT</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Deposit transaction sent </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>depositHandle<span class="token punctuation">.</span>hash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Waiting for deposit to be processed in L2...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Wait until the deposit is processed on zkSync</span>
  <span class="token keyword">await</span> depositHandle<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ETH available in L2</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>要存入ERC20代币，你可以使用相同的方法，但要额外传递 approveERC20: true 选项。</p><div class="language-tsx line-numbers-mode" data-ext="tsx"><pre class="language-tsx"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Wallet<span class="token punctuation">,</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ethers <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HardhatRuntimeEnvironment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;hardhat/types&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Deployer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@matterlabs/hardhat-zksync-deploy&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// load env file</span>
<span class="token keyword">import</span> dotenv <span class="token keyword">from</span> <span class="token string">&quot;dotenv&quot;</span><span class="token punctuation">;</span>
dotenv<span class="token punctuation">.</span><span class="token function">config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// HTTPS RPC endpoint</span>
<span class="token keyword">const</span> <span class="token constant">MAINNET_RPC_ENDPOINT</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Token address</span>
<span class="token keyword">const</span> <span class="token constant">TOKEN_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Amount of tokens </span>
<span class="token keyword">const</span> <span class="token constant">AMOUNT</span> <span class="token operator">=</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">WALLET_PRIV_KEY</span> <span class="token operator">=</span> process<span class="token punctuation">.</span>env<span class="token punctuation">.</span><span class="token constant">WALLET_PRIV_KEY</span> <span class="token operator">||</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token constant">WALLET_PRIV_KEY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;Wallet private key not configured in env file&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>hre<span class="token operator">:</span> HardhatRuntimeEnvironment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Running script to bridge ERC20 to L2</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Initialize the wallet.</span>
  <span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span>
    <span class="token comment">// @ts-ignore</span>
    <span class="token constant">MAINNET_RPC_ENDPOINT</span> <span class="token operator">||</span> hre<span class="token punctuation">.</span>config<span class="token punctuation">.</span>networks<span class="token punctuation">.</span>zkSyncTestnet<span class="token punctuation">.</span>ethNetwork
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
    
  <span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token constant">WALLET_PRIV_KEY</span><span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Create deployer object </span>
  <span class="token keyword">const</span> deployer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Deployer</span><span class="token punctuation">(</span>hre<span class="token punctuation">,</span> wallet<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Deposit ERC20 tokens to L2</span>
  <span class="token keyword">const</span> depositHandle <span class="token operator">=</span> <span class="token keyword">await</span> deployer<span class="token punctuation">.</span>zkWallet<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    to<span class="token operator">:</span> deployer<span class="token punctuation">.</span>zkWallet<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
    token<span class="token operator">:</span> <span class="token constant">TOKEN_ADDRESS</span><span class="token punctuation">,</span>
    amount<span class="token operator">:</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">parseEther</span><span class="token punctuation">(</span><span class="token constant">AMOUNT</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// assumes ERC20 has 18 decimals</span>
    <span class="token comment">// performs the ERC20 approve</span>
    approveERC20<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Deposit transaction sent </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>depositHandle<span class="token punctuation">.</span>hash<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Waiting for deposit to be processed in L2...</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Wait until the deposit is processed on zkSync</span>
  <span class="token keyword">await</span> depositHandle<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ERC20 tokens available in L2</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,5),h=s("code",null,"hardhat.config.ts",-1),b={href:"https://era.zksync.io/docs/dev/building-on-zksync/hello-world.html",target:"_blank",rel:"noopener noreferrer"},y=s("code",null,"npx zksync-cli@latest create PROJECT_NAME",-1),g=e(`<p>将脚本文件放在<code>deploy</code>文件夹中并运行。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code> <span class="token function">yarn</span> hardhat zksync-deploy <span class="token parameter variable">--script</span> SCRIPT_FILENAME.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="自定义桥接" tabindex="-1"><a class="header-anchor" href="#自定义桥接" aria-hidden="true">#</a> 自定义桥接</h3><p>已注册的地址可以通过建立自定义桥接器将令牌与zkSync自由连接。我们的用户界面目前不支持自定义桥接。然而，如果你正在开发一个自定义桥，我们很乐意听到你的意见，并讨论我们如何提供支持。你可以在 product@matterlabs.dev 找到我们。</p><h2 id="如何部署" tabindex="-1"><a class="header-anchor" href="#如何部署" aria-hidden="true">#</a> 如何部署</h2>`,5),f={href:"https://era.zksync.io/docs/dev/building-on-zksync/contracts/contract-deployment.html",target:"_blank",rel:"noopener noreferrer"},w={href:"https://era.zksync.io/docs/dev/building-on-zksync/hello-world.html",target:"_blank",rel:"noopener noreferrer"},_=e(`<p>要把你的合同部署到mainnet，你需要把它包含在你的<code>hardhat.config.ts</code>文件的<code>networks</code>部分。</p><div class="language-jsx line-numbers-mode" data-ext="jsx"><pre class="language-jsx"><code><span class="token literal-property property">networks</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">hardhat</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">zksync</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">zkSyncTestnet</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">ethNetwork</span><span class="token operator">:</span> <span class="token string">&quot;goerli&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">zksync</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">zkSyncMainnet</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> <span class="token string">&quot;https://zksync2-mainnet.zksync.io&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">ethNetwork</span><span class="token operator">:</span> <span class="token string">&quot;mainnet&quot;</span><span class="token punctuation">,</span>
      <span class="token literal-property property">zksync</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，确保你的配置文件导入了<code>@matterlabs/hardhat-zksync-deploy</code>和<code>@matterlabs/hardhat-zksync-solc</code>插件，并且它们被正确配置了。</p><p>一旦添加，确保你的部署脚本使用<code>@matterlabs/hardhat-zksync-deploy</code>包中的<code>Deployer</code>类。用<code>--network</code>标志运行你的部署脚本（例如：<code>yarn hardhat deploy-zksync --script deploy-greeter.ts --network zkSyncMainnet</code> 。</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>请确保您在遵循上述说明之前已经在zkSync上存入资金。</p></div>`,5),E={href:"https://v2-docs.zksync.io/dev/developer-guides/hello-world.html",target:"_blank",rel:"noopener noreferrer"},z={href:"https://v2-docs.zksync.io/api/hardhat/migrating-to-zksync.html",target:"_blank",rel:"noopener noreferrer"},q=e('<h2 id="zksync-era主网细节" tabindex="-1"><a class="header-anchor" href="#zksync-era主网细节" aria-hidden="true">#</a> zkSync Era主网细节</h2><p>你可以使用下面的详细信息将zkSync主网添加到你的钱包。</p><ul><li>网络名称。 `zkSync Era Mainnet&#39;.</li><li>新的RPC URL: <code>https://zksync2-mainnet.zksync.io </code></li><li>链ID: <code>324 </code></li><li>货币符号: <code>ETH </code></li><li>区块资源管理器 URL: <code>https://explorer.zksync.io/</code></li><li>WebSocket URL: <code>wss://zksync2-mainnet.zksync.io/ws</code>。</li></ul><h2 id="如何加入" tabindex="-1"><a class="header-anchor" href="#如何加入" aria-hidden="true">#</a> 如何加入</h2>',4),T={href:"https://forms.gle/wXjWiEeg16eMCWKJ8",target:"_blank",rel:"noopener noreferrer"},L=e('<ul><li>你的项目名称和描述</li><li>你在zkSync Era Testnet上的合同地址</li><li>你将用于桥接的L1地址</li><li>你打算在公平入职期间桥接的任何代币的清单。</li></ul><h2 id="安全措施" tabindex="-1"><a class="header-anchor" href="#安全措施" aria-hidden="true">#</a> 安全措施</h2><p>我们已经花费了超过350万美元，与一级审计公司、独立研究人员和社区的公共审计进行了一系列的审计。物质实验室还将在系统中锁定价值--在Fair Onboarding Alpha开始时以10ETH为起点。为了增加进一步的保护，将采取以下安全措施。</p><h3 id="提款和存款限额" tabindex="-1"><a class="header-anchor" href="#提款和存款限额" aria-hidden="true">#</a> 提款和存款限额</h3><ul><li><p><strong>存款限额</strong>。作为一般的安全预防措施（并使Fair Onboarding的重点放在部署和测试上），每个注册地址总共可以存入<strong>10 ETH</strong>。我们建议最多只能桥接**3个ETH。**这对于部署合约和执行测试交易来说应该是绰绰有余。当公平入驻结束后，这一限制将被取消。</p></li><li><p><strong>提现限制</strong>。每天最多只能提取协议中ETH总余额的10%。此功能的目的是在攻击者发现允许在L2上未经授权铸造代币的漏洞时，限制可以提取到L1的价值量。这个功能将一直保持到系统达到足够的成熟度。</p></li></ul><h3 id="冻结" tabindex="-1"><a class="header-anchor" href="#冻结" aria-hidden="true">#</a> 冻结</h3><p>为了保证我们用户的安全，Matter Labs有能力在紧急情况下冻结（并立即升级）系统。当系统被冻结时，L1或L2上的任何活动都是不可能的：交易将不被处理，我们的API服务将被关闭。</p><p>冻结系统使Matter Labs能够解决安全漏洞，而不会对用户资产造成持续风险。这个功能将在Fair Onboarding Alpha之后继续存在，并将随着我们逐步去中心化而被移除。</p><p>**注意:**自动执行的功能（如抵押品清算）在系统冻结时将不工作。</p><h2 id="常见问题" tabindex="-1"><a class="header-anchor" href="#常见问题" aria-hidden="true">#</a> 常见问题</h2><h3 id="什么时候开始公平上岗alpha" tabindex="-1"><a class="header-anchor" href="#什么时候开始公平上岗alpha" aria-hidden="true">#</a> 什么时候开始公平上岗Alpha？</h3><p>2月16日。</p><h3 id="我如何注册" tabindex="-1"><a class="header-anchor" href="#我如何注册" aria-hidden="true">#</a> 我如何注册？</h3>',13),x={href:"https://docs.google.com/forms/d/e/1FAIpQLSfdXAoQiHLu16ykEoOb762uvC1bAhdzOG-YDk6ju0YwPWf3Fw/viewform",target:"_blank",rel:"noopener noreferrer"},R=s("h3",{id:"我如何将erc20代币添加到门户用户界面",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#我如何将erc20代币添加到门户用户界面","aria-hidden":"true"},"#"),n(" 我如何将ERC20代币添加到门户用户界面？")],-1),A={href:"https://5p68rkvrcqg.typeform.com/to/NbYpe2pw",target:"_blank",rel:"noopener noreferrer"},N=e('<h3 id="公平入职将持续多长时间" tabindex="-1"><a class="header-anchor" href="#公平入职将持续多长时间" aria-hidden="true">#</a> 公平入职将持续多长时间？</h3><p>我们希望Fair Onboarding能持续4至6周。</p><h3 id="我的项目已被批准-我如何部署" tabindex="-1"><a class="header-anchor" href="#我的项目已被批准-我如何部署" aria-hidden="true">#</a> 我的项目已被批准，我如何部署？</h3><p>请确保你完成上述说明，将ETH存入zkSync。然后进入<a href="#how-to-eploy">我们的部署指南</a>来启动你的合同。</p><h3 id="我的项目需要一个官方版本的erc20-稳定币-但它似乎没有被部署。我应该怎么做" tabindex="-1"><a class="header-anchor" href="#我的项目需要一个官方版本的erc20-稳定币-但它似乎没有被部署。我应该怎么做" aria-hidden="true">#</a> 我的项目需要一个官方版本的ERC20/稳定币，但它似乎没有被部署。我应该怎么做？</h3><p>我们正在与合作伙伴/稳定币供应商合作，在zkSync上提供本地集成和官方部署。</p>',6);function S(P,W){const a=l("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[n("Fair Onboarding Alpha邀请项目在全面公开发布之前部署到主网。要注册你的项目参与，请填写表格"),s("a",u,[n("这里。"),t(a)])]),d,s("p",null,[n("你也可以通过Matter Labs提供的用户界面"),s("a",k,[n("portal.zksync.io"),t(a)]),n("来桥接ETH或代币。如果你想桥接的代币在Portal的下拉菜单中没有，你可以要求我们添加它"),s("a",v,[n("这里"),t(a)]),n("。")]),m,s("p",null,[n("要运行这个脚本，确保你的"),h,n("文件是为zkSync配置的（"),s("a",b,[n("在这里找到一个例子"),t(a)]),n("。你可以使用"),y,n("来轻松搭建一个新项目，以防你还没有一个项目。")]),g,s("p",null,[n("如果你需要一个关于部署到zkSync的一般复习，我们建议首先阅读我们的文档的"),s("a",f,[n("本节"),t(a)]),n(" - 否则你可以参考我们的"),s("a",w,[n("快速入门指南"),t(a)]),n("。")]),_,s("p",null,[n("你可以在"),s("a",E,[n("快速入门指南"),t(a)]),n("中找到配置文件和部署脚本的例子。如果你有一个现有的项目，你可以按照"),s("a",z,[n("Hardhat zkSync迁移指南"),t(a)]),n("。")]),q,s("p",null,[n("要为公平入职注册你的项目，请填写链接的表格"),s("a",T,[n("这里"),t(a)]),n("。你将需要以下信息。")]),L,s("p",null,[n("你可以通过填写"),s("a",x,[n("此表"),t(a)]),n("来报名参加Fair Onboarding Alpha。我们将在一周内给你答复。")]),R,s("p",null,[n("你可以通过填写"),s("a",A,[n("此表格"),t(a)]),n("来申请额外的代币。在你提交表格后，如果有任何问题，我们会主动联系你。一般来说，我们的目标是在一个星期内满足这些请求。")]),N])}const C=p(i,[["render",S],["__file","fair-onboarding-alpha.html.vue"]]);export{C as default};
