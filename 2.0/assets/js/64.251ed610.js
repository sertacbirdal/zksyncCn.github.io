(window.webpackJsonp=window.webpackJsonp||[]).push([[64],{479:function(t,a,e){"use strict";e.r(a);var s=e(32),n=Object(s.a)({},(function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h1",{attrs:{id:"migration-to-the-testnet-paymaster"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#migration-to-the-testnet-paymaster"}},[t._v("#")]),t._v(" Migration to the testnet paymaster")]),t._v(" "),e("h2",{attrs:{id:"prerequisite"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#prerequisite"}},[t._v("#")]),t._v(" Prerequisite")]),t._v(" "),e("p",[t._v("Before going further into this section, please ensure you have read about\n"),e("RouterLink",{attrs:{to:"/dev/developer-guides/aa.html#paymasters"}},[t._v("paymasters")]),t._v(".")],1),t._v(" "),e("p",[t._v("While the previous iterations of zkSync 2.0 testnet natively supported paying fees in different tokens, it caused several compatibility issues with the Ethereum ecosystem. With the advent of the "),e("RouterLink",{attrs:{to:"/dev/developer-guides/aa.html#paymasters"}},[t._v("paymasters")]),t._v(", this feature has become redundant as now anybody can deploy their paymaster smart contract that will swap ERC-20 tokens to ETH on the fly. You can read the tutorial on deploying custom paymasters "),e("RouterLink",{attrs:{to:"/dev/tutorials/custom-paymaster-tutorial.html"}},[t._v("here")]),t._v(".")],1),t._v(" "),e("p",[t._v("For the sake of supporting the ecosystem, zkSync does not plan to deploy any paymaster on mainnet. However, with better DevEx in mind, we have deployed one on the testnet. The testnet paymaster enables paying fees in an ERC-20 compatible token at a 1:1 exchange rate. You can read the documentation "),e("RouterLink",{attrs:{to:"/dev/developer-guides/aa.html#testnet-paymaster"}},[t._v("here")]),t._v(". In this section, we show a brief example on migration from the old way of paying fees with ERC20 tokens to the new ones.")],1),t._v(" "),e("p",[t._v("This document is about the testnet paymaster "),e("em",[t._v("only")]),t._v(". When deploying your project on mainnet, you will need to either deploy your paymaster or find a 3rd party's one and read its documentation.")]),t._v(" "),e("h2",{attrs:{id:"previous-interface"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#previous-interface"}},[t._v("#")]),t._v(" Previous interface")]),t._v(" "),e("p",[t._v("In the previous testnet versions, you provided "),e("code",[t._v("feeToken")]),t._v(" in the overrides of the transaction, so a smart contract call that paid fees in USDC, for example, looked roughly like this:")]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tx "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" contract"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("callMethod")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("customData")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("feeToken")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("USDC_ADDRESS")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n")])])]),e("h2",{attrs:{id:"using-testnet-paymaster"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#using-testnet-paymaster"}},[t._v("#")]),t._v(" Using testnet paymaster")]),t._v(" "),e("p",[t._v("Working with the testnet paymaster consists of three steps:")]),t._v(" "),e("ol",[e("li",[t._v("Retrieving the address of the testnet paymaster.")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" testnetPaymaster "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" provider"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getTestnetPaymasterAddress")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("p",[t._v("Note: Caching the paymaster's address is not recommended, since it may change without a warning.")]),t._v(" "),e("ol",{attrs:{start:"2"}},[e("li",[t._v("Encoding the paymaster parameters to be used in the transaction. For this you can the "),e("code",[t._v("utils.getPaymasterParams")]),t._v(" method:")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" utils "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'zksync-web3'")]),t._v("\n\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" paymasterParams "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" utils"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("getPaymasterParams")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("testnetPaymaster"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("type")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[t._v("'ApprovalBased'")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("token")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token constant"}},[t._v("USDC_ADDRESS")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Note, that the allowance for the testnet paymaster must be")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// at least maxFeePerErg * gasLimit, where maxFeePerErg and gasLimit")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// are parameters used in the transaction.")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("minimalAllowance")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" maxFeePerErg"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("mul")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("gasLimit"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("innerInput")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Uint8Array")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),e("ol",{attrs:{start:"3"}},[e("li",[t._v("Sending the transaction with the provided paymaster params:")])]),t._v(" "),e("div",{staticClass:"language-js extra-class"},[e("pre",{pre:!0,attrs:{class:"language-js"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tx "),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" contract"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[t._v("callMethod")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),e("span",{pre:!0,attrs:{class:"token literal-property property"}},[t._v("customData")]),e("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        paymasterParams\n    "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=n.exports}}]);