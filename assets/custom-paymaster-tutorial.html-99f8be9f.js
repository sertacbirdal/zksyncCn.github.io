import{_ as i,W as l,X as u,Z as s,$ as n,a0 as a,a2 as e,Y as p,D as c}from"./framework-674379d2.js";const r={},d=p('<h1 id="构建自定义的paymaster" tabindex="-1"><a class="header-anchor" href="#构建自定义的paymaster" aria-hidden="true">#</a> 构建自定义的paymaster</h1><p>让我们看看如何使用paymaster功能来建立一个自定义的paymaster，让用户在我们的token中支付费用。在本教程中，我们将。</p><ul><li>创建一个paymaster，它将假设一个单位的ERC20代币足以支付任何交易费用。</li><li>创建ERC20代币合约并发送一些代币到一个全新的钱包。</li><li>最后我们将从新创建的钱包通过paymaster发送一个<code>mint</code>交易。尽管该交易通常需要一些ETH来支付汽油费，但我们的paymaster将执行该交易，以换取1单位的ERC20代币。</li></ul><h2 id="先决条件" tabindex="-1"><a class="header-anchor" href="#先决条件" aria-hidden="true">#</a> 先决条件</h2>',4),k=p(`<h2 id="安装依赖项" tabindex="-1"><a class="header-anchor" href="#安装依赖项" aria-hidden="true">#</a> 安装依赖项</h2><p>我们将使用zkSync硬帽插件来开发这个合约。首先，我们应该为它安装所有的依赖项。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mkdir custom-paymaster-tutorial
cd custom-paymaster-tutorial
yarn init -y
yarn add -D typescript ts-node ethers@^5.7.2 zksync-web3@^0.13.1 hardhat @matterlabs/hardhat-zksync-solc @matterlabs/hardhat-zksync-deploy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>当前版本的<code>zksync-web3</code>使用<code>ethers v5.7.x</code>作为同行依赖。与<code>ethers v6.x.x</code>兼容的更新将很快发布。</p></div><p>由于我们正在使用zkSync合同，我们还需要安装带有合同及其对等依赖的软件包。</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">yarn</span> <span class="token function">add</span> @matterlabs/zksync-contracts @openzeppelin/contracts @openzeppelin/contracts-upgradeable
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,6),m=s("code",null,"hardhat.config.ts",-1),v=s("code",null,"contracts",-1),b=s("code",null,"deploy",-1),y={class:"hint-container tip"},h=s("p",{class:"hint-container-title"},"Tips",-1),w=p(`<h2 id="设计" tabindex="-1"><a class="header-anchor" href="#设计" aria-hidden="true">#</a> 设计</h2><p>我们的协议将是一个假协议，允许任何人交换某个ERC20代币，以换取支付交易费用。</p><p>paymaster的框架看起来是这样的。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&quot;@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>IPaymaster<span class="token punctuation">,</span> ExecutionResult<span class="token punctuation">,</span> PAYMASTER_VALIDATION_SUCCESS_MAGIC<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymaster.sol&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>IPaymasterFlow<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymasterFlow.sol&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>TransactionHelper<span class="token punctuation">,</span> Transaction<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@matterlabs/zksync-contracts/l2/system-contracts/libraries/TransactionHelper.sol&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&quot;@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">MyPaymaster</span> <span class="token keyword">is</span> IPaymaster <span class="token punctuation">{</span>
    <span class="token builtin">uint256</span> <span class="token keyword">constant</span> PRICE_FOR_PAYING_FEES <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token builtin">address</span> <span class="token keyword">public</span> allowedToken<span class="token punctuation">;</span>

    <span class="token keyword">modifier</span> <span class="token function">onlyBootloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> BOOTLOADER_FORMAL_ADDRESS<span class="token punctuation">,</span> <span class="token string">&quot;Only bootloader can call this method&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Continue execution if called from the bootloader.</span>
        <span class="token keyword">_</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _erc20<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        allowedToken <span class="token operator">=</span> _erc20<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">validateAndPayForPaymasterTransaction</span><span class="token punctuation">(</span>
        <span class="token builtin">bytes32</span><span class="token punctuation">,</span>
        <span class="token builtin">bytes32</span><span class="token punctuation">,</span>
        Transaction <span class="token keyword">calldata</span> _transaction
    <span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes4</span> magic<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// TO BE IMPLEMENTED</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">postTransaction</span><span class="token punctuation">(</span>
        <span class="token builtin">bytes</span> <span class="token keyword">calldata</span> _context<span class="token punctuation">,</span>
        Transaction <span class="token keyword">calldata</span> _transaction<span class="token punctuation">,</span>
        <span class="token builtin">bytes32</span><span class="token punctuation">,</span>
        <span class="token builtin">bytes32</span><span class="token punctuation">,</span>
        ExecutionResult _txResult<span class="token punctuation">,</span>
        <span class="token builtin">uint256</span> _maxRefundedGas
    <span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> override <span class="token punctuation">{</span>
        <span class="token comment">// Refunds are not supported yet.</span>
    <span class="token punctuation">}</span>

    <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,4),g=s("code",null,"validateAndPayForPaymasterTransaction",-1),f=s("code",null,"postOp",-1),_=s("code",null,"onlyBootloader",-1),E=s("h3",{id:"解析paymaster的输入",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#解析paymaster的输入","aria-hidden":"true"},"#"),n(" 解析paymaster的输入")],-1),q=s("p",null,[n("在本教程中，我们想向用户收取一个单位的"),s("code",null,"allowedToken"),n("以换取交易费用，这将由paymaster合同支付。")],-1),A=s("code",null,"paymasterInput",-1),R=p(`<p>首先，我们需要检查 &quot;paymasterInput &quot;是否像 &quot;approvalBased &quot;流程中那样被编码，并且 &quot;paymasterInput &quot;中发送的代币是支付者接受的。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code>magic <span class="token operator">=</span> PAYMASTER_VALIDATION_SUCCESS_MAGIC<span class="token punctuation">;</span>

<span class="token keyword">require</span><span class="token punctuation">(</span>
    _transaction<span class="token punctuation">.</span>paymasterInput<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">4</span><span class="token punctuation">,</span>
    <span class="token string">&quot;The standard paymaster input must be at least 4 bytes long&quot;</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">bytes4</span> paymasterInputSelector <span class="token operator">=</span> <span class="token builtin">bytes4</span><span class="token punctuation">(</span>_transaction<span class="token punctuation">.</span>paymasterInput<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>paymasterInputSelector <span class="token operator">==</span> IPaymasterFlow<span class="token punctuation">.</span>approvalBased<span class="token punctuation">.</span>selector<span class="token punctuation">)</span>  <span class="token punctuation">{</span>
    <span class="token punctuation">(</span><span class="token builtin">address</span> token<span class="token punctuation">,</span> <span class="token builtin">uint256</span> minAllowance<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> data<span class="token punctuation">)</span> <span class="token operator">=</span> abi<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>_transaction<span class="token punctuation">.</span>paymasterInput<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">,</span> <span class="token builtin">uint256</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// We verify that the user has provided enough allowance</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>token <span class="token operator">==</span> allowedToken<span class="token punctuation">,</span> <span class="token string">&quot;Invalid token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//</span>
    <span class="token comment">// ...</span>
    <span class="token comment">//</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token string">&quot;Unsupported paymaster flow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后，我们需要检查用户是否确实提供了足够的津贴。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// We verify that the user has provided enough allowance</span>
<span class="token builtin">address</span> userAddress <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token builtin">uint160</span><span class="token punctuation">(</span>_transaction<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">address</span> thisAddress <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">uint256</span> providedAllowance <span class="token operator">=</span> <span class="token function">IERC20</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allowance</span><span class="token punctuation">(</span>
    userAddress<span class="token punctuation">,</span>
    thisAddress
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">require</span><span class="token punctuation">(</span>providedAllowance <span class="token operator">&gt;=</span> PRICE_FOR_PAYING_FEES<span class="token punctuation">,</span> <span class="token string">&quot;Min allowance too low&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后，我们将检查交易费用是多少，将ERC20代币转移到paymaster，并将相应的气体费用从paymaster转移到bootloader以支付交易费用。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// Note, that while the minimal amount of ETH needed is tx.gasPrice * tx.gasLimit,</span>
<span class="token comment">// neither paymaster nor account are allowed to access this context variable.</span>
<span class="token builtin">uint256</span> requiredETH <span class="token operator">=</span> _transaction<span class="token punctuation">.</span>gasLimit <span class="token operator">*</span>
    _transaction<span class="token punctuation">.</span>maxFeePerGas<span class="token punctuation">;</span>


try
    <span class="token function">IERC20</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>userAddress<span class="token punctuation">,</span> thisAddress<span class="token punctuation">,</span> amount<span class="token punctuation">)</span>
<span class="token punctuation">{</span><span class="token punctuation">}</span> catch <span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">memory</span> revertReason<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// If the revert reason is empty or represented by just a function selector,</span>
    <span class="token comment">// we replace the error with a more user-friendly message</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>revertReason<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to transferFrom from users&#39; account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">assembly</span> <span class="token punctuation">{</span>
            <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> revertReason<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mload</span><span class="token punctuation">(</span>revertReason<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token comment">// Transfer fees to the bootloader</span>
<span class="token punctuation">(</span><span class="token builtin">bool</span> success<span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">payable</span><span class="token punctuation">(</span>BOOTLOADER_FORMAL_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">.</span>call<span class="token punctuation">{</span>
    value<span class="token punctuation">:</span> requiredETH
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">require</span><span class="token punctuation">(</span>success<span class="token punctuation">,</span> <span class="token string">&quot;Failed to transfer funds to the bootloader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6),T={class:"hint-container tip"},x=s("p",{class:"hint-container-title"},"你应该首先验证所有的要求",-1),P=s("p",null,[n("这就是为什么在执行任何逻辑之前，必须验证用户是否为交易提供了所有允许的前提条件_。这就是我们_首先_检查用户是否提供了足够的许可，然后才进行"),s("code",null,"transferFrom"),n("的原因。")],-1),I=p(`<h3 id="paymaster的完整代码" tabindex="-1"><a class="header-anchor" href="#paymaster的完整代码" aria-hidden="true">#</a> paymaster的完整代码</h3><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: MIT</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&quot;@openzeppelin/contracts/token/ERC20/IERC20.sol&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token punctuation">{</span>IPaymaster<span class="token punctuation">,</span> ExecutionResult<span class="token punctuation">,</span> PAYMASTER_VALIDATION_SUCCESS_MAGIC<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymaster.sol&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>IPaymasterFlow<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@matterlabs/zksync-contracts/l2/system-contracts/interfaces/IPaymasterFlow.sol&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span>TransactionHelper<span class="token punctuation">,</span> Transaction<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@matterlabs/zksync-contracts/l2/system-contracts/libraries/TransactionHelper.sol&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&quot;@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">MyPaymaster</span> <span class="token keyword">is</span> IPaymaster <span class="token punctuation">{</span>
    <span class="token builtin">uint256</span> <span class="token keyword">constant</span> PRICE_FOR_PAYING_FEES <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token builtin">address</span> <span class="token keyword">public</span> allowedToken<span class="token punctuation">;</span>

    <span class="token keyword">modifier</span> <span class="token function">onlyBootloader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>
            msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> BOOTLOADER_FORMAL_ADDRESS<span class="token punctuation">,</span>
            <span class="token string">&quot;Only bootloader can call this method&quot;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Continue execution if called from the bootloader.</span>
        <span class="token keyword">_</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> _erc20<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        allowedToken <span class="token operator">=</span> _erc20<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">validateAndPayForPaymasterTransaction</span><span class="token punctuation">(</span>
        <span class="token builtin">bytes32</span><span class="token punctuation">,</span>
        <span class="token builtin">bytes32</span><span class="token punctuation">,</span>
        Transaction <span class="token keyword">calldata</span> _transaction
    <span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bytes4</span> magic<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// By default we consider the transaction as accepted.</span>
        magic <span class="token operator">=</span> PAYMASTER_VALIDATION_SUCCESS_MAGIC<span class="token punctuation">;</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>
            _transaction<span class="token punctuation">.</span>paymasterInput<span class="token punctuation">.</span>length <span class="token operator">&gt;=</span> <span class="token number">4</span><span class="token punctuation">,</span>
            <span class="token string">&quot;The standard paymaster input must be at least 4 bytes long&quot;</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token builtin">bytes4</span> paymasterInputSelector <span class="token operator">=</span> <span class="token builtin">bytes4</span><span class="token punctuation">(</span>
            _transaction<span class="token punctuation">.</span>paymasterInput<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>paymasterInputSelector <span class="token operator">==</span> IPaymasterFlow<span class="token punctuation">.</span>approvalBased<span class="token punctuation">.</span>selector<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// While the transaction data consists of address, uint256 and bytes data,</span>
            <span class="token comment">// the data is not needed for this paymaster</span>
            <span class="token punctuation">(</span><span class="token builtin">address</span> token<span class="token punctuation">,</span> <span class="token builtin">uint256</span> amount<span class="token punctuation">,</span> <span class="token builtin">bytes</span> <span class="token keyword">memory</span> data<span class="token punctuation">)</span> <span class="token operator">=</span> abi<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>
                _transaction<span class="token punctuation">.</span>paymasterInput<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
                <span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">,</span> <span class="token builtin">uint256</span><span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Verify if token is the correct one</span>
            <span class="token keyword">require</span><span class="token punctuation">(</span>token <span class="token operator">==</span> allowedToken<span class="token punctuation">,</span> <span class="token string">&quot;Invalid token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// We verify that the user has provided enough allowance</span>
            <span class="token builtin">address</span> userAddress <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token builtin">uint160</span><span class="token punctuation">(</span>_transaction<span class="token punctuation">.</span><span class="token keyword">from</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token builtin">address</span> thisAddress <span class="token operator">=</span> <span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token builtin">uint256</span> providedAllowance <span class="token operator">=</span> <span class="token function">IERC20</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">allowance</span><span class="token punctuation">(</span>
                userAddress<span class="token punctuation">,</span>
                thisAddress
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">require</span><span class="token punctuation">(</span>
                providedAllowance <span class="token operator">&gt;=</span> PRICE_FOR_PAYING_FEES<span class="token punctuation">,</span>
                <span class="token string">&quot;Min allowance too low&quot;</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">// Note, that while the minimal amount of ETH needed is tx.gasPrice * tx.gasLimit,</span>
            <span class="token comment">// neither paymaster nor account are allowed to access this context variable.</span>
            <span class="token builtin">uint256</span> requiredETH <span class="token operator">=</span> _transaction<span class="token punctuation">.</span>gasLimit <span class="token operator">*</span>
                _transaction<span class="token punctuation">.</span>maxFeePerGas<span class="token punctuation">;</span>

            try
                <span class="token function">IERC20</span><span class="token punctuation">(</span>token<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transferFrom</span><span class="token punctuation">(</span>userAddress<span class="token punctuation">,</span> thisAddress<span class="token punctuation">,</span> amount<span class="token punctuation">)</span>
            <span class="token punctuation">{</span><span class="token punctuation">}</span> catch <span class="token punctuation">(</span><span class="token builtin">bytes</span> <span class="token keyword">memory</span> revertReason<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// If the revert reason is empty or represented by just a function selector,</span>
                <span class="token comment">// we replace the error with a more user-friendly message</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>revertReason<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token string">&quot;Failed to transferFrom from users&#39; account&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token keyword">assembly</span> <span class="token punctuation">{</span>
                        <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">,</span> revertReason<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">mload</span><span class="token punctuation">(</span>revertReason<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>

            <span class="token comment">// The bootloader never returns any data, so it can safely be ignored here.</span>
            <span class="token punctuation">(</span><span class="token builtin">bool</span> success<span class="token punctuation">,</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">payable</span><span class="token punctuation">(</span>BOOTLOADER_FORMAL_ADDRESS<span class="token punctuation">)</span><span class="token punctuation">.</span>call<span class="token punctuation">{</span>
                value<span class="token punctuation">:</span> requiredETH
            <span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token string">&quot;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">require</span><span class="token punctuation">(</span>success<span class="token punctuation">,</span> <span class="token string">&quot;Failed to transfer funds to the bootloader&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">revert</span><span class="token punctuation">(</span><span class="token string">&quot;Unsupported paymaster flow&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">postTransaction</span><span class="token punctuation">(</span>
        <span class="token builtin">bytes</span> <span class="token keyword">calldata</span> _context<span class="token punctuation">,</span>
        Transaction <span class="token keyword">calldata</span> _transaction<span class="token punctuation">,</span>
        <span class="token builtin">bytes32</span><span class="token punctuation">,</span>
        <span class="token builtin">bytes32</span><span class="token punctuation">,</span>
        ExecutionResult _txResult<span class="token punctuation">,</span>
        <span class="token builtin">uint256</span> _maxRefundedGas
    <span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> override <span class="token punctuation">{</span>
        <span class="token comment">// Refunds are not supported yet.</span>
    <span class="token punctuation">}</span>

    <span class="token function">receive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>


</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="部署一个erc20合约" tabindex="-1"><a class="header-anchor" href="#部署一个erc20合约" aria-hidden="true">#</a> 部署一个ERC20合约</h2><p>为了测试我们的支付系统，我们需要一个ERC20代币，所以我们要部署一个。为了简单起见，我们将使用一个稍加修改的OpenZeppelin实现它。</p><p>创建 &quot;MyERC20.sol &quot;文件，并将以下代码放入其中。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">// SPDX-License-Identifier: UNLICENSED</span>

<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&quot;@openzeppelin/contracts/token/ERC20/ERC20.sol&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">MyERC20</span> <span class="token keyword">is</span> ERC20 <span class="token punctuation">{</span>
    <span class="token builtin">uint8</span> <span class="token keyword">private</span> _decimals<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span>
        <span class="token builtin">string</span> <span class="token keyword">memory</span> name_<span class="token punctuation">,</span>
        <span class="token builtin">string</span> <span class="token keyword">memory</span> symbol_<span class="token punctuation">,</span>
        <span class="token builtin">uint8</span> decimals_
    <span class="token punctuation">)</span> <span class="token function">ERC20</span><span class="token punctuation">(</span>name_<span class="token punctuation">,</span> symbol_<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        _decimals <span class="token operator">=</span> decimals_<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">mint</span><span class="token punctuation">(</span><span class="token builtin">address</span> _to<span class="token punctuation">,</span> <span class="token builtin">uint256</span> _amount<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">_mint</span><span class="token punctuation">(</span>_to<span class="token punctuation">,</span> _amount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">decimals</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> override <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">uint8</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _decimals<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="部署支付系统" tabindex="-1"><a class="header-anchor" href="#部署支付系统" aria-hidden="true">#</a> 部署支付系统</h2><p>为了部署ERC20代币和paymaster，我们需要创建一个部署脚本。创建<code>deploy</code>文件夹并在那里创建一个文件。<code>deploy-paymaster.ts</code>。把下面的部署脚本放在那里。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> utils<span class="token punctuation">,</span> Wallet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ethers <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HardhatRuntimeEnvironment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;hardhat/types&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Deployer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@matterlabs/hardhat-zksync-deploy&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>hre<span class="token operator">:</span> HardhatRuntimeEnvironment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// The wallet that will deploy the token and the paymaster</span>
  <span class="token comment">// It is assumed that this wallet already has sufficient funds on zkSync</span>
  <span class="token comment">// ⚠️ Never commit private keys to file tracking history, or your account could be compromised.</span>
  <span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;PRIVATE-KEY&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// The wallet that will receive ERC20 tokens</span>
  <span class="token keyword">const</span> emptyWallet <span class="token operator">=</span> Wallet<span class="token punctuation">.</span><span class="token function">createRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Empty wallet&#39;s address: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>emptyWallet<span class="token punctuation">.</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Empty wallet&#39;s private key: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>emptyWallet<span class="token punctuation">.</span>privateKey<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> deployer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Deployer</span><span class="token punctuation">(</span>hre<span class="token punctuation">,</span> wallet<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Deploying the ERC20 token</span>
  <span class="token keyword">const</span> erc20Artifact <span class="token operator">=</span> <span class="token keyword">await</span> deployer<span class="token punctuation">.</span><span class="token function">loadArtifact</span><span class="token punctuation">(</span><span class="token string">&quot;MyERC20&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> erc20 <span class="token operator">=</span> <span class="token keyword">await</span> deployer<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>erc20Artifact<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">&quot;MyToken&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;MyToken&quot;</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">ERC20 address: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>erc20<span class="token punctuation">.</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Deploying the paymaster</span>
  <span class="token keyword">const</span> paymasterArtifact <span class="token operator">=</span> <span class="token keyword">await</span> deployer<span class="token punctuation">.</span><span class="token function">loadArtifact</span><span class="token punctuation">(</span><span class="token string">&quot;MyPaymaster&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> paymaster <span class="token operator">=</span> <span class="token keyword">await</span> deployer<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>paymasterArtifact<span class="token punctuation">,</span> <span class="token punctuation">[</span>erc20<span class="token punctuation">.</span>address<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Paymaster address: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>paymaster<span class="token punctuation">.</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Supplying paymaster with ETH</span>
  <span class="token keyword">await</span> <span class="token punctuation">(</span>
    <span class="token keyword">await</span> deployer<span class="token punctuation">.</span>zkWallet<span class="token punctuation">.</span><span class="token function">sendTransaction</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
      to<span class="token operator">:</span> paymaster<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
      value<span class="token operator">:</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">parseEther</span><span class="token punctuation">(</span><span class="token string">&quot;0.03&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Supplying the ERC20 tokens to the empty wallet:</span>
  <span class="token keyword">await</span> <span class="token comment">// We will give the empty wallet 3 units of the token:</span>
  <span class="token punctuation">(</span><span class="token keyword">await</span> erc20<span class="token punctuation">.</span><span class="token function">mint</span><span class="token punctuation">(</span>emptyWallet<span class="token punctuation">.</span>address<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Minted 3 tokens for the empty wallet&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Done!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>除了部署paymaster，它还创建了一个空钱包，并将一些\`MyERC20&#39;代币开采到其中，以便以后可以使用paymaster。</p><p>为了部署ERC20代币和paymaster，你应该编译合同并运行该脚本。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn hardhat compile
yarn hardhat deploy-zksync --script deploy-paymaster.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>输出结果应该大致如下。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Empty wallet&#39;s address: 0xAd155D3069BB3c587E995916B320444056d8191F
Empty wallet&#39;s private key: 0x236d735297617cc68f4ec8ceb40b351ca5be9fc585d446fa95dff02354ac04fb
ERC20 address: 0x65C899B5fb8Eb9ae4da51D67E1fc417c7CB7e964
Paymaster address: 0x0a67078A35745947A37A552174aFe724D8180c25
Minted 3 tokens for the empty wallet
Done!
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，每次运行的地址和私钥将是不同的。</p><h2 id="使用paymaster" tabindex="-1"><a class="header-anchor" href="#使用paymaster" aria-hidden="true">#</a> 使用paymaster</h2><p>在<code>deploy</code>文件夹中创建<code>use-paymaster.ts</code>脚本。你可以在下面的代码段中看到与paymaster交互的例子。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> utils<span class="token punctuation">,</span> Wallet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ethers <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HardhatRuntimeEnvironment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;hardhat/types&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Put the address of the deployed paymaster here</span>
<span class="token keyword">const</span> <span class="token constant">PAYMASTER_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;&lt;PAYMASTER_ADDRESS&gt;&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Put the address of the ERC20 token here:</span>
<span class="token keyword">const</span> <span class="token constant">TOKEN_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;&lt;TOKEN_ADDRESS&gt;&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Wallet private key</span>
<span class="token comment">// ⚠️ Never commit private keys to file tracking history, or your account could be compromised.</span>
<span class="token keyword">const</span> <span class="token constant">EMPTY_WALLET_PRIVATE_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;&lt;EMPTY_WALLET_PRIVATE_KEY&gt;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>hre<span class="token operator">:</span> HardhatRuntimeEnvironment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> emptyWallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token constant">EMPTY_WALLET_PRIVATE_KEY</span><span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Obviously this step is not required, but it is here purely to demonstrate that indeed the wallet has no ether.</span>
  <span class="token keyword">const</span> ethBalance <span class="token operator">=</span> <span class="token keyword">await</span> emptyWallet<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ethBalance<span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">&quot;The wallet is not empty&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Balance of the user before mint: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">await</span> emptyWallet<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span>
      <span class="token constant">TOKEN_ADDRESS</span>
    <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> erc20 <span class="token operator">=</span> <span class="token function">getToken</span><span class="token punctuation">(</span>hre<span class="token punctuation">,</span> emptyWallet<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> gasPrice <span class="token operator">=</span> <span class="token keyword">await</span> provider<span class="token punctuation">.</span><span class="token function">getGasPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Encoding the &quot;ApprovalBased&quot; paymaster flow&#39;s input</span>
  <span class="token keyword">const</span> paymasterParams <span class="token operator">=</span> utils<span class="token punctuation">.</span><span class="token function">getPaymasterParams</span><span class="token punctuation">(</span><span class="token constant">PAYMASTER_ADDRESS</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    type<span class="token operator">:</span> <span class="token string">&quot;ApprovalBased&quot;</span><span class="token punctuation">,</span>
    token<span class="token operator">:</span> <span class="token constant">TOKEN_ADDRESS</span><span class="token punctuation">,</span>
    <span class="token comment">// set minimalAllowance as we defined in the paymaster contract</span>
    minimalAllowance<span class="token operator">:</span> ethers<span class="token punctuation">.</span>BigNumber<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token comment">// empty bytes as testnet paymaster does not use innerInput</span>
    innerInput<span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Uint8Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Estimate gas fee for mint transaction</span>
  <span class="token keyword">const</span> gasLimit <span class="token operator">=</span> <span class="token keyword">await</span> erc20<span class="token punctuation">.</span>estimateGas<span class="token punctuation">.</span><span class="token function">mint</span><span class="token punctuation">(</span>emptyWallet<span class="token punctuation">.</span>address<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    customData<span class="token operator">:</span> <span class="token punctuation">{</span>
      gasPerPubdata<span class="token operator">:</span> utils<span class="token punctuation">.</span><span class="token constant">DEFAULT_GAS_PER_PUBDATA_LIMIT</span><span class="token punctuation">,</span>
      paymasterParams<span class="token operator">:</span> paymasterParams<span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> fee <span class="token operator">=</span> gasPrice<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span>gasLimit<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">await</span> <span class="token punctuation">(</span>
    <span class="token keyword">await</span> erc20<span class="token punctuation">.</span><span class="token function">mint</span><span class="token punctuation">(</span>emptyWallet<span class="token punctuation">.</span>address<span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token comment">// paymaster info</span>
      customData<span class="token operator">:</span> <span class="token punctuation">{</span>
        paymasterParams<span class="token operator">:</span> paymasterParams<span class="token punctuation">,</span>
        gasPerPubdata<span class="token operator">:</span> utils<span class="token punctuation">.</span><span class="token constant">DEFAULT_GAS_PER_PUBDATA_LIMIT</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>
    <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Balance of the user after mint: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token keyword">await</span> emptyWallet<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span>
      <span class="token constant">TOKEN_ADDRESS</span>
    <span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在填写完参数<code>PAYMASTER_ADDRESS&#39;、</code>TOKEN_ADDRESS&#39;和\`EMPTY_WALLET_PRIVATE_KEY&#39;与上一步提供的输出后。</p><div class="hint-container warning"><p class="hint-container-title">Note</p><p>重要的是! 确保你使用的是之前脚本所创建的钱包的私钥，因为该钱包包含ERC20代币</p></div><p>用以下命令运行这个脚本。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn hardhat deploy-zksync --script use-paymaster.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>输出结果应该大致如下。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Balance of the user before mint: 3
Balance of the user after mint: 102
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>运行部署脚本后，钱包里有3个代币，在向<code>mint</code>发送交易后，又有100个代币，余额为102，因为有1个代币被用来支付交易费用给支付者。</p><h2 id="常见错误" tabindex="-1"><a class="header-anchor" href="#常见错误" aria-hidden="true">#</a> 常见错误</h2><p>如果<code>use-paymaster.ts</code>脚本失败，出现错误<code>提交交易失败。验证交易失败。原因是。验证重启。Paymaster验证错误。向bootloader转移资金失败</code>，请尝试向paymaster发送额外的ETH，以便它有足够的资金来支付交易。你可以使用[zkSync Portal]（https://portal.zksync.io/）。</p>`,27),S=s("code",null,"use-paymaster.ts",-1),C=s("code",null,"错误：交易失败",-1),D={href:"https://explorer.zksync.io/",target:"_blank",rel:"noopener noreferrer"},z={href:"https://join.zksync.dev/",target:"_blank",rel:"noopener noreferrer"},L={href:"https://zksync.io/contact.html",target:"_blank",rel:"noopener noreferrer"},M=s("code",null,"gasLimit",-1),F=s("h2",{id:"完整的项目",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#完整的项目","aria-hidden":"true"},"#"),n(" 完整的项目")],-1),O={href:"https://github.com/matter-labs/custom-paymaster-tutorial",target:"_blank",rel:"noopener noreferrer"},B=s("h2",{id:"了解更多",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#了解更多","aria-hidden":"true"},"#"),n(" 了解更多")],-1),W=s("li",null,[n("要了解更多关于"),s("code",null,"zksync-web3"),n("SDK的信息，请查看其"),s("a",{href:"././api/js"},"文档"),n("。")],-1),N=s("li",null,[n("要了解更多关于zkSync hardhat插件的信息，请查看其"),s("a",{href:"../../api/hardhat"},"document"),n("。")],-1);function Y(H,G){const t=c("RouterLink"),o=c("ExternalLinkIcon");return l(),u("div",null,[d,s("p",null,[n("为了更好地理解这个页面，我们建议你在深入学习本教程之前先阅读一下"),a(t,{to:"/dev/tutorials/.../developer-guides/aa.html"},{default:e(()=>[n("账户抽象设计")]),_:1}),n("。")]),s("p",null,[n("假设你已经熟悉在zkSync上部署智能合约。如果没有，请参考[快速入门教程]（.../building-onzksync/hello-world.md）的第一节。还建议阅读"),a(t,{to:"/dev/tutorials/.../developer-guides/system-contracts.html"},{default:e(()=>[n("系统合同介绍")]),_:1}),n("。")]),k,s("p",null,[n("然后创建"),m,n("配置文件，"),v,n("和"),b,n("文件夹，就像"),a(t,{to:"/dev/tutorials/.../building-on-zksync/hello-world.html"},{default:e(()=>[n("快速入门教程")]),_:1}),n("中那样。")]),s("div",y,[h,s("p",null,[n("你可以使用zkSync CLI来自动构建一个项目的支架。查找"),a(t,{to:"/dev/tutorials/.../.../api/tools/zksync-cli/"},{default:e(()=>[n("关于zkSync CLI的更多信息")]),_:1})])]),w,s("p",null,[n("注意，只有"),a(t,{to:"/dev/tutorials/.../developer-guides/system-contracts.html#bootloader"},{default:e(()=>[n("bootloader")]),_:1}),n("才允许调用"),g,n("/"),f,n("方法。这就是为什么对它们使用"),_,n("修改器。")]),E,q,s("p",null,[n("付款人应该收到的输入被编码为"),A,n("。正如"),a(t,{to:"/dev/tutorials/.../developer-guides/aa.html#built-in-paymaster-flows"},{default:e(()=>[n("在paymaster文档中")]),_:1}),n('所述，有一些标准化的方法来编码用户与paymasterInput的互动。为了向用户收费，我们将要求她向paymaster合同提供足够的ERC20代币的津贴。这个津贴是在幕后的 "approvalBased "流程中完成的。')]),R,s("div",T,[x,s("p",null,[n("付费者节流的"),a(t,{to:"/dev/tutorials/.../developer-guides/aa.html#the-validation-step"},{default:e(()=>[n("规则")]),_:1}),n("说，如果第一个与API上的执行不同的存储读取值是属于用户的存储槽，那么付费者就不会被节流了。")]),P]),I,s("p",null,[n("如果"),S,n("脚本在铸造新的ERC20代币时失败，出现"),C,n("，并且交易在"),s("a",D,[n("zkSync explorer"),a(o)]),n('中出现状态 "失败"，请通过'),s("a",z,[n("我们的Discord"),a(o)]),n("或"),s("a",L,[n("联系页面"),a(o)]),n("与我们接触。作为一个解决方法，尝试在交易中包括一个特定的"),M,n("值。")]),F,s("p",null,[n("你可以下载完整的项目"),s("a",O,[n("这里"),a(o)]),n("。")]),B,s("ul",null,[s("li",null,[n("要了解更多关于zkSync上L1->L2的交互，请查看"),a(t,{to:"/dev/developer-guides/bridging/l1-l2.html"},{default:e(()=>[n("document")]),_:1}),n("。")]),W,N])])}const K=i(r,[["render",Y],["__file","custom-paymaster-tutorial.html.vue"]]);export{K as default};
