import{_ as i,W as l,X as u,Z as n,$ as s,a0 as a,a2 as e,Y as p,D as o}from"./framework-674379d2.js";const k={},r=n("h1",{id:"l2-l1通信",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#l2-l1通信","aria-hidden":"true"},"#"),s(" L2 -> L1通信")],-1),d=p('<p>::警告</p><p>请注意，在新的<code>0.13.0</code>SDK中，API层是用气体操作的。ergs的概念只被VM使用。</p><p>:::</p><h2 id="结构" tabindex="-1"><a class="header-anchor" href="#结构" aria-hidden="true">#</a> 结构</h2><p>与L1-&gt;L2通信不同，不可能直接将事务从L2初始化到L1。然而，你可以从zkSync向Ethereum发送一个任意长度的消息，然后在L1智能合约上处理收到的消息。要从L2端发送消息，你应该调用[信使系统合约]（.../system-contracts.md#L1Messenger）中的<code>sendToL1</code>方法。它只接受发送到Ethereum上的zkSync智能合约的消息的字节数。</p><p>从L1端来看，zkSync智能合约提供了<code>proveL2MessageInclusion</code>方法，以证明消息被发送到L1并包含在zkSync块中。</p><h2 id="从l2向l1发送消息" tabindex="-1"><a class="header-anchor" href="#从l2向l1发送消息" aria-hidden="true">#</a> 从L2向L1发送消息</h2>',7),v=n("code",null,"sendToL1",-1),m=n("div",{class:"language-text line-numbers-mode","data-ext":"text"},[n("pre",{class:"language-text"},[n("code",null,`function sendToL1(bytes memory _message) external returns (bytes32 messageHash);
`)]),n("div",{class:"line-numbers","aria-hidden":"true"},[n("div",{class:"line-number"})])],-1),b=n("ul",null,[n("li",null,[n("code",null,"_message"),s("是一个参数，包含信息的原始字节数")])],-1),g=n("p",null,"::tips",-1),y=n("p",null,"消息的发件人将由上下文决定。",-1),h=n("p",null,":::",-1),f=n("p",null,"这个函数从L2发送一个消息，并返回消息字节的keccak256哈希值。该消息的哈希值可以在以后用来证明该消息是在L1上发送的。它的使用是可选的，只是为了方便。",-1),w=p(`<h3 id="例子" tabindex="-1"><a class="header-anchor" href="#例子" aria-hidden="true">#</a> 例子</h3><h4 id="使用zksync-web3从l2向l1发送消息" tabindex="-1"><a class="header-anchor" href="#使用zksync-web3从l2向l1发送消息" aria-hidden="true">#</a> 使用<code>zksync-web3</code>从L2向L1发送消息</h4><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Wallet<span class="token punctuation">,</span> Provider<span class="token punctuation">,</span> Contract<span class="token punctuation">,</span> utils <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">TEST_PRIVATE_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;&lt;YOUR_PRIVATE_KEY&gt;&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> zkSyncProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token constant">TEST_PRIVATE_KEY</span><span class="token punctuation">,</span> zkSyncProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> messengerContract <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers</span><span class="token punctuation">.</span><span class="token function">Contract</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token constant">L1_MESSENGER_ADDRESS</span><span class="token punctuation">,</span> utils<span class="token punctuation">.</span><span class="token constant">L1_MESSENGER</span><span class="token punctuation">,</span> wallet<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Messenger contract address is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>messengerContract<span class="token punctuation">.</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> someString <span class="token operator">=</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">toUtf8Bytes</span><span class="token punctuation">(</span><span class="token string">&quot;Some L2-&gt;L1 message&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Sending message from L2 to L1</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> tx <span class="token operator">=</span> <span class="token keyword">await</span> messengerContract<span class="token punctuation">.</span><span class="token function">sendToL1</span><span class="token punctuation">(</span>someString<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;L2 trx hash is &quot;</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> receipt <span class="token operator">=</span> <span class="token keyword">await</span> tx<span class="token punctuation">.</span><span class="token function">waitFinalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Transaction included in block </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>receipt<span class="token punctuation">.</span>blockNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Get proof that the message was sent to L1</span>
  <span class="token keyword">const</span> msgProof <span class="token operator">=</span> <span class="token keyword">await</span> zkSyncProvider<span class="token punctuation">.</span><span class="token function">getMessageProof</span><span class="token punctuation">(</span>receipt<span class="token punctuation">.</span>blockNumber<span class="token punctuation">,</span> wallet<span class="token punctuation">.</span>address<span class="token punctuation">,</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">keccak256</span><span class="token punctuation">(</span>someString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Proof that message was sent to L1 :&gt;&gt; &quot;</span><span class="token punctuation">,</span> msgProof<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="l2中的智能合约-向l1发送了一条信息" tabindex="-1"><a class="header-anchor" href="#l2中的智能合约-向l1发送了一条信息" aria-hidden="true">#</a> L2中的智能合约，向L1发送了一条信息</h4><p>以下合约通过信使系统合约将其地址发送给L1。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">//SPDX-License-Identifier: Unlicense</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token comment">// Importing interfaces and addresses of the system contracts</span>
<span class="token keyword">import</span> <span class="token string">&quot;@matterlabs/zksync-contracts/l2/system-contracts/Constants.sol&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
    <span class="token keyword">function</span> <span class="token function">sendMessageToL1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">returns</span><span class="token punctuation">(</span><span class="token builtin">bytes32</span> messageHash<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Construct the message directly on the contract</span>
        <span class="token builtin">bytes</span> <span class="token keyword">memory</span> message <span class="token operator">=</span> abi<span class="token punctuation">.</span><span class="token function">encode</span><span class="token punctuation">(</span><span class="token builtin">address</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        messageHash <span class="token operator">=</span> L1_MESSENGER_CONTRACT<span class="token punctuation">.</span><span class="token function">sendToL1</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="证明消息被纳入l2块中" tabindex="-1"><a class="header-anchor" href="#证明消息被纳入l2块中" aria-hidden="true">#</a> 证明消息被纳入L2块中</h2><p>从L1端来看，zkSync智能合约提供了一个接口来证明消息被发送到L1并包含在zkSync块中。</p>`,8),L={href:"https://github.com/matter-labs/v2-testnet-contracts/blob/main/l1/contracts/zksync/facets/Mailbox.sol",target:"_blank",rel:"noopener noreferrer"},_=n("code",null,"proveL2MessageInclusion",-1),x=p(`<div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code>
    <span class="token keyword">struct</span> <span class="token class-name">L2Message</span> <span class="token punctuation">{</span>
        <span class="token builtin">address</span> sender<span class="token punctuation">;</span>
        <span class="token builtin">bytes</span> data<span class="token punctuation">;</span>
        <span class="token builtin">uint256</span> txNumberInblock<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">proveL2MessageInclusion</span><span class="token punctuation">(</span>
        <span class="token builtin">uint256</span> _blockNumber<span class="token punctuation">,</span>
        <span class="token builtin">uint256</span> _index<span class="token punctuation">,</span>
        L2Message <span class="token keyword">calldata</span> _message<span class="token punctuation">,</span>
        <span class="token builtin">bytes32</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">calldata</span> _proof
    <span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>下面是对所需参数的详细描述。</p><ul><li><code>_blockNumber</code>是L1批号，其中包括L2块。它可以用<code>getBlock</code>方法来检索。</li><li><code>_index</code>是该块中L2日志的索引。它由<code>zksync-web3</code>API的<code>getMessageProof</code>方法作为<code>id</code>返回。</li><li><code>_message</code>是一个参数，包含发送消息的全部信息。它应该是一个包含以下内容的对象。 <ul><li><code>sender</code>: 从L2发送消息的地址。</li><li><code>data</code>: 发送的消息的字节数。</li><li><code>txNumberInBlock</code>：L2块中交易的索引，使用<code>getTransaction</code>返回<code>transactionIndex</code>。</li></ul></li><li><code>_proof</code>是一个参数，包含消息包含的Merkle证明。它可以从观察Ethereum或从<code>zksync-web3</code>API的<code>getMessageProof</code>方法接收。</li></ul><p>提示 重要</p><p>请注意，在证明L1的包含性之前，你的交易的L2块必须被验证（因此交易被最终确定）。</p><p>:::</p><h3 id="例子-1" tabindex="-1"><a class="header-anchor" href="#例子-1" aria-hidden="true">#</a> 例子</h3><h4 id="l1信息处理合约" tabindex="-1"><a class="header-anchor" href="#l1信息处理合约" aria-hidden="true">#</a> L1信息处理合约</h4><p>下面的合约接收发送到L2信使合约的交易信息，并证明它被包含在L2块中。</p><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">//SPDX-License-Identifier: Unlicense</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token comment">// Importing zkSync contract interface</span>
<span class="token keyword">import</span> <span class="token string">&quot;@matterlabs/zksync-contracts/l1/contracts/zksync/interfaces/IZkSync.sol&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Example</span> <span class="token punctuation">{</span>
  <span class="token comment">// NOTE: The zkSync contract implements only the functionality for proving that a message belongs to a block</span>
  <span class="token comment">// but does not guarantee that such a proof was used only once. That&#39;s why a contract that uses L2 -&gt; L1</span>
  <span class="token comment">// communication must take care of the double handling of the message.</span>
  <span class="token comment">/// @dev mapping L2 block number =&gt; message number =&gt; flag</span>
  <span class="token comment">/// @dev Used to indicated that zkSync L2 -&gt; L1 message was already processed</span>
  <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> <span class="token operator">=&gt;</span> <span class="token keyword">mapping</span><span class="token punctuation">(</span><span class="token builtin">uint256</span> <span class="token operator">=&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">)</span><span class="token punctuation">)</span> isL2ToL1MessageProcessed<span class="token punctuation">;</span>

  <span class="token keyword">function</span> <span class="token function">consumeMessageFromL2</span><span class="token punctuation">(</span>
    <span class="token comment">// The address of the zkSync smart contract.</span>
    <span class="token comment">// It is not recommended to hardcode it during the alpha testnet as regenesis may happen.</span>
    <span class="token builtin">address</span> _zkSyncAddress<span class="token punctuation">,</span>
    <span class="token comment">// zkSync block number in which the message was sent</span>
    <span class="token builtin">uint256</span> _l2BlockNumber<span class="token punctuation">,</span>
    <span class="token comment">// Message index, that can be received via API</span>
    <span class="token builtin">uint256</span> _index<span class="token punctuation">,</span>
    <span class="token comment">// The tx number in block</span>
    <span class="token builtin">uint16</span> _l2TxNumberInBlock<span class="token punctuation">,</span>
    <span class="token comment">// The message that was sent from l2</span>
    <span class="token builtin">bytes</span> <span class="token keyword">calldata</span> _message<span class="token punctuation">,</span>
    <span class="token comment">// Merkle proof for the message</span>
    <span class="token builtin">bytes32</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">calldata</span> _proof
  <span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token punctuation">{</span>
    <span class="token comment">// check that the message has not been processed yet</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token operator">!</span>isL2ToL1MessageProcessed<span class="token punctuation">[</span>_l2BlockNumber<span class="token punctuation">]</span><span class="token punctuation">[</span>_index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    IZkSync zksync <span class="token operator">=</span> <span class="token function">IZkSync</span><span class="token punctuation">(</span>_zkSyncAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token builtin">address</span> someSender <span class="token operator">=</span> <span class="token number">0x19A5bFCBE15f98Aa073B9F81b58466521479DF8D</span><span class="token punctuation">;</span>
    L2Message <span class="token keyword">memory</span> message <span class="token operator">=</span> <span class="token function">L2Message</span><span class="token punctuation">(</span><span class="token punctuation">{</span>sender<span class="token punctuation">:</span> someSender<span class="token punctuation">,</span> data<span class="token punctuation">:</span> _message<span class="token punctuation">,</span> txNumberInBlock<span class="token punctuation">:</span>_l2TxNumberInBlock<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token builtin">bool</span> success <span class="token operator">=</span> zksync<span class="token punctuation">.</span><span class="token function">proveL2MessageInclusion</span><span class="token punctuation">(</span>
      _l2BlockNumber<span class="token punctuation">,</span>
      _index<span class="token punctuation">,</span>
      message<span class="token punctuation">,</span>
      _proof
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">require</span><span class="token punctuation">(</span>success<span class="token punctuation">,</span> <span class="token string">&quot;Failed to prove message inclusion&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// Mark message as processed</span>
    isL2ToL1MessageProcessed<span class="token punctuation">[</span>_l2BlockNumber<span class="token punctuation">]</span><span class="token punctuation">[</span>_index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="l2到l1" tabindex="-1"><a class="header-anchor" href="#l2到l1" aria-hidden="true">#</a> L2到L1</h4><p>下面的脚本从L2向L1发送一个消息，检索消息证明，并验证在L1收到的消息是否来自L2区块。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ethers <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> utils<span class="token punctuation">,</span> Wallet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">TEST_PRIVATE_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;&lt;YOUR_PRIVATE_KEY&gt;&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">MESSAGE</span> <span class="token operator">=</span> <span class="token string">&quot;Some L2-&gt;L1 message&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> l2Provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> l1Provider <span class="token operator">=</span> ethers<span class="token punctuation">.</span><span class="token function">getDefaultProvider</span><span class="token punctuation">(</span><span class="token string">&quot;goerli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token constant">TEST_PRIVATE_KEY</span><span class="token punctuation">,</span> l2Provider<span class="token punctuation">,</span> l1Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">sendMessageToL1</span><span class="token punctuation">(</span>text<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Sending message to L1 with text </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>text<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> textBytes <span class="token operator">=</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">toUtf8Bytes</span><span class="token punctuation">(</span><span class="token constant">MESSAGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> messengerContract <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers</span><span class="token punctuation">.</span><span class="token function">Contract</span><span class="token punctuation">(</span>utils<span class="token punctuation">.</span><span class="token constant">L1_MESSENGER_ADDRESS</span><span class="token punctuation">,</span> utils<span class="token punctuation">.</span><span class="token constant">L1_MESSENGER</span><span class="token punctuation">,</span> wallet<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> tx <span class="token operator">=</span> <span class="token keyword">await</span> messengerContract<span class="token punctuation">.</span><span class="token function">sendToL1</span><span class="token punctuation">(</span>textBytes<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> tx<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;L2 trx hash is &quot;</span><span class="token punctuation">,</span> tx<span class="token punctuation">.</span>hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> tx<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">getL2MessageProof</span><span class="token punctuation">(</span>blockNumber<span class="token operator">:</span> ethers<span class="token punctuation">.</span>BigNumberish<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Getting L2 message proof for block </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>blockNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token keyword">await</span> l2Provider<span class="token punctuation">.</span><span class="token function">getMessageProof</span><span class="token punctuation">(</span>blockNumber<span class="token punctuation">,</span> wallet<span class="token punctuation">.</span>address<span class="token punctuation">,</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">keccak256</span><span class="token punctuation">(</span>ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">toUtf8Bytes</span><span class="token punctuation">(</span><span class="token constant">MESSAGE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">proveL2MessageInclusion</span><span class="token punctuation">(</span>l1BatchNumber<span class="token operator">:</span> ethers<span class="token punctuation">.</span>BigNumberish<span class="token punctuation">,</span> proof<span class="token operator">:</span> <span class="token builtin">any</span><span class="token punctuation">,</span> trxIndex<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> zkAddress <span class="token operator">=</span> <span class="token keyword">await</span> l2Provider<span class="token punctuation">.</span><span class="token function">getMainContractAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> mailboxL1Contract <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers</span><span class="token punctuation">.</span><span class="token function">Contract</span><span class="token punctuation">(</span>zkAddress<span class="token punctuation">,</span> utils<span class="token punctuation">.</span><span class="token constant">ZKSYNC_MAIN_ABI</span><span class="token punctuation">,</span> l1Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// all the information of the message sent from L2</span>
  <span class="token keyword">const</span> messageInfo <span class="token operator">=</span> <span class="token punctuation">{</span>
    txNumberInBlock<span class="token operator">:</span> trxIndex<span class="token punctuation">,</span>
    sender<span class="token operator">:</span> wallet<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
    data<span class="token operator">:</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">toUtf8Bytes</span><span class="token punctuation">(</span><span class="token constant">MESSAGE</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Retrieving proof for batch </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>l1BatchNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, transaction index </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>trxIndex<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and proof id </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>proof<span class="token punctuation">.</span>id<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> res <span class="token operator">=</span> <span class="token keyword">await</span> mailboxL1Contract<span class="token punctuation">.</span><span class="token function">proveL2MessageInclusion</span><span class="token punctuation">(</span>l1BatchNumber<span class="token punctuation">,</span> proof<span class="token punctuation">.</span>id<span class="token punctuation">,</span> messageInfo<span class="token punctuation">,</span> proof<span class="token punctuation">.</span>proof<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">return</span> res<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Full end-to-end of an L2-L1 messaging with proof validation.
 * Recommended to run in 3 steps:
 * 1. Send message.
 * 2. Wait for transaction to finalize and block verified
 * 3. Wait for block to be verified and validate proof
 */</span>
<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Step 1: send message</span>
  <span class="token keyword">const</span> l2Trx <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">sendMessageToL1</span><span class="token punctuation">(</span><span class="token constant">MESSAGE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Waiting for transaction to finalize...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Step 2: waiting to finalize can take a few minutes.</span>
  <span class="token keyword">const</span> l2Receipt <span class="token operator">=</span> <span class="token keyword">await</span> l2Trx<span class="token punctuation">.</span><span class="token function">waitFinalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Step 3: get and validate proof (block must be verified)</span>
  <span class="token keyword">const</span> proof <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getL2MessageProof</span><span class="token punctuation">(</span>l2Receipt<span class="token punctuation">.</span>blockNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Proof is: </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span> proof<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> <span class="token punctuation">{</span> l1BatchNumber<span class="token punctuation">,</span> l1BatchTxIndex <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> l2Provider<span class="token punctuation">.</span><span class="token function">getTransactionReceipt</span><span class="token punctuation">(</span>l2Receipt<span class="token punctuation">.</span>transactionHash<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;L1 Index for Tx in block :&gt;&gt; &quot;</span><span class="token punctuation">,</span> l1BatchTxIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;L1 Batch for block :&gt;&gt; &quot;</span><span class="token punctuation">,</span> l1BatchNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// IMPORTANT: This method requires that the block is verified</span>
  <span class="token comment">// and sent to L1!</span>
  <span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">proveL2MessageInclusion</span><span class="token punctuation">(</span>
    l1BatchNumber<span class="token punctuation">,</span>
    proof<span class="token punctuation">,</span>
    <span class="token comment">// @ts-ignore</span>
    l1BatchTxIndex
  <span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;Result is :&gt;&gt; &quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,13);function S(E,M){const t=o("RouterLink"),c=o("ExternalLinkIcon");return l(),u("div",null,[r,n("p",null,[s("本节描述了从L2与Ethereum互动的接口。它假定你已经熟悉了与L2->L1通信工作的基本概念。如果你是这个话题的新手，你可以阅读概念性介绍"),a(t,{to:"/dev/developer-guides/bridging/l1-l2-interop.html"},{default:e(()=>[s("这里")]),_:1}),s("。")]),d,n("p",null,[s("从L2端发送消息需要用户调用"),a(t,{to:"/dev/developer-guides/bridging/.../system-contracts.html#L1Messenger"},{default:e(()=>[s("Messenger系统合同")]),_:1}),s("中的"),v,s("方法。这个方法只接受被发送到L1上的zkSync智能合约的消息的字节数。")]),m,b,g,y,h,f,n("p",null,[s("关于Messenger的更多信息可以在"),a(t,{to:"/dev/developer-guides/bridging/.../system-contracts.html#L1Messenger"},{default:e(()=>[s("系统合同部分")]),_:1}),s("找到。")]),w,n("p",null,[s("来自"),n("a",L,[s("邮箱L1合约"),a(c)]),s("的"),_,s("函数，返回一个布尔值，表明带有此类参数的消息，被发送到了L1。")]),x])}const I=i(k,[["render",S],["__file","l2-l1.html.vue"]]);export{I as default};
