import{_ as p,W as o,X as c,Z as s,$ as n,a0 as t,Y as e,D as l}from"./framework-674379d2.js";const i={},r=e('<h1 id="处理事件" tabindex="-1"><a class="header-anchor" href="#处理事件" aria-hidden="true">#</a> 处理事件</h1><h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>事件是一种向区块链外的听众发布信息的机制，因为智能合约本身不能阅读它们。</p><p>区块链在设计上是公开的，因此向公众提供了所有的信息，任何行动都可以通过仔细研究交易来发现。事件是使外部系统容易获得特定信息的捷径；它们让dApps跟踪，并对智能合约发生的事情做出反应。它们也可以被搜索到，因为它们是可索引的。因此，当你的智能合约中发生了一些区块链以外的系统应该知道的事情时，你应该发射一个事件，以便外部系统可以监听此类事件的发生。 事件被包含在包含原始交易的同一区块的交易日志中。</p><p>在zkSync，事件的行为与Ethereum中相同。</p><h2 id="事件过滤" tabindex="-1"><a class="header-anchor" href="#事件过滤" aria-hidden="true">#</a> 事件过滤</h2><p>过滤用于查询索引数据，并在不需要在链上访问数据时提供低成本的数据存储。 在过滤时，你应该按区块范围（0-1999，2000-3999，......）加载事件，并在你的终端对结果进行索引。否则你会得到一个错误，说 &quot;块范围应小于或等于2000&quot;。</p>',7),u={href:"https://docs.ethers.io/v5/api/providers/provider/#Provider--event-methods",target:"_blank",rel:"noopener noreferrer"},k={href:"https://docs.ethers.io/v5/api/contract/contract/#Contract--events",target:"_blank",rel:"noopener noreferrer"},d=e(`<h2 id="获取事件" tabindex="-1"><a class="header-anchor" href="#获取事件" aria-hidden="true">#</a> 获取事件</h2><p>下面是一个监听智能合约事件的例子。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ethers <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> contractABI <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;./ABI_JSON&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">listenEvents</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> contractAddress <span class="token operator">=</span> <span class="token string">&quot;&lt;CONTRACT_ADDRESS&gt;&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ether<span class="token punctuation">.</span>providers<span class="token punctuation">.</span>WebSocketProvider</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">wss://zksync2-testnet.zksync.dev/ws</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> contract <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers<span class="token punctuation">.</span>Contract</span><span class="token punctuation">(</span>contractAddress<span class="token punctuation">,</span> contractABI<span class="token punctuation">,</span> provider<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">//开始监听合同上的传输事件</span>
  contract<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&quot;Transfer&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token comment">// 可选的过滤参数</span>
    <span class="token keyword">let</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">filter</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token constant">INDEXED_PARAMETER</span><span class="token operator">:</span> <span class="token constant">VALUE</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token comment">// e.g { from: &#39;0x48c6c0923b514db081782271355e5745c49wd60&#39; }</span>
      <span class="token literal-property property">fromBlock</span><span class="token operator">:</span> <span class="token constant">START_BLOCK_NUMBER</span><span class="token punctuation">,</span> <span class="token comment">// e.g 15943000</span>
      <span class="token literal-property property">toBlock</span><span class="token operator">:</span> <span class="token constant">END_BLOCK_NUMBER</span><span class="token punctuation">,</span> <span class="token comment">// e.g：15943100</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> event<span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>。
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token function">listenEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Provider:你的websocket提供者，你将通过它检索事件数据。注意，你需要使用websocket端点。</li><li>Contract address: 你想跟踪其事件的合同地址。</li><li>ABI: JSON格式的合同ABI（应用二进制接口）。</li><li>Event name：智能合约中定义的事件名称。在这个例子中，我们使用了ERC20合约的 &quot;转移 &quot;事件。</li><li>Indexed parameter：事件的索引参数。</li><li>Block number。检索事件的区块号码范围，它包括<code>START_BLOCK_NUMBER</code>和<code>END_BLOCK_NUMBER</code>。</li></ul><p><strong>注意</strong>：zkSync对每个响应有10K的日志限制。这意味着，如果你收到一个有10K事件的响应，它很可能包含额外的事件，所以调整过滤器以分批检索事件是一个好主意。</p>`,5);function v(m,h){const a=l("ExternalLinkIcon");return o(),c("div",null,[r,s("p",null,[n("这些可以与"),s("a",u,[n("供应商事件API"),t(a)]),n("和"),s("a",k,[n("合同事件API"),t(a)]),n("一起使用。")]),d])}const _=p(i,[["render",v],["__file","events.html.vue"]]);export{_ as default};
