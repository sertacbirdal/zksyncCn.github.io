import{_ as c,W as i,X as l,Z as s,$ as n,a0 as t,a2 as r,Y as a,D as e}from"./framework-674379d2.js";const u={},d=a(`<h1 id="账户-概述" tabindex="-1"><a class="header-anchor" href="#账户-概述" aria-hidden="true">#</a> 账户：概述</h1><p><code>zksync-web3</code>输出四个可以在zkSync上签署交易的类。</p><ul><li><code>Wallet</code>类是<code>ethers.Wallet</code>的扩展，具有额外的zkSync功能。</li><li><code>EIP712Signer</code>类，用于签署<code>EIP712</code><em>类型</em>的zkSync交易。</li><li><code>Signer</code>和<code>L1Signer</code>类，应该用于浏览器集成。</li></ul><h2 id="wallet" tabindex="-1"><a class="header-anchor" href="#wallet" aria-hidden="true">#</a> <code>Wallet</code>.</h2><h3 id="从一个私钥创建钱包" tabindex="-1"><a class="header-anchor" href="#从一个私钥创建钱包" aria-hidden="true">#</a> 从一个私钥创建钱包</h3><p>就像<code>ethers.Wallet</code>一样，<code>zksync-web3</code>的<code>Wallet</code>对象可以由Ethereum私钥创建。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>constructor <span class="token function">Wallet</span><span class="token punctuation">(</span>
  privateKey<span class="token operator">:</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>BytesLike <span class="token operator">|</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>SigningKey<span class="token punctuation">,</span>
  providerL2<span class="token operator">?</span><span class="token operator">:</span> Provider<span class="token punctuation">,</span>
  providerL1<span class="token operator">?</span><span class="token operator">:</span> ethers<span class="token punctuation">.</span>providers<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token operator">:</span> Wallet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="输入和输出" tabindex="-1"><a class="header-anchor" href="#输入和输出" aria-hidden="true">#</a> 输入和输出</h4><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>privateKey</td><td>以太坊账户的私钥。</td></tr><tr><td>providerL2?</td><td>一个zkSync节点提供者。需要与zkSync进行互动。</td></tr><tr><td>providerL1?</td><td>一个Ethereum节点提供者。需要与L1进行交互。</td></tr><tr><td>returns</td><td>新的 &quot;钱包 &quot;对象。</td></tr></tbody></table><blockquote><p>Example</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> zksync <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">PRIVATE_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;0xc8acb475bb76a4b8ee36ea4d0e516a755a17fad2e84427d5559b37b544d9ba5a&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> zkSyncProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zksync</span><span class="token punctuation">.</span><span class="token function">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ethereumProvider <span class="token operator">=</span> ethers<span class="token punctuation">.</span><span class="token function">getDefaultProvider</span><span class="token punctuation">(</span><span class="token string">&quot;goerli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zksync</span><span class="token punctuation">.</span><span class="token function">Wallet</span><span class="token punctuation">(</span><span class="token constant">PRIVATE_KEY</span><span class="token punctuation">,</span> zkSyncProvider<span class="token punctuation">,</span> ethereumProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建钱包实例的其他方法" tabindex="-1"><a class="header-anchor" href="#创建钱包实例的其他方法" aria-hidden="true">#</a> 创建<code>钱包</code>实例的其他方法</h3><p><code>Wallet</code>类支持<code>ethers.Wallet</code>中所有用于创建钱包的方法，例如，从助记符创建，从加密的JSON创建，创建一个随机钱包，等等。所有这些方法的参数与<code>ethers.Wallet</code>相同，所以你应该参考它的文档来了解如何使用它们。</p><h3 id="连接到zksync提供者" tabindex="-1"><a class="header-anchor" href="#连接到zksync提供者" aria-hidden="true">#</a> 连接到zkSync提供者</h3><p>为了与zkSync网络进行交互，<code>Wallet</code>对象应该连接到<code>Provider</code>，方法是将其传递给构造函数或使用<code>connect</code>方法。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>Wallet<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>provider<span class="token operator">:</span> Provider<span class="token punctuation">)</span><span class="token operator">:</span> Wallet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="输入和输出-1" tabindex="-1"><a class="header-anchor" href="#输入和输出-1" aria-hidden="true">#</a> 输入和输出</h4><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>provider</td><td>一个zkSync节点提供者。</td></tr><tr><td>returns</td><td>一个新的zkSync &quot;钱包 &quot;实例。</td></tr></tbody></table><blockquote><p>Example</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Wallet<span class="token punctuation">,</span> Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> unconnectedWallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token constant">PRIVATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> wallet <span class="token operator">=</span> unconnectedWallet<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="连接到ethereum提供者" tabindex="-1"><a class="header-anchor" href="#连接到ethereum提供者" aria-hidden="true">#</a> 连接到Ethereum提供者</h3><p>为了执行L1操作，<code>Wallet</code>对象需要连接到一个<code>ethers.providers.Provider</code>对象。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code>Wallet<span class="token punctuation">.</span><span class="token function">connectToL1</span><span class="token punctuation">(</span>provider<span class="token operator">:</span> ethers<span class="token punctuation">.</span>providers<span class="token punctuation">.</span>Provider<span class="token punctuation">)</span><span class="token operator">:</span> Wallet
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="inputs-and-outputs" tabindex="-1"><a class="header-anchor" href="#inputs-and-outputs" aria-hidden="true">#</a> Inputs and outputs</h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>provider</td><td>一个Ethereum节点提供者。</td></tr><tr><td>returns</td><td>一个新的zkSync &quot;钱包 &quot;实例，与L1 &quot;供应商 &quot;相连。</td></tr></tbody></table><blockquote><p>Example</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Wallet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> unconnectedWallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token constant">PRIVATE_KEY</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ethProvider <span class="token operator">=</span> ethers<span class="token punctuation">.</span><span class="token function">getDefaultProvider</span><span class="token punctuation">(</span><span class="token string">&quot;goerli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> wallet <span class="token operator">=</span> unconnectedWallet<span class="token punctuation">.</span><span class="token function">connectToL1</span><span class="token punctuation">(</span>ethProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以将 &quot;connect &quot;和 &quot;connectToL1 &quot;方法进行连锁。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> wallet <span class="token operator">=</span> unconnectedWallet<span class="token punctuation">.</span><span class="token function">connect</span><span class="token punctuation">(</span>provider<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">connectToL1</span><span class="token punctuation">(</span>ethProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="获取zksync-l1智能合约" tabindex="-1"><a class="header-anchor" href="#获取zksync-l1智能合约" aria-hidden="true">#</a> 获取zkSync L1智能合约</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">getMainContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>IZkSync<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="输入和输出-2" tabindex="-1"><a class="header-anchor" href="#输入和输出-2" aria-hidden="true">#</a> 输入和输出</h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>returns</td><td>zkSync智能合约的合约封装器。</td></tr></tbody></table><blockquote><p>Example</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> zksync <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">PRIVATE_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;0xc8acb475bb76a4b8ee36ea4d0e516a755a17fad2e84427d5559b37b544d9ba5a&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> zkSyncProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zksync</span><span class="token punctuation">.</span><span class="token function">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ethereumProvider <span class="token operator">=</span> ethers<span class="token punctuation">.</span><span class="token function">getDefaultProvider</span><span class="token punctuation">(</span><span class="token string">&quot;goerli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token constant">PRIVATE_KEY</span><span class="token punctuation">,</span> zkSyncProvider<span class="token punctuation">,</span> ethereumProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> contract <span class="token operator">=</span> <span class="token keyword">await</span> wallet<span class="token punctuation">.</span><span class="token function">getMainContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>contract<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获得代币余额" tabindex="-1"><a class="header-anchor" href="#获得代币余额" aria-hidden="true">#</a> 获得代币余额</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">getBalance</span><span class="token punctuation">(</span>token<span class="token operator">?</span><span class="token operator">:</span> Address<span class="token punctuation">,</span> blockTag<span class="token operator">:</span> BlockTag <span class="token operator">=</span> <span class="token string">&#39;committed&#39;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>BigNumber<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="inputs-and-outputs-1" tabindex="-1"><a class="header-anchor" href="#inputs-and-outputs-1" aria-hidden="true">#</a> Inputs and outputs</h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>token?</td><td>代币的地址。默认为ETH.</td></tr><tr><td>blockTag?</td><td>承诺，即最近处理的一个是默认选项。</td></tr><tr><td>returns</td><td>钱包拥有的代币的数量。</td></tr></tbody></table><blockquote><p>Example</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> zksync <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">PRIVATE_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;0xc8acb475bb76a4b8ee36ea4d0e516a755a17fad2e84427d5559b37b544d9ba5a&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> zkSyncProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zksync</span><span class="token punctuation">.</span><span class="token function">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ethereumProvider <span class="token operator">=</span> ethers<span class="token punctuation">.</span><span class="token function">getDefaultProvider</span><span class="token punctuation">(</span><span class="token string">&quot;goerli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token constant">PRIVATE_KEY</span><span class="token punctuation">,</span> zkSyncProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">USDC_L2_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;0x852a4599217e76aa725f0ada8bf832a1f57a8a91&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Getting balance in USDC</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> wallet<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token constant">USDC_L2_ADDRESS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Getting balance in ETH</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> wallet<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在l1上获得代币平衡" tabindex="-1"><a class="header-anchor" href="#在l1上获得代币平衡" aria-hidden="true">#</a> 在L1上获得代币平衡</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">getBalanceL1</span><span class="token punctuation">(</span>token<span class="token operator">?</span><span class="token operator">:</span> Address<span class="token punctuation">,</span> blockTag<span class="token operator">?</span><span class="token operator">:</span> ethers<span class="token punctuation">.</span>providers<span class="token punctuation">.</span>BlockTag<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>BigNumber<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="输入和输出-3" tabindex="-1"><a class="header-anchor" href="#输入和输出-3" aria-hidden="true">#</a> 输入和输出</h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>token?</td><td>代币的地址。默认为ETH。</td></tr><tr><td>blockTag?</td><td>余额应该被检查的区块。最近处理的那个是默认选项。</td></tr><tr><td>returns</td><td>钱包在以太坊上拥有的代币的数量。</td></tr></tbody></table><blockquote><p>Example</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> zksync <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">PRIVATE_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;0xc8acb475bb76a4b8ee36ea4d0e516a755a17fad2e84427d5559b37b544d9ba5a&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> zkSyncProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zksync</span><span class="token punctuation">.</span><span class="token function">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ethereumProvider <span class="token operator">=</span> ethers<span class="token punctuation">.</span><span class="token function">getDefaultProvider</span><span class="token punctuation">(</span><span class="token string">&quot;goerli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token constant">PRIVATE_KEY</span><span class="token punctuation">,</span> zkSyncProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">USDC_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;0xd35CCeEAD182dcee0F148EbaC9447DA2c4D449c4&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Getting balance in USDC</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> wallet<span class="token punctuation">.</span><span class="token function">getBalanceL1</span><span class="token punctuation">(</span><span class="token constant">USDC_ADDRESS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Getting balance in ETH</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> wallet<span class="token punctuation">.</span><span class="token function">getBalanceL1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获得一个nonce" tabindex="-1"><a class="header-anchor" href="#获得一个nonce" aria-hidden="true">#</a> 获得一个nonce</h3><p>Wallet &quot;还提供了 &quot;getNonce &quot;方法，它是<a href="">getTransactionCount</a>的一个别名。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">getNonce</span><span class="token punctuation">(</span>blockTag<span class="token operator">?</span><span class="token operator">:</span> BlockTag<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="inputs-and-outputs-2" tabindex="-1"><a class="header-anchor" href="#inputs-and-outputs-2" aria-hidden="true">#</a> Inputs and outputs</h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>blockTag?</td><td>承诺的，即最新处理的，是默认选项。</td></tr><tr><td>returns</td><td>账户的nonce号码。</td></tr></tbody></table><blockquote><p>Example</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> zksync <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">PRIVATE_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;0xc8acb475bb76a4b8ee36ea4d0e516a755a17fad2e84427d5559b37b544d9ba5a&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> zkSyncProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zksync</span><span class="token punctuation">.</span><span class="token function">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Note that we don&#39;t need ethereum provider to get the nonce</span>
<span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token constant">PRIVATE_KEY</span><span class="token punctuation">,</span> zkSyncProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> wallet<span class="token punctuation">.</span><span class="token function">getNonce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="在zksync内部传输令牌" tabindex="-1"><a class="header-anchor" href="#在zksync内部传输令牌" aria-hidden="true">#</a> 在zkSync内部传输令牌</h3><p>为了方便，&quot;钱包 &quot;类有 &quot;转移 &quot;方法，可以在同一界面内转移 &quot;ETH &quot;或任何 &quot;ERC20 &quot;令牌。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">transfer</span><span class="token punctuation">(</span>tx<span class="token operator">:</span> <span class="token punctuation">{</span>
    to<span class="token operator">:</span> Address<span class="token punctuation">;</span>
    amount<span class="token operator">:</span> BigNumberish<span class="token punctuation">;</span>
    token<span class="token operator">?</span><span class="token operator">:</span> Address<span class="token punctuation">;</span>
    overrides<span class="token operator">?</span><span class="token operator">:</span> ethers<span class="token punctuation">.</span>CallOverrides<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TransactionResponse<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="输入和输出-4" tabindex="-1"><a class="header-anchor" href="#输入和输出-4" aria-hidden="true">#</a> 输入和输出</h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>tx.to</td><td>The address of the recipient.</td></tr><tr><td>tx.amount</td><td>The amount of the token to transfer.</td></tr><tr><td>token?</td><td>The address of the token. <code>ETH</code> by default.</td></tr><tr><td>overrides?</td><td><strong>zkSync</strong> transaction overrides. May be used to pass l2 <code>gasLimit</code>, <code>gasPrice</code>, <code>value</code>, etc.</td></tr><tr><td>returns</td><td>A <code>TransactionResponse</code> object</td></tr></tbody></table><blockquote><p>Example</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> zksync <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">PRIVATE_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;0xc8acb475bb76a4b8ee36ea4d0e516a755a17fad2e84427d5559b37b544d9ba5a&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> zkSyncProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zksync</span><span class="token punctuation">.</span><span class="token function">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ethereumProvider <span class="token operator">=</span> ethers<span class="token punctuation">.</span><span class="token function">getDefaultProvider</span><span class="token punctuation">(</span><span class="token string">&quot;goerli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zksync</span><span class="token punctuation">.</span><span class="token function">Wallet</span><span class="token punctuation">(</span><span class="token constant">PRIVATE_KEY</span><span class="token punctuation">,</span> zkSyncProvider<span class="token punctuation">,</span> ethereumProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> recipient <span class="token operator">=</span> zksync<span class="token punctuation">.</span>Wallet<span class="token punctuation">.</span><span class="token function">createRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// We transfer 0.01 ETH to the recipient and pay the fee in USDC</span>
<span class="token keyword">const</span> transferHandle <span class="token operator">=</span> wallet<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  to<span class="token operator">:</span> recipient<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
  amount<span class="token operator">:</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">parseEther</span><span class="token punctuation">(</span><span class="token string">&quot;0.01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="initiating-a-withdrawal-to-l1" tabindex="-1"><a class="header-anchor" href="#initiating-a-withdrawal-to-l1" aria-hidden="true">#</a> Initiating a withdrawal to L1</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">withdraw</span><span class="token punctuation">(</span>transaction<span class="token operator">:</span> <span class="token punctuation">{</span>
    token<span class="token operator">:</span> Address<span class="token punctuation">;</span>
    amount<span class="token operator">:</span> BigNumberish<span class="token punctuation">;</span>
    to<span class="token operator">?</span><span class="token operator">:</span> Address<span class="token punctuation">;</span>
    bridgeAddress<span class="token operator">?</span><span class="token operator">:</span> Address<span class="token punctuation">;</span>
    overrides<span class="token operator">?</span><span class="token operator">:</span> ethers<span class="token punctuation">.</span>CallOverrides<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>TransactionResponse<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>tx.to</td><td>The address of the recipient on L1.</td></tr><tr><td>tx.amount</td><td>The amount of the token to transfer.</td></tr><tr><td>token?</td><td>The address of the token. <code>ETH</code> by default.</td></tr><tr><td>bridgeAddress?</td><td>The address of the bridge contract to be used.</td></tr><tr><td>overrides?</td><td><strong>zkSync</strong> transaction overrides. May be used to pass <code>gasLimit</code>, <code>gasPrice</code>, etc.</td></tr><tr><td>returns</td><td>A <code>TransactionResponse</code> object</td></tr></tbody></table><h3 id="retrieving-the-underlying-l1-wallet" tabindex="-1"><a class="header-anchor" href="#retrieving-the-underlying-l1-wallet" aria-hidden="true">#</a> Retrieving the underlying L1 wallet</h3><p>You can get an <code>ethers.Wallet</code> object with the same private key with <code>ethWallet()</code> method.</p><h4 id="inputs-and-outputs-3" tabindex="-1"><a class="header-anchor" href="#inputs-and-outputs-3" aria-hidden="true">#</a> Inputs and outputs</h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>returns</td><td>An <code>ethers.Wallet</code> object with the same private key.</td></tr></tbody></table><blockquote><p>Example</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> zksync <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">PRIVATE_KEY</span> <span class="token operator">=</span> <span class="token string">&quot;0xc8acb475bb76a4b8ee36ea4d0e516a755a17fad2e84427d5559b37b544d9ba5a&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> zkSyncProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zksync</span><span class="token punctuation">.</span><span class="token function">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> ethereumProvider <span class="token operator">=</span> ethers<span class="token punctuation">.</span><span class="token function">getDefaultProvider</span><span class="token punctuation">(</span><span class="token string">&quot;goerli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">zksync</span><span class="token punctuation">.</span><span class="token function">Wallet</span><span class="token punctuation">(</span><span class="token constant">PRIVATE_KEY</span><span class="token punctuation">,</span> zkSyncProvider<span class="token punctuation">,</span> ethereumProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> ethWallet <span class="token operator">=</span> wallet<span class="token punctuation">.</span><span class="token function">ethWallet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="eip712signer" tabindex="-1"><a class="header-anchor" href="#eip712signer" aria-hidden="true">#</a> <code>EIP712Signer</code></h2><p>The methods of this class are mostly used internally. The examples of using this class are coming soon!</p><h2 id="signer" tabindex="-1"><a class="header-anchor" href="#signer" aria-hidden="true">#</a> <code>Signer</code></h2><p>This class is to be used in a browser environment. The easiest way to construct it is to use the <code>getSigner</code> method of the <code>Web3Provider</code>. This structure extends <code>ethers.providers.JsonRpcSigner</code> and so supports all the methods available for it.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Web3Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web3Provider</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ethereum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> signer <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">getSigner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getting-token-balance" tabindex="-1"><a class="header-anchor" href="#getting-token-balance" aria-hidden="true">#</a> Getting token balance</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">getBalance</span><span class="token punctuation">(</span>token<span class="token operator">?</span><span class="token operator">:</span> Address<span class="token punctuation">,</span> blockTag<span class="token operator">:</span> BlockTag <span class="token operator">=</span> <span class="token string">&#39;committed&#39;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>BigNumber<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="inputs-and-outputs-4" tabindex="-1"><a class="header-anchor" href="#inputs-and-outputs-4" aria-hidden="true">#</a> Inputs and outputs</h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>token?</td><td>The address of the token. ETH by default.</td></tr><tr><td>blockTag?</td><td>The block the balance should be checked on. <code>committed</code>, i.e. the latest processed one is the default option.</td></tr><tr><td>returns</td><td>The amount of the token the <code>Signer</code> has.</td></tr></tbody></table><blockquote><p>Example</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Web3Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web3Provider</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ethereum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> signer <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">getSigner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">USDC_L2_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;0x852a4599217e76aa725f0ada8bf832a1f57a8a91&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// Getting balance in USDC</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> signer<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token constant">USDC_L2_ADDRESS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Getting balance in ETH</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> signer<span class="token punctuation">.</span><span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getting-a-nonce" tabindex="-1"><a class="header-anchor" href="#getting-a-nonce" aria-hidden="true">#</a> Getting a nonce</h3>`,82),k=s("code",null,"Wallet",-1),v=s("code",null,"getNonce",-1),b={href:"https://docs.ethers.io/v5/api/signer/#Signer-getTransactionCount",target:"_blank",rel:"noopener noreferrer"},h=a(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">getNonce</span><span class="token punctuation">(</span>blockTag<span class="token operator">?</span><span class="token operator">:</span> BlockTag<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="inputs-and-outputs-5" tabindex="-1"><a class="header-anchor" href="#inputs-and-outputs-5" aria-hidden="true">#</a> Inputs and outputs</h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>blockTag?</td><td>The block the nonce should be got on. <code>committed</code>, i.e. the latest processed one is the default option.</td></tr><tr><td>returns</td><td>The amount of the token the <code>Wallet</code> has.</td></tr></tbody></table><blockquote><p>Example</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Web3Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web3Provider</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ethereum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> signer <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">getSigner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> signer<span class="token punctuation">.</span><span class="token function">getNonce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="transferring-tokens-inside-zksync" tabindex="-1"><a class="header-anchor" href="#transferring-tokens-inside-zksync" aria-hidden="true">#</a> Transferring tokens inside zkSync</h3><p>Please note that for now, unlike Ethereum, zkSync does not support native transfers, i.e. the <code>value</code> field of all transactions is equal to <code>0</code>. All the token transfers are done through ERC20 <code>transfer</code> function calls.</p><p>But for convenience, the <code>Wallet</code> class has <code>transfer</code> method, which can transfer any <code>ERC20</code> tokens.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">transfer</span><span class="token punctuation">(</span>tx<span class="token operator">:</span> <span class="token punctuation">{</span>
    to<span class="token operator">:</span> Address<span class="token punctuation">;</span>
    amount<span class="token operator">:</span> BigNumberish<span class="token punctuation">;</span>
    token<span class="token operator">?</span><span class="token operator">:</span> Address<span class="token punctuation">;</span>
    overrides<span class="token operator">?</span><span class="token operator">:</span> ethers<span class="token punctuation">.</span>CallOverrides<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>ethers<span class="token punctuation">.</span>ContractTransaction<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="inputs-and-outputs-6" tabindex="-1"><a class="header-anchor" href="#inputs-and-outputs-6" aria-hidden="true">#</a> Inputs and outputs</h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>tx.to</td><td>The address of the recipient.</td></tr><tr><td>tx.amount</td><td>The amount of the token to transfer.</td></tr><tr><td>token?</td><td>The address of the token. <code>ETH</code> by default.</td></tr><tr><td>overrides?</td><td><strong>zkSync</strong> transaction overrides. May be used to pass L2 <code>gasLimit</code>, <code>gasPrice</code>, etc.</td></tr><tr><td>returns</td><td>An <code>ethers.ContractTransaction</code> object.</td></tr></tbody></table><blockquote><p>Example</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Wallet<span class="token punctuation">,</span> Web3Provider <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Web3Provider</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ethereum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> signer <span class="token operator">=</span> provider<span class="token punctuation">.</span><span class="token function">getSigner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> recipient <span class="token operator">=</span> Wallet<span class="token punctuation">.</span><span class="token function">createRandom</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// We transfer 0.01 ETH to the recipient and pay the fee in USDC</span>
<span class="token keyword">const</span> transferHandle <span class="token operator">=</span> signer<span class="token punctuation">.</span><span class="token function">transfer</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  to<span class="token operator">:</span> recipient<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
  amount<span class="token operator">:</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">parseEther</span><span class="token punctuation">(</span><span class="token string">&quot;0.01&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="l1signer" tabindex="-1"><a class="header-anchor" href="#l1signer" aria-hidden="true">#</a> <code>L1Signer</code></h2><p>This class is to be used in a browser environment to do zkSync-related operations on layer 1. This class extends <code>ethers.providers.JsonRpcSigner</code> and so supports all the methods available for it.</p><p>The easiest way to construct it is from an <code>Web3Provider</code> object.</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Web3Provider<span class="token punctuation">,</span> Provider<span class="token punctuation">,</span> L1Signer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers</span><span class="token punctuation">.</span><span class="token function">Web3Provider</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ethereum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> zksyncProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> signer <span class="token operator">=</span> L1Signer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>provider<span class="token punctuation">.</span><span class="token function">getSigner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> zksyncProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getting-the-zksync-l1-smart-contract" tabindex="-1"><a class="header-anchor" href="#getting-the-zksync-l1-smart-contract" aria-hidden="true">#</a> Getting the zkSync L1 smart contract</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">getMainContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>Contract<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="getting-bridge-contracts" tabindex="-1"><a class="header-anchor" href="#getting-bridge-contracts" aria-hidden="true">#</a> Getting bridge contracts</h3><p>ERC-20 bridge <code>Contract</code> object:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">getL1BridgeContracts</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">{</span>
    erc20<span class="token operator">:</span> IL1Bridge<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,22),m={class:"hint-container note"},y=s("p",{class:"hint-container-title"},"Note",-1),g=a(`<h4 id="inputs-and-outputs-7" tabindex="-1"><a class="header-anchor" href="#inputs-and-outputs-7" aria-hidden="true">#</a> Inputs and outputs</h4><table><thead><tr><th>Name</th><th>Description</th></tr></thead><tbody><tr><td>returns</td><td><code>Contract</code> wrapper of the zkSync smart contract.</td></tr></tbody></table><blockquote><p>Example</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Web3Provider<span class="token punctuation">,</span> Provider<span class="token punctuation">,</span> L1Signer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers</span><span class="token punctuation">.</span><span class="token function">Web3Provider</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ethereum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> zksyncProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> signer <span class="token operator">=</span> L1Signer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>provider<span class="token punctuation">.</span><span class="token function">getSigner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> zksyncProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> mainContract <span class="token operator">=</span> <span class="token keyword">await</span> signer<span class="token punctuation">.</span><span class="token function">getMainContract</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>mainContract<span class="token punctuation">.</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="getting-token-balance-on-l1" tabindex="-1"><a class="header-anchor" href="#getting-token-balance-on-l1" aria-hidden="true">#</a> Getting token balance on L1</h3><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token function">getBalanceL1</span><span class="token punctuation">(</span>token<span class="token operator">?</span><span class="token operator">:</span> Address<span class="token punctuation">,</span> blockTag<span class="token operator">?</span><span class="token operator">:</span> ethers<span class="token punctuation">.</span>providers<span class="token punctuation">.</span>BlockTag<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span>BigNumber<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="inputs-and-outputs-8" tabindex="-1"><a class="header-anchor" href="#inputs-and-outputs-8" aria-hidden="true">#</a> Inputs and outputs</h4><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>token?</td><td>代币的地址。默认为ETH。</td></tr><tr><td>blockTag?</td><td>余额应该被检查的区块。最新处理的一个是默认选项。</td></tr><tr><td>returns</td><td>\`L1Signer&#39;在Ethereum上拥有的代币的数量。</td></tr></tbody></table><blockquote><p>Example</p></blockquote><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Web3Provider<span class="token punctuation">,</span> Provider<span class="token punctuation">,</span> L1Signer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers</span><span class="token punctuation">.</span><span class="token function">Web3Provider</span><span class="token punctuation">(</span>window<span class="token punctuation">.</span>ethereum<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> zksyncProvider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> signer <span class="token operator">=</span> L1Signer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>provider<span class="token punctuation">.</span><span class="token function">getSigner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> zksyncProvider<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">USDC_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;0xd35CCeEAD182dcee0F148EbaC9447DA2c4D449c4&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Getting balance in USDC</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> signer<span class="token punctuation">.</span><span class="token function">getBalanceL1</span><span class="token punctuation">(</span><span class="token constant">USDC_ADDRESS</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// Getting balance in ETH</span>
<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> signer<span class="token punctuation">.</span><span class="token function">getBalanceL1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10);function w(f,q){const o=e("ExternalLinkIcon"),p=e("RouterLink");return i(),l("div",null,[d,s("p",null,[n("The "),k,n(" class also provides the "),v,n(" method which is an alias for "),s("a",b,[n("getTransactionCount"),t(o)]),n(".")]),h,s("div",m,[y,s("p",null,[n("there is no separate Ether bridge contract, "),t(p,{to:"/api/js/accounts.html#getting-the-zksync-l1-smart-contract"},{default:r(()=>[n("Main contract")]),_:1}),n(" is used instead.")])]),g])}const x=c(u,[["render",w],["__file","accounts.html.vue"]]);export{x as default};
