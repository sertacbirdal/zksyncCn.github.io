import{_ as r,W as l,X as c,Z as n,$ as e,a0 as a,a2 as p,Y as o,D as s}from"./framework-674379d2.js";const d="/docs/assets/verify-contract-945632f6.png",u="/docs/assets/compiler-version-53a01230.png",h="/docs/assets/contract-verified-afa3dd19.png",f={},k=o('<h1 id="合约验证" tabindex="-1"><a class="header-anchor" href="#合约验证" aria-hidden="true">#</a> 合约验证</h1><h2 id="什么是合约验证" tabindex="-1"><a class="header-anchor" href="#什么是合约验证" aria-hidden="true">#</a> 什么是合约验证？</h2><p>当你在网络上部署一个智能合约时，你基本上是在部署由Solidity编译器产生的字节码。</p><p>验证一个合约需要确定链上字节码在编译时是否与给定的源代码相匹配。如果匹配，我们就可以说我们已经确认了字节码的源代码的完整性。因此而得名--验证。</p><h2 id="智能合约在zksync中是如何验证的" tabindex="-1"><a class="header-anchor" href="#智能合约在zksync中是如何验证的" aria-hidden="true">#</a> 智能合约在zkSync中是如何验证的？</h2><p>在验证过程中，使用zkSync对部署的字节码和智能合约的Solidity源代码进行比较。该算法对源代码进行编译，以比较生成的字节码和部署的字节码。 <br> 如果双方在各方面都匹配，合同就被验证了。</p><p>代码验证需要六个参数。</p><ul><li>合约地址</li><li>合约名称</li><li>源代码，包括所有导入的源代码</li><li>用来产生部署的字节码的编译器的版本</li><li>关于编译器优化的数量的信息（如果有）。</li><li>构造函数参数</li></ul><p>如果这些信息中的任何一条是错误的，验证过程就会失败。</p><h2 id="源代码隐私" tabindex="-1"><a class="header-anchor" href="#源代码隐私" aria-hidden="true">#</a> 源代码隐私</h2><p>当你的智能合约部署在zkSync上并在区块资源管理器上得到验证时，用户可以检查经过验证的源代码并与之互动。</p><h2 id="使用zksync区块浏览器验证合约" tabindex="-1"><a class="header-anchor" href="#使用zksync区块浏览器验证合约" aria-hidden="true">#</a> 使用zkSync区块浏览器验证合约</h2><p>要想开始，请点击顶部标题中的<strong>工具</strong>标签，将弹出一个下拉菜单并选择<strong>智能合约验证</strong>，之后你将看到以下屏幕。</p><p><img src="'+d+'" alt="Smart Contract Verification page!" title="verify contract"></p><h3 id="输入合约细节" tabindex="-1"><a class="header-anchor" href="#输入合约细节" aria-hidden="true">#</a> 输入合约细节</h3><p>要核实合同，请输入以下细节。</p><ul><li>合同地址。提供的地址必须与创建合同时产生的`0x&#39;地址一致。</li><li>合同名称：该名称必须与合同中提供的名称相同。</li><li>优化。这将检查在编译合同时是否使用了优化。如果您在编译期间启用了优化，请勾选<strong>是</strong>，否则选择<strong>否</strong>。</li><li>Solidity 编译器版本(Solc): 这指定了用于编译智能合约的编译器的确切版本。点击下拉菜单，指定使用的编译器版本。我们鼓励你使用<code>0.8.16</code>版本。.</li><li>zkSync编译器版本（Zksolc）。使用的zkSync编译器版本，默认设置为<code>v1.2.0</code>。.</li></ul><br><p><img src="'+u+'" alt="Compiler version!" title="compiler version"></p>',19),_=n("br",null,null,-1),g=n("strong",null,"Note:",-1),m=n("br",null,null,-1),b={href:"https://medium.com/coinmonks/flattening-smart-contracts-using-hardhat-dffe7dbc7b3f",target:"_blank",rel:"noopener noreferrer"},v={href:"https://github.com/NomicFoundation/truffle-flattener",target:"_blank",rel:"noopener noreferrer"},y={href:"https://github.com/poanetwork/solidity-flattener",target:"_blank",rel:"noopener noreferrer"},x={href:"https://solidity.readthedocs.io/en/develop/abi-spec.html",target:"_blank",rel:"noopener noreferrer"},S=n("br",null,null,-1),z=n("h3",{id:"你如何获得你的构造函数参数",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#你如何获得你的构造函数参数","aria-hidden":"true"},"#"),e(" 你如何获得你的构造函数参数？")],-1),C=n("blockquote",null,[n("p",null,"**Note: 获取构造函数参数数据的最简单方法是在部署时将其打印到控制台。")],-1),V=o(`<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> greeterContract <span class="token operator">=</span> <span class="token keyword">await</span> deployer<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>artifact<span class="token punctuation">,</span> <span class="token punctuation">[</span>greeting<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>如果你将下一行添加为</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>greeterContract<span class="token punctuation">.</span>interface<span class="token punctuation">.</span><span class="token function">encodeDeploy</span><span class="token punctuation">(</span><span class="token punctuation">[</span>greeting<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>那么你将收到构造函数参数数据。</p><ul><li>最后，点击<strong>验证智能合约</strong>按钮。</li></ul><p><br>如果一切顺利，你会看到一个成功的消息.</p><br><p><img src="`+h+'" alt="Smart Contract Verified!" title="Contract Verified"></p>',8);function N(j,w){const t=s("ExternalLinkIcon"),i=s("RouterLink");return l(),c("div",null,[k,n("ul",null,[n("li",null,[n("p",null,[e("输入 Solidity 合同代码。从您的编辑器中复制代码并将其粘贴到文本区。 "),_,g,e(" 如果您的 Solidity 代码利用了一个库或从另一个合同中继承了依赖关系，您可能需要将其扁平化。"),m,e(" 我们建议使用"),n("a",b,[e("Hardhat flatten"),a(t)]),e("、"),n("a",v,[e("Truffle flattener"),a(t)]),e("或"),n("a",y,[e("POA Solidity flattener"),a(t)]),e("。")])]),n("li",null,[n("p",null,[e("构造函数参数。如果合同要求构造函数参数，你应该在这里添加它们，但要以"),n("a",x,[e("ABI hex-encoded form"),a(t)]),e("。")])])]),S,z,C,n("p",null,[e("例如，如果使用我们的"),a(i,{to:"/api/tools/block-explorer/dev/building-on-zksync/hello-world.html"},{default:p(()=>[e("教程")]),_:1}),e("，你可以找到这一行。")]),V])}const L=r(f,[["render",N],["__file","contract-verification.html.vue"]]);export{L as default};
