import{_ as e,W as n,X as t,Y as a}from"./framework-674379d2.js";const o={},s=a(`<h1 id="合约接口" tabindex="-1"><a class="header-anchor" href="#合约接口" aria-hidden="true">#</a> 合约接口</h1><p>有一套系统合约，有助于与zkSync Era网络的互动。 以下是这些合约。</p><ul><li>许可证持有人（NonceHolder</li><li>ERC20Contract &amp; ERC20FunctionEncoder</li><li>ContractDeployer</li></ul><h3 id="nonceholder" tabindex="-1"><a class="header-anchor" href="#nonceholder" aria-hidden="true">#</a> NonceHolder</h3><p>NonceHolder &quot;系统合约处理nonce的部署，它对于预先计算将被部署在网络中的合约地址很有用。</p><p>要构建它，你需要<code>account&#39;和</code>Web3&#39;对象与集成zksync模块。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>manage_contracts<span class="token punctuation">.</span>nonce_holder <span class="token keyword">import</span> NonceHolder
<span class="token keyword">from</span> eth_account <span class="token keyword">import</span> Account
<span class="token keyword">from</span> eth_account<span class="token punctuation">.</span>signers<span class="token punctuation">.</span>local <span class="token keyword">import</span> LocalAccount
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>module<span class="token punctuation">.</span>module_builder <span class="token keyword">import</span> ZkSyncBuilder

zksync_web3 <span class="token operator">=</span> ZkSyncBuilder<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token string">&quot;ZKSYNC_NETWORK_URL&quot;</span><span class="token punctuation">)</span>
account<span class="token punctuation">:</span> LocalAccount <span class="token operator">=</span> Account<span class="token punctuation">.</span>from_key<span class="token punctuation">(</span><span class="token string">&quot;PRIVATE_KEY&quot;</span><span class="token punctuation">)</span>
nonce_holder <span class="token operator">=</span> NonceHolder<span class="token punctuation">(</span>zksync_web3<span class="token punctuation">,</span> account<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Methods:</p><table><thead><tr><th>Method</th><th>Parameters</th><th>Return value</th><th>Description</th></tr></thead><tbody><tr><td>get_account_nonce</td><td>-</td><td>Nonce</td><td>Returns account nonce.</td></tr><tr><td>get_deployment_nonce</td><td>-</td><td>Nonce</td><td>Return the current deployment nonce that is going to be used.</td></tr><tr><td>increment_deployment_nonce</td><td>Address</td><td>Nothing</td><td>Manually increments deployment nonce by the provided account address.</td></tr></tbody></table><h3 id="erc20contract" tabindex="-1"><a class="header-anchor" href="#erc20contract" aria-hidden="true">#</a> ERC20Contract</h3><p>这是系统合约，在内部作为<code>EthereumProvider</code>的实现方法的一部分使用<br>。</p><p>更感兴趣的类型包括<code>ERC20FunctionEncoder</code>。它用于在网络内发送非本地令牌的情况下提供方法编码。</p><p>建设只需要Web3对象和附加的zksync模块（ZkSyncBuilder）。</p><p>它只有一个方法：<code>python encode_method</code>，参数为函数名和它的args</p><h3 id="contractdeployer" tabindex="-1"><a class="header-anchor" href="#contractdeployer" aria-hidden="true">#</a> ContractDeployer</h3><p>ContractDeployer是一个实用的系统合同，以一个类型表示，涵盖以下功能。</p><ul><li>通过\`create&#39;方法对二进制合同表示进行编码，以便进一步部署。</li><li>通过<code>create2</code>方法编码二进制合同表示，以便进一步部署。</li><li>为<code>create</code>和<code>create2</code>方法预先计算合同地址。</li></ul><p>结构：只需要web3对象和附加的zksync模块。</p><p>Example:</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>manage_contracts<span class="token punctuation">.</span>contract_deployer <span class="token keyword">import</span> ContractDeployer
<span class="token keyword">from</span> zksync2<span class="token punctuation">.</span>module<span class="token punctuation">.</span>module_builder <span class="token keyword">import</span> ZkSyncBuilder

zksync_web3 <span class="token operator">=</span> ZkSyncBuilder<span class="token punctuation">.</span>build<span class="token punctuation">(</span><span class="token string">&quot;ZKSYNC_NETWORK_URL&quot;</span><span class="token punctuation">)</span>
deployer <span class="token operator">=</span> ContractDeployer<span class="token punctuation">(</span>zksync_web3<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Parameter and Methods:</strong></p><table><thead><tr><th>Method</th><th>Parameters</th><th>Return value</th><th>Description</th></tr></thead><tbody><tr><td>encode_create</td><td>bytecode, optional <code>call_data</code> &amp; <code>salt</code></td><td>HexStr</td><td>Creates binary representation of a contract in an internal deploying format.<br> bytecode - contract binary representation, <code>call_data</code> is used for <code>ctor</code> bytecode only, <code>salt</code> is used to generate unique identifier of deploying contract.</td></tr><tr><td>encode_create2</td><td>bytecode, optional <code>call_data</code> &amp; <code>salt</code></td><td>HexStr</td><td>Creates binary representation of contract in an internal deploying format.<br> bytecode - contract binary representation, <code>call_data</code> is used for <code>ctor</code> bytecode only, <code>salt</code> is used to generate unique identifier of deploying contract.</td></tr><tr><td>compute_l2_create_address</td><td>Address, Nonce</td><td>Address</td><td>Accepts address of deployer and current deployed nonce and returns address of contract that is going to be deployed by the<code>encode_create</code> method.</td></tr><tr><td>compute_l2_create2_address</td><td>Address, bytecode, <code>ctor</code> bytecode, <code>salt</code></td><td>Address</td><td>Accepts address of the deployer, binary representation of contract, it&#39;s constructor in binary format and salt. By default constructor can be <code>b&#39;0&#39;</code> value. It returns the address of the contract that is going to be deployed by an<code>encode_create2</code> method.</td></tr></tbody></table>`,22),c=[s];function d(r,p){return n(),t("div",null,c)}const i=e(o,[["render",d],["__file","contract-interface.html.vue"]]);export{i as default};
