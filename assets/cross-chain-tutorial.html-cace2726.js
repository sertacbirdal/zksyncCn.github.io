import{_ as i,W as l,X as u,Z as s,$ as n,a0 as a,a2 as e,Y as o,D as c}from"./framework-674379d2.js";const r={},d=o(`<h1 id="跨链治理" tabindex="-1"><a class="header-anchor" href="#跨链治理" aria-hidden="true">#</a> 跨链治理</h1><p>本教程作为一个例子，说明如何实现L1到L2的合同互动。本教程中实现了以下功能。</p><ul><li>一个 &quot;计数器 &quot;智能合约被部署在zkSync上，它存储了一个数字，可以通过调用<code>increment</code>方法来增加。</li><li>一个 &quot;治理 &quot;智能合约被部署在第1层，它有权限增加zkSync上的计数器。</li></ul><div class="hint-container warning"><p class="hint-container-title">Note</p><p>请注意，在<code>zksync-web3 ^0.13.0</code>中引入了突破性变化。API层现在使用 &quot;gas &quot;操作，&quot;ergs &quot;概念只在虚拟机内部使用。</p><p>本教程将很快被更新以反映这些变化。</p></div><h2 id="预先说明" tabindex="-1"><a class="header-anchor" href="#预先说明" aria-hidden="true">#</a> 预先说明</h2><p>在本教程中，假定你已经熟悉在zkSync上部署智能合约。如果没有，请参考[快速入门教程]（.../building-on-zksync/hello-world.md）的第一节。</p><p>此外，还假设你已经有一些使用Ethereum的经验。</p><h2 id="项目结构" tabindex="-1"><a class="header-anchor" href="#项目结构" aria-hidden="true">#</a> 项目结构</h2><p>由于我们将在L1和L2上部署合约，我们将把这个项目分成两个不同的文件夹。</p><ul><li><code>/L1-governance</code>：用于L1合约，和脚本。</li><li><code>/L2-counter</code>：用于L2合同，以及脚本。</li></ul><p>所以继续创建这些文件夹。</p><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>请注意，<code>governance</code>项目是一个默认的Hardhat项目，因为它将被用来在L1部署合同，而<code>counter</code>项目包括所有的zkSync依赖和特定配置，因为它将在L2部署合同。</p></div><h2 id="l1治理" tabindex="-1"><a class="header-anchor" href="#l1治理" aria-hidden="true">#</a> L1治理</h2><p>要初始化<code>/L1-governance</code>文件夹内的项目，运行<code>npx hardhat</code>，选择 &quot;创建一个Typescript项目 &quot;选项，其余选项保留默认值。</p><p>要使用 Solidity 与 zkSync 桥接合同互动，你需要使用 zkSync 合同接口。有两个选项可以得到它。</p><ol><li>从<code>@matterlabs/zksync-contracts</code>的npm包中导入它。(首选)</li><li>从[contracts repo]中下载（https://github.com/matter-labs/v2-testnet-contracts）。</li></ol><p>我们将选择选项1，并通过运行以下命令安装<code>@matterlabs/zksync-contracts</code>包（只要确保你在<code>/L1-governance</code>文件夹内）。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn add -D @matterlabs/zksync-contracts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们将在L1上部署的治理合同的代码如下。</p><div class="language-sol line-numbers-mode" data-ext="sol"><pre class="language-sol"><code><span class="token comment">//SPDX-License-Identifier: Unlicense</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token string">&quot;@matterlabs/zksync-contracts/l1/contracts/zksync/interfaces/IZkSync.sol&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Governance</span> <span class="token punctuation">{</span>
    <span class="token builtin">address</span> <span class="token keyword">public</span> governor<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        governor <span class="token operator">=</span> msg<span class="token punctuation">.</span>sender<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">callZkSync</span><span class="token punctuation">(</span>
        <span class="token builtin">address</span> zkSyncAddress<span class="token punctuation">,</span>
        <span class="token builtin">address</span> contractAddr<span class="token punctuation">,</span>
        <span class="token builtin">bytes</span> <span class="token keyword">memory</span> data<span class="token punctuation">,</span>
        <span class="token builtin">uint64</span> gasLimit
    <span class="token punctuation">)</span> <span class="token keyword">external</span> <span class="token keyword">payable</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> governor<span class="token punctuation">,</span> <span class="token string">&quot;Only governor is allowed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        IZkSync zksync <span class="token operator">=</span> <span class="token function">IZkSync</span><span class="token punctuation">(</span>zkSyncAddress<span class="token punctuation">)</span><span class="token punctuation">;</span>
        zksync<span class="token punctuation">.</span>requestL2Transaction<span class="token punctuation">{</span>value<span class="token punctuation">:</span> msg<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">(</span>contractAddr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> gasLimit<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">bytes</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这是一个非常简单的治理合约。它将合约的创建者设定为单一的治理者，并且有一个函数可以通过zkSync智能合约请求L2的交易。</p><p>你可以[在本节文档中了解更多关于L1-L2通信的信息]（.../developer-guides/bridging/L1-l2.md）。</p><h3 id="部署l1治理合同" tabindex="-1"><a class="header-anchor" href="#部署l1治理合同" aria-hidden="true">#</a> 部署L1治理合同</h3><p>尽管本教程并不关注在L1上部署合同的过程，但我们会给你一个快速的概述，告诉你如何继续。</p><ol><li><p>你需要一个RPC节点端点到Göerli测试网，以提交部署事务。你可以[在这里找到多个节点提供者]（https://github.com/arddluma/awesome-list-rpc-nodes-providers）。</p></li><li><p>创建文件<code>/L1-governance/goerli.json</code>并填写以下数值。</p></li></ol><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">{</span>
  <span class="token property">&quot;nodeUrl&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">,</span> <span class="token comment">// your Göerli Ethereum node  URL.</span>
  <span class="token property">&quot;deployerPrivateKey&quot;</span><span class="token operator">:</span> <span class="token string">&quot;&quot;</span> <span class="token comment">//private key of the wallet that will deploy the governance smart contract. It needs to have some ETH on Göerli.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>在<code>hardhat.config.ts</code>文件中添加Göerli网络部分。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> HardhatUserConfig<span class="token punctuation">,</span> task <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;hardhat/config&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;@nomiclabs/hardhat-etherscan&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;@nomiclabs/hardhat-waffle&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;@typechain/hardhat&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// import file with Göerli params</span>
<span class="token keyword">const</span> goerli <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./goerli.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> config<span class="token operator">:</span> HardhatUserConfig <span class="token operator">=</span> <span class="token punctuation">{</span>
  solidity<span class="token operator">:</span> <span class="token punctuation">{</span>
    version<span class="token operator">:</span> <span class="token string">&quot;0.8.4&quot;</span><span class="token punctuation">,</span>
    networks<span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token comment">// Göerli network</span>
      goerli<span class="token operator">:</span> <span class="token punctuation">{</span>
        url<span class="token operator">:</span> goerli<span class="token punctuation">.</span>nodeUrl<span class="token punctuation">,</span>
        accounts<span class="token operator">:</span> <span class="token punctuation">[</span>goerli<span class="token punctuation">.</span>deployerPrivateKey<span class="token punctuation">]</span><span class="token punctuation">,</span>
      <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>用以下代码创建部署脚本<code>/L1-governance/scripts/deploy.ts</code>。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// We require the Hardhat Runtime Environment explicitly here. This is optional</span>
<span class="token comment">// but useful for running the script in a standalone fashion through \`node &lt;script&gt;\`.</span>
<span class="token comment">//</span>
<span class="token comment">// When running the script with \`npx hardhat run &lt;script&gt;\` you&#39;ll find the Hardhat</span>
<span class="token comment">// Runtime Environment&#39;s members available in the global scope.</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> ethers <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;hardhat&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// We get the contract to deploy</span>
  <span class="token keyword">const</span> Governance <span class="token operator">=</span> <span class="token keyword">await</span> ethers<span class="token punctuation">.</span><span class="token function">getContractFactory</span><span class="token punctuation">(</span><span class="token string">&quot;Governance&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> contract <span class="token operator">=</span> <span class="token keyword">await</span> Governance<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> contract<span class="token punctuation">.</span><span class="token function">deployed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Governance contract was successfully deployed at </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>contract<span class="token punctuation">.</span>address<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// We recommend this pattern to be able to use async/await everywhere</span>
<span class="token comment">// and properly handle errors.</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span>exitCode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>编译合同并运行部署脚本。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># compile contract
yarn hardhat compile

# deploy contract
yarn hardhat run --network goerli ./scripts/deploy.ts

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后一条命令将在终端打印已部署的治理智能合约地址。</p><h2 id="l2反面" tabindex="-1"><a class="header-anchor" href="#l2反面" aria-hidden="true">#</a> L2反面</h2><p>现在我们已经解决了L1的治理合同，让我们继续进行L2的反合同。</p><ol><li>为了初始化<code>/L2-counter</code>文件夹中的项目，运行以下命令。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn init -y
# install all dependencies
yarn add -D typescript ts-node ethers@^5.7.2 zksync-web3@^0.13.1 hardhat @matterlabs/hardhat-zksync-solc @matterlabs/hardhat-zksync-deploy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>当前版本的<code>zksync-web3</code>使用<code>ethers v5.7.x</code>作为同行依赖。与<code>ethers v6.x.x</code>兼容的更新将很快发布。</p></div><ol start="2"><li>创建<code>hardhat.config.ts</code>文件并在那里粘贴以下代码。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&quot;@matterlabs/hardhat-zksync-deploy&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;@matterlabs/hardhat-zksync-solc&quot;</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  zksolc<span class="token operator">:</span> <span class="token punctuation">{</span>
    version<span class="token operator">:</span> <span class="token string">&quot;1.3.1&quot;</span><span class="token punctuation">,</span>
    compilerSource<span class="token operator">:</span> <span class="token string">&quot;binary&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  defaultNetwork<span class="token operator">:</span> <span class="token string">&quot;zkSyncTestnet&quot;</span><span class="token punctuation">,</span>

  networks<span class="token operator">:</span> <span class="token punctuation">{</span>
    hardhat<span class="token operator">:</span> <span class="token punctuation">{</span>
      zksync<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    zkSyncTestnet<span class="token operator">:</span> <span class="token punctuation">{</span>
      url<span class="token operator">:</span> <span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">,</span>
      ethNetwork<span class="token operator">:</span> <span class="token string">&quot;goerli&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Can also be the RPC URL of the network (e.g. \`https://goerli.infura.io/v3/&lt;API_KEY&gt;\`)</span>
      zksync<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  solidity<span class="token operator">:</span> <span class="token punctuation">{</span>
    version<span class="token operator">:</span> <span class="token string">&quot;0.8.16&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果你的默认网络不是<code>hardhat&#39;，确保在其配置中也包括</code>zksync: true&#39;。</p><ol start="3"><li>创建<code>contracts</code>和<code>deploy</code>文件夹，其中将包含所有合同<code>*.sol</code>文件，以及与部署合同有关的脚本。</li></ol>`,42),k={class:"hint-container tip"},v=s("p",{class:"hint-container-title"},"Tips",-1),m=o(`<ol start="4"><li>创建<code>contracts/Counter.sol</code>合同文件。这个合同将有部署在L1的治理合同的地址和一个可以递增的计数器。增加计数器的函数只能由我们之前部署在L1的治理合同调用。下面是代码。</li></ol><div class="language-sol line-numbers-mode" data-ext="sol"><pre class="language-sol"><code><span class="token comment">//SPDX-License-Identifier: Unlicense</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Counter</span> <span class="token punctuation">{</span>
    <span class="token builtin">uint256</span> <span class="token keyword">public</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token builtin">address</span> <span class="token keyword">public</span> governance<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">address</span> newGovernance<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        governance <span class="token operator">=</span> newGovernance<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">increment</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        <span class="token keyword">require</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span>sender <span class="token operator">==</span> governance<span class="token punctuation">,</span> <span class="token string">&quot;Only governance is allowed&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        value <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>用以下命令编译合同。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn hardhat compile
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ol start="6"><li>在<code>deploy/deploy.ts</code>中创建部署脚本。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> utils<span class="token punctuation">,</span> Wallet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ethers <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HardhatRuntimeEnvironment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;hardhat/types&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Deployer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@matterlabs/hardhat-zksync-deploy&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// Insert the address of the governance contract</span>
<span class="token keyword">const</span> <span class="token constant">GOVERNANCE_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;&lt;GOVERNANCE-ADDRESS&gt;&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// An example of a deploy script that will deploy and call a simple contract.</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>hre<span class="token operator">:</span> HardhatRuntimeEnvironment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Running deploy script for the Counter contract</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Initialize the wallet.</span>
  <span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;WALLET-PRIVATE-KEY&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Create deployer object and load the artifact of the contract you want to deploy.</span>
  <span class="token keyword">const</span> deployer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Deployer</span><span class="token punctuation">(</span>hre<span class="token punctuation">,</span> wallet<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> artifact <span class="token operator">=</span> <span class="token keyword">await</span> deployer<span class="token punctuation">.</span><span class="token function">loadArtifact</span><span class="token punctuation">(</span><span class="token string">&quot;Counter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Deposit some funds to L2 to be able to perform deposits.</span>
  <span class="token keyword">const</span> deploymentFee <span class="token operator">=</span> <span class="token keyword">await</span> deployer<span class="token punctuation">.</span><span class="token function">estimateDeployFee</span><span class="token punctuation">(</span>artifact<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token constant">GOVERNANCE_ADDRESS</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> depositHandle <span class="token operator">=</span> <span class="token keyword">await</span> deployer<span class="token punctuation">.</span>zkWallet<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    to<span class="token operator">:</span> deployer<span class="token punctuation">.</span>zkWallet<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
    token<span class="token operator">:</span> utils<span class="token punctuation">.</span><span class="token constant">ETH_ADDRESS</span><span class="token punctuation">,</span>
    amount<span class="token operator">:</span> deploymentFee<span class="token punctuation">.</span><span class="token function">mul</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Wait until the deposit is processed on zkSync</span>
  <span class="token keyword">await</span> depositHandle<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Deploy this contract. The returned object will be of a \`Contract\` type, similar to the ones in \`ethers\`.</span>
  <span class="token comment">// The address of the governance is an argument for contract constructor.</span>
  <span class="token keyword">const</span> counterContract <span class="token operator">=</span> <span class="token keyword">await</span> deployer<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>artifact<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token constant">GOVERNANCE_ADDRESS</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Show the contract info.</span>
  <span class="token keyword">const</span> contractAddress <span class="token operator">=</span> counterContract<span class="token punctuation">.</span>address<span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>artifact<span class="token punctuation">.</span>contractName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> was deployed to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>contractAddress<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="7"><li>在将<code>&lt;WALLET-PRIVATE-KEY&gt;</code>和<code>&lt;GOVERNANCE-ADDRESS&gt;</code>分别替换为Göerli上有一定ETH余额的Ethereum钱包的私钥和L1治理合约的地址后，使用以下命令运行该脚本。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn hardhat deploy-zksync
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在输出中，你应该看到合同被部署到的地址。</p>`,9),b={class:"hint-container tip"},y=s("p",{class:"hint-container-title"},"Tips",-1),h=o(`<h2 id="读取计数器的值" tabindex="-1"><a class="header-anchor" href="#读取计数器的值" aria-hidden="true">#</a> 读取计数器的值</h2><p>在部署了两个合同之后，我们可以创建一个小脚本来检索计数器的值。为了简单起见，我们将在<code>/L2-counter</code>文件夹下创建这个脚本。为了保持教程的通用性，其中将不使用特定的hardhat功能。</p><h3 id="获取计数器合约的abi" tabindex="-1"><a class="header-anchor" href="#获取计数器合约的abi" aria-hidden="true">#</a> 获取计数器合约的ABI</h3><p>以下是如何获得计数器合约的ABI。</p><ol><li><p>从位于<code>/L2-counter/artifacts-zk/contracts/Counter.sol/Counter.json</code>的编译工件中复制<code>abi</code>阵列。</p></li><li><p>在<code>/L2-counter</code>项目文件夹中创建<code>scripts</code>文件夹。</p></li><li><p>创建一个新的文件<code>/L2-counter/scripts/counter.json</code>并粘贴计数器合同的ABI。</p></li><li><p>4.创建<code>/L2-counter/scripts/display-value.ts</code>文件并粘贴以下代码。</p></li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Contract<span class="token punctuation">,</span> Provider<span class="token punctuation">,</span> Wallet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// The address of the counter smart contract</span>
<span class="token keyword">const</span> <span class="token constant">COUNTER_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;&lt;COUNTER-ADDRESS&gt;&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// The ABI of the counter smart contract</span>
<span class="token keyword">const</span> <span class="token constant">COUNTER_ABI</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./counter.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Initializing the zkSync provider</span>
  <span class="token keyword">const</span> l2Provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> counterContract <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contract</span><span class="token punctuation">(</span><span class="token constant">COUNTER_ADDRESS</span><span class="token punctuation">,</span> <span class="token constant">COUNTER_ABI</span><span class="token punctuation">,</span> l2Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">The counter value is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token punctuation">(</span><span class="token keyword">await</span> counterContract<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span>exitCode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这段代码相对简单，主要等同于使用 &quot;ethers &quot;的工作方式。它将只是从L2合同中检索计数器的值。</p><p>将<code>&lt;COUNTER-ADDRESS&gt;</code>替换为已部署的计数器合约的地址后，通过运行这个脚本来运行</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn ts-node ./scripts/display-value.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>The output should be:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>The counter value is 0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="从l1调用l2合同" tabindex="-1"><a class="header-anchor" href="#从l1调用l2合同" aria-hidden="true">#</a> 从L1调用L2合同</h2><p>现在，让我们从第一层调用<code>increment</code>方法。</p><ol><li>获取已编译的治理合同的ABI数组，它位于<code>/L1-governance/artifacts/contracts/Governance.sol/Governance.json</code>，并将其保存在一个新文件中，即<code>/L2-counter/scripts/governance.json</code>（确保你在<code>/L2-counter</code>文件夹中创建它！）。</li><li>创建<code>L2-counter/scripts/increment-counter.ts</code>文件，并为脚本粘贴以下模板。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Imports and constants will be put here</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// The logic will be put here</span>
<span class="token punctuation">}</span>

<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span>exitCode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>为了与治理智能合约互动，我们需要初始化一个以太坊提供者和相应的<code>以太坊</code>合约\`对象，所以我们需要有它的部署地址。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Imports</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> BigNumber<span class="token punctuation">,</span> Contract<span class="token punctuation">,</span> ethers<span class="token punctuation">,</span> Wallet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">GOVERNANCE_ABI</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./governance.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">GOVERNANCE_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;&lt;GOVERNANCE-ADDRESS&gt;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Ethereum L1 provider</span>
  <span class="token keyword">const</span> l1Provider <span class="token operator">=</span> ethers<span class="token punctuation">.</span>providers<span class="token punctuation">.</span><span class="token function">getDefaultProvider</span><span class="token punctuation">(</span><span class="token string">&quot;goerli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Governor wallet, the same one as the one that deployed the</span>
  <span class="token comment">// governance contract</span>
  <span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers</span><span class="token punctuation">.</span><span class="token function">Wallet</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;WALLET-PRIVATE-KEY&gt;&quot;</span><span class="token punctuation">,</span> l1Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> govcontract <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contract</span><span class="token punctuation">(</span><span class="token constant">GOVERNANCE_ADDRESS</span><span class="token punctuation">,</span> <span class="token constant">GOVERNANCE_ABI</span><span class="token punctuation">,</span> wallet<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>将<code>&lt;治理-地址&gt;和</code>&lt;钱包-私钥&gt;分别替换为L1治理智能合约的地址和部署治理合约的钱包的私钥。</p><ol start="4"><li>为了与zkSync桥梁互动，我们需要其L1地址。虽然在mainnet上，你可能想把zkSync智能合约的地址设置为环境变量或常量，但值得注意的是，你可以动态地获取智能合约地址。如果你在测试网工作，我们推荐这种方法，因为再生可能发生，合同地址可能会改变。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Imports</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> utils <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... Previous steps</span>

  <span class="token comment">// Initializing the L2 provider</span>
  <span class="token keyword">const</span> l2Provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Getting the current address of the zkSync L1 bridge</span>
  <span class="token keyword">const</span> zkSyncAddress <span class="token operator">=</span> <span class="token keyword">await</span> l2Provider<span class="token punctuation">.</span><span class="token function">getMainContractAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Getting the \`Contract\` object of the zkSync bridge</span>
  <span class="token keyword">const</span> zkSyncContract <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contract</span><span class="token punctuation">(</span>zkSyncAddress<span class="token punctuation">,</span> utils<span class="token punctuation">.</span><span class="token constant">ZKSYNC_MAIN_ABI</span><span class="token punctuation">,</span> wallet<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>从L1执行交易需要调用者向L2操作员支付一些费用。</li></ol><p>首先，这个费用取决于calldata的长度和<code>gasLimit</code>。如果你对这个概念感到陌生，那么它与以太坊上的<code>l2gasLimit</code>基本相同。你可以在这里阅读更多关于[zkSync收费模式]（.../developer-guides/transactions/fee-model.md）。</p><p>其次，费用取决于交易调用时使用的天然气价格。因此，为了有一个可预测的调用费用，应该从L1供应商那里获取气体价格。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Imports</span>
<span class="token keyword">const</span> <span class="token constant">COUNTER_ABI</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./counter.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... Previous steps</span>

  <span class="token comment">// Encoding L1 transaction is the same way it is done on Ethereum.</span>
  <span class="token keyword">const</span> counterInterface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token constant">COUNTER_ABI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> counterInterface<span class="token punctuation">.</span><span class="token function">encodeFunctionData</span><span class="token punctuation">(</span><span class="token string">&quot;increment&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// The price of L1 transaction requests depend on the gas price used in the call,</span>
  <span class="token comment">// so we should explicitly fetch the gas price before the call.</span>
  <span class="token keyword">const</span> gasPrice <span class="token operator">=</span> <span class="token keyword">await</span> l1Provider<span class="token punctuation">.</span><span class="token function">getGasPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Here we define the constant for gas limit.</span>
  <span class="token comment">// There is currently no way to get the exact gasLimit required for an L1-&gt;L2 tx.</span>
  <span class="token comment">// You can read more on that in the tip below</span>
  <span class="token keyword">const</span> gasLimit <span class="token operator">=</span> BigNumber<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Getting the cost of the execution in Wei.</span>
  <span class="token keyword">const</span> baseCost <span class="token operator">=</span> <span class="token keyword">await</span> zkSyncContract<span class="token punctuation">.</span><span class="token function">l2TransactionBaseCost</span><span class="token punctuation">(</span>gasPrice<span class="token punctuation">,</span> gasLimit<span class="token punctuation">,</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">hexlify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">收费模式和收费估算是WIP</p><p>你可能已经注意到在L1-&gt;L2交易中缺少<code>gas_per_pubdata</code>和<code>gas_per_storage</code>字段。这些对于协议的安全性肯定是很重要的，它们将很快被添加。请注意，这将是对合同接口的一个突破性改变。</p><p>此外，目前还没有简单的方法来估计执行L1-&gt;L2交易所需的\`气体&#39;的确切数量。在写这篇文章的时候，即使提供的 &quot;gasLimit &quot;为 &quot;0&quot;，交易也可能被处理。这将在未来改变。</p></div><ol start="6"><li>现在可以调用治理合同，这将把调用重定向到zkSync。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// Imports</span>
<span class="token keyword">const</span> <span class="token constant">COUNTER_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;&lt;COUNTER-ADDRESS&gt;&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... Previous steps</span>

  <span class="token comment">// Calling the L1 governance contract.</span>
  <span class="token keyword">const</span> tx <span class="token operator">=</span> <span class="token keyword">await</span> govcontract<span class="token punctuation">.</span><span class="token function">callZkSync</span><span class="token punctuation">(</span>zkSyncAddress<span class="token punctuation">,</span> <span class="token constant">COUNTER_ADDRESS</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> gasLimit<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// Passing the necessary ETH \`value\` to cover the fee for the operation</span>
    value<span class="token operator">:</span> baseCost<span class="token punctuation">,</span>
    gasPrice<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Waiting until the L1 transaction is complete.</span>
  <span class="token keyword">await</span> tx<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>确保将<code>&lt;COUNTER-ADDRESS&gt;</code>替换为二级计数器合同的地址。</p><ol start="7"><li>你可以跟踪相应的L2事务的状态。<code>zksync-web3</code>的<code>Provider</code>有一个方法，给定调用zkSync桥的事务的L1<code>ethers.TransactionResponse</code>对象，返回L2中事务对应的<code>TransactionResponse</code>对象，可以方便地等待事务在L2上被处理。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// ... Previous steps</span>

  <span class="token comment">// Getting the TransactionResponse object for the L2 transaction corresponding to the execution call</span>
  <span class="token keyword">const</span> l2Response <span class="token operator">=</span> <span class="token keyword">await</span> l2Provider<span class="token punctuation">.</span><span class="token function">getL2TransactionFromPriorityOp</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// The receipt of the L2 transaction corresponding to the call to the counter contract</span>
  <span class="token keyword">const</span> l2Receipt <span class="token operator">=</span> <span class="token keyword">await</span> l2Response<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l2Receipt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="完整的代码" tabindex="-1"><a class="header-anchor" href="#完整的代码" aria-hidden="true">#</a> 完整的代码</h3><p>以下是获取zkSync合同地址的完整代码，对交易数据进行编码，计算费用，将交易发送到L1，并跟踪L2中的对应交易。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> BigNumber<span class="token punctuation">,</span> Contract<span class="token punctuation">,</span> ethers<span class="token punctuation">,</span> Wallet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Provider<span class="token punctuation">,</span> utils <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">GOVERNANCE_ABI</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./governance.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">GOVERNANCE_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;&lt;GOVERNANCE-ADDRESS&gt;&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">COUNTER_ABI</span> <span class="token operator">=</span> <span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;./counter.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">COUNTER_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;&lt;COUNTER-ADDRESS&gt;&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// Ethereum L1 provider</span>
  <span class="token keyword">const</span> l1Provider <span class="token operator">=</span> ethers<span class="token punctuation">.</span>providers<span class="token punctuation">.</span><span class="token function">getDefaultProvider</span><span class="token punctuation">(</span><span class="token string">&quot;goerli&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Governor wallet</span>
  <span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;WALLET-PRIVATE-KEY&gt;&quot;</span><span class="token punctuation">,</span> l1Provider<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> govcontract <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contract</span><span class="token punctuation">(</span><span class="token constant">GOVERNANCE_ADDRESS</span><span class="token punctuation">,</span> <span class="token constant">GOVERNANCE_ABI</span><span class="token punctuation">,</span> wallet<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Getting the current address of the zkSync L1 bridge</span>
  <span class="token keyword">const</span> l2Provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Provider</span><span class="token punctuation">(</span><span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> zkSyncAddress <span class="token operator">=</span> <span class="token keyword">await</span> l2Provider<span class="token punctuation">.</span><span class="token function">getMainContractAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Getting the \`Contract\` object of the zkSync bridge</span>
  <span class="token keyword">const</span> zkSyncContract <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Contract</span><span class="token punctuation">(</span>zkSyncAddress<span class="token punctuation">,</span> utils<span class="token punctuation">.</span><span class="token constant">ZKSYNC_MAIN_ABI</span><span class="token punctuation">,</span> wallet<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Encoding the tx data the same way it is done on Ethereum.</span>
  <span class="token keyword">const</span> counterInterface <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ethers</span><span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token constant">COUNTER_ABI</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> data <span class="token operator">=</span> counterInterface<span class="token punctuation">.</span><span class="token function">encodeFunctionData</span><span class="token punctuation">(</span><span class="token string">&quot;increment&quot;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// The price of the L1 transaction requests depends on the gas price used in the call</span>
  <span class="token keyword">const</span> gasPrice <span class="token operator">=</span> <span class="token keyword">await</span> l1Provider<span class="token punctuation">.</span><span class="token function">getGasPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Here we define the constant for gas limit.</span>
  <span class="token keyword">const</span> gasLimit <span class="token operator">=</span> BigNumber<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Getting the cost of the execution.</span>
  <span class="token keyword">const</span> baseCost <span class="token operator">=</span> <span class="token keyword">await</span> zkSyncContract<span class="token punctuation">.</span><span class="token function">l2TransactionBaseCost</span><span class="token punctuation">(</span>gasPrice<span class="token punctuation">,</span> gasLimit<span class="token punctuation">,</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">hexlify</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Calling the L1 governance contract.</span>
  <span class="token keyword">const</span> tx <span class="token operator">=</span> <span class="token keyword">await</span> govcontract<span class="token punctuation">.</span><span class="token function">callZkSync</span><span class="token punctuation">(</span>zkSyncAddress<span class="token punctuation">,</span> <span class="token constant">COUNTER_ADDRESS</span><span class="token punctuation">,</span> data<span class="token punctuation">,</span> gasLimit<span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// Passing the necessary ETH \`value\` to cover the fee for the operation</span>
    value<span class="token operator">:</span> baseCost<span class="token punctuation">,</span>
    gasPrice<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Waiting until the L1 tx is complete.</span>
  <span class="token keyword">await</span> tx<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Getting the TransactionResponse object for the L2 transaction corresponding to the execution call</span>
  <span class="token keyword">const</span> l2Response <span class="token operator">=</span> <span class="token keyword">await</span> l2Provider<span class="token punctuation">.</span><span class="token function">getL2TransactionFromPriorityOp</span><span class="token punctuation">(</span>tx<span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// The receipt of the L2 transaction corresponding to the call to the counter contract&#39;s Increment method</span>
  <span class="token keyword">const</span> l2Receipt <span class="token operator">=</span> <span class="token keyword">await</span> l2Response<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>l2Receipt<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// We recommend this pattern to be able to use async/await everywhere</span>
<span class="token comment">// and properly handle errors.</span>
<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
  process<span class="token punctuation">.</span>exitCode <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>你可以用以下命令运行该脚本。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn ts-node ./scripts/increment-counter.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,39),g={href:"https://explorer.zksync.io/",target:"_blank",rel:"noopener noreferrer"},w=o(`<ol start="8"><li>之后，你可以通过再次运行<code>display-value</code>脚本来验证交易是否确实成功。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>yarn ts-node ./scripts/display-value.ts
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>在交易之后，L2合约中的计数器应该增加，所以输出应该是。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>The counter value is 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="完整的项目" tabindex="-1"><a class="header-anchor" href="#完整的项目" aria-hidden="true">#</a> 完整的项目</h2>`,5),f={href:"https://github.com/matter-labs/cross-chain-tutorial",target:"_blank",rel:"noopener noreferrer"},q=s("h2",{id:"了解更多",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#了解更多","aria-hidden":"true"},"#"),n(" 了解更多")],-1),L=s("li",null,[n("要了解更多关于"),s("code",null,"zksync-web3"),n("SDK的信息，请查看其"),s("a",{href:"././api/js"},"文档"),n("。")],-1),x=s("li",null,[n("要了解更多关于zkSync hardhat插件的信息，请查看其"),s("a",{href:"../../api/hardhat"},"document"),n("。")],-1);function E(S,C){const t=c("RouterLink"),p=c("ExternalLinkIcon");return l(),u("div",null,[d,s("div",k,[v,s("p",null,[n("你可以使用zkSync CLI来自动构建一个项目的支架。查找"),a(t,{to:"/dev/tutorials/.../.../api/tools/zksync-cli/"},{default:e(()=>[n("关于zkSync CLI的更多信息")]),_:1})])]),m,s("div",b,[y,s("p",null,[n("你可以在"),a(t,{to:"/dev/tutorials/.../building-onzksync/hello-world.html"},{default:e(()=>[n("quickstart tutorial")]),_:1}),n("或zkSync的"),a(t,{to:"/dev/tutorials/.../.../api/hardhat/getting-started.html"},{default:e(()=>[n("hardhat plugins")]),_:1}),n("的文档中找到关于部署合约的更具体细节。")])]),h,s("p",null,[n("在输出中，你应该看到L2的完整交易收据。你可以在"),s("a",g,[n("zkSync explorer"),a(p)]),n("中获取`transactionHash'并跟踪它。")]),w,s("p",null,[n("你可以下载完整的项目"),s("a",f,[n("这里"),a(p)]),n("。")]),q,s("ul",null,[s("li",null,[n("要了解更多关于zkSync上L1->L2的交互，请查看"),a(t,{to:"/dev/developer-guides/bridging/l1-l2.html"},{default:e(()=>[n("文档")]),_:1}),n("。")]),L,x])])}const A=i(r,[["render",E],["__file","cross-chain-tutorial.html.vue"]]);export{A as default};
