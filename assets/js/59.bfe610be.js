(window.webpackJsonp=window.webpackJsonp||[]).push([[59],{467:function(_,v,e){"use strict";e.r(v);var r=e(32),s=Object(r.a)({},(function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[e("h1",{attrs:{id:"费用机制"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#费用机制"}},[_._v("#")]),_._v(" 费用机制")]),_._v(" "),e("p",[_._v("zkSync 版本的 "),e("code",[_._v("gas")]),_._v(" 被称为 "),e("code",[_._v("ergs")]),_._v(" ，它不仅代表计算成本，还代表在链上发布数据和影响存储的成本。和 gas 类似，ergs 也是一个绝对单位。虚拟机（VM ）操作("),e("code",[_._v("add")]),_._v("、"),e("code",[_._v("mul")]),_._v(" 等)也会以 "),e("code",[_._v("ergs")]),_._v(" 来衡量它们的成本，而且它们之间可能不相等。"),e("code",[_._v("ergs")]),_._v(" 中的实际操作成本表尚未定义。")]),_._v(" "),e("p",[_._v("由于在 L1 上发布 calldata 的成本非常不稳定，所以改变一个存储槽所需的 "),e("code",[_._v("ergs")]),_._v(" 数量并不恒定。对于每个区块，运营者定义了以下动态参数：")]),_._v(" "),e("ul",[e("li",[e("code",[_._v("ergs_price")]),_._v(" - 每个代币的当前基本价格表。该参数的值用于确定每个代币中的虚拟机执行成本。")]),_._v(" "),e("li",[e("code",[_._v("ergs_per_pubdata")]),_._v(" - 向以太坊发布一个字节的数据的价格，单位为"),e("code",[_._v("ergs")]),_._v("。")])]),_._v(" "),e("p",[e("strong",[_._v("请注意，公共数据（public data）只发布状态差异。")]),_._v(" 如果同一个存储槽在相同 rollup 区块中被更新 10 次，则只有最后的更新会在以太坊上发布，因此只对公共数据收一次费用。")]),_._v(" "),e("h3",{attrs:{id:"为什么我们需要不同的收费模式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#为什么我们需要不同的收费模式"}},[_._v("#")]),_._v(" 为什么我们需要不同的收费模式？")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("为什么是 "),e("code",[_._v("ergs")]),_._v(" 而不是 gas？")])])]),_._v(" "),e("p",[_._v("我们想展示我们的收费模型与以太坊收费模型之间的明显区别。此外，以太坊的大多数操作码（opcodes）具有完全不同的 gas 价格，基础的 zkEVM 操作码可能具有相似的 ergs 价格。通常，执行本身（算数运算，不涉及存储更新）非常便宜。与以太坊一样，大部分成本都发生在存储更新上。")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("为什么储存值不能有一个不变的价格?")])])]),_._v(" "),e("p",[_._v("作为 zk rollup 安全模型的一部分，zkSync 会定期在以太坊上发布状态差异。其价格由以太坊的 gas 价格定义，如前所述，是非常不稳定的。这就是为什么运营者可以在 "),e("code",[_._v("ergs")]),_._v(" 中定义新的价格，用于发布每个区块的 pubdata。您可以在 "),e("RouterLink",{attrs:{to:"/dev/developer-guides/transactions/api/api.html#eip712"}},[_._v("EIP712")]),_._v(" 交易中设置一个 "),e("code",[_._v("ergs_per_pubdata")]),_._v(" 的上限。")],1),_._v(" "),e("h3",{attrs:{id:"这对我来说意味着什么"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#这对我来说意味着什么"}},[_._v("#")]),_._v(" 这对我来说意味着什么？")]),_._v(" "),e("p",[_._v("尽管存在差异，但收费模式与以太坊非常相似，最昂贵的操作是存储变化。与 optimistic rollups 相比，zk rollups 的优势之一是可以不发布所有的交易数据，而只发布状态差异，从而减少存储变化。")]),_._v(" "),e("p",[_._v("如前所述，如果同一个存储槽在一个区块中被多次更新，只有最后一次更新会在以太坊上发布，存储变化的成本只会被收取一次；但它不仅仅是简单的存储槽。例如，一个 DEX 和一个 "),e("code",[_._v("PairFactory")]),_._v(" 工厂用于不同的 "),e("code",[_._v("Pair")]),_._v(" 池。"),e("code",[_._v("Pair")]),_._v(" 的合约字节码仅在部署第一个实例时才需要发布。在 "),e("code",[_._v("Pair")]),_._v(" 的代码发布一次后，后续的部署将只涉及改变一个存储槽--在新部署 "),e("code",[_._v("Pair")]),_._v(" 的地址上设置合约代码哈希。")]),_._v(" "),e("p",[_._v("因此，如何充分利用 zkSync 收费系统的技巧有以下几点：")]),_._v(" "),e("ul",[e("li",[e("strong",[_._v("尽可能少地更新存储槽。")]),_._v(" 执行成本要比存储更新成本小得多。")]),_._v(" "),e("li",[e("strong",[_._v("尽可能多地重复使用存储槽。")]),_._v(" 只有状态差异会在以太坊上发布。")]),_._v(" "),e("li",[e("strong",[_._v("用户应尽可能多地共享存储槽。")]),_._v(" 如果 100 个用户在一个区块中更新您合约的存储槽，差异将只被公布一次。在未来，我们将引入对用户的补偿，这样，更新共享存储槽的费用将在用户之间分摊。")]),_._v(" "),e("li",[e("strong",[_._v("尽可能重复使用合约代码。")]),_._v(" 在以太坊上，避免使用构造函数参数并将它们放入常量中可以减少合约部署时的一些 gas 成本。在 zkSync 上，情况恰恰相反：为合约部署相同的字节码，同时仅更改构造函数参数可以节省大量费用。")])])])}),[],!1,null,null,null);v.default=s.exports}}]);