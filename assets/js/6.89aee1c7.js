(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{396:function(t,e,r){t.exports=r.p+"assets/img/verify-contract.095a5b95.png"},397:function(t,e,r){t.exports=r.p+"assets/img/compiler-version.df916b1b.png"},398:function(t,e,r){t.exports=r.p+"assets/img/contract-verified.70ab9db2.png"},450:function(t,e,r){"use strict";r.r(e);var o=r(32),a=Object(o.a)({},(function(){var t=this,e=t.$createElement,o=t._self._c||e;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"contract-verification"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#contract-verification"}},[t._v("#")]),t._v(" Contract Verification")]),t._v(" "),o("h2",{attrs:{id:"what-is-contract-verification"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#what-is-contract-verification"}},[t._v("#")]),t._v(" What is contract verification?")]),t._v(" "),o("p",[t._v("When you deploy a smart contract on a network, you’re essentially deploying the bytecode produced by the Solidity compiler.")]),t._v(" "),o("p",[t._v("Verifying a contract entails determining whether the on-chain bytecode matches a given source code when it is compiled. If it does, we can state that we have confirmed the bytecode's source code's integrity. Hence the name – verification.")]),t._v(" "),o("h2",{attrs:{id:"how-are-smart-contracts-verified-in-zksync"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#how-are-smart-contracts-verified-in-zksync"}},[t._v("#")]),t._v(" How are smart contracts verified in zkSync?")]),t._v(" "),o("p",[t._v("The deployed bytecode and the Solidity source code of a smart contract are compared during the verification process using zkSync. The algorithm compiles the source code to compare the generated bytecode to the deployed one.\n"),o("br"),t._v("\nIf the two sides match in every way, the contract is verified.")]),t._v(" "),o("p",[t._v("Code verification requires six arguments:")]),t._v(" "),o("ul",[o("li",[t._v("The contract address")]),t._v(" "),o("li",[t._v("The contract name")]),t._v(" "),o("li",[t._v("The source code, including the source of all imports")]),t._v(" "),o("li",[t._v("The version of the compiler used to produce the deployed bytecode")]),t._v(" "),o("li",[t._v("Information about the number of compiler optimizations (if any)")]),t._v(" "),o("li",[t._v("The constructor arguments")])]),t._v(" "),o("p",[t._v("If any of these pieces of information is wrong, the process of verification fails.")]),t._v(" "),o("h2",{attrs:{id:"source-code-privacy"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#source-code-privacy"}},[t._v("#")]),t._v(" Source code privacy")]),t._v(" "),o("p",[t._v("When your smart contract is deployed on zkSync and verified on the block explorer, users can check the verified source code and interact with it.")]),t._v(" "),o("h2",{attrs:{id:"verifying-contracts-using-the-zksync-block-explorer"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#verifying-contracts-using-the-zksync-block-explorer"}},[t._v("#")]),t._v(" Verifying Contracts Using the zkSync Block Explorer")]),t._v(" "),o("p",[t._v("To get started click the "),o("strong",[t._v("Tools")]),t._v(" tab in the top header, a dropdown will pop up and select "),o("strong",[t._v("Smart Contract Verification")]),t._v(",  after which you will be shown the following screen:")]),t._v(" "),o("p",[o("img",{attrs:{src:r(396),alt:"Smart Contract Verification page!",title:"verify contract"}})]),t._v(" "),o("h3",{attrs:{id:"enter-contract-details"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#enter-contract-details"}},[t._v("#")]),t._v(" Enter contract details")]),t._v(" "),o("p",[t._v("To verify the contract, enter the following details;")]),t._v(" "),o("ul",[o("li",[t._v("Contract address: The address provided must match with the "),o("code",[t._v("0x")]),t._v(" address generated during contract creation.")]),t._v(" "),o("li",[t._v("Contract name: The name must be identical to the name provided in the contract.")]),t._v(" "),o("li",[t._v("Optimization: This checks whether or not optimization was used while compiling the contract. If you enabled optimization during compilation, check "),o("strong",[t._v("Yes")]),t._v(" otherwise select "),o("strong",[t._v("No")])]),t._v(" "),o("li",[t._v("Solidity compiler version(Solc): This specifies the exact version of the compiler used to compile a smart contract. Click on the dropdown to specify the compiler version used.")]),t._v(" "),o("li",[t._v("zkSync compiler version(Zksolc): The zkSync compiler version used, the default is set to "),o("code",[t._v("v1.2.0")]),t._v(".")])]),t._v(" "),o("br"),t._v(" "),o("p",[o("img",{attrs:{src:r(397),alt:"Compiler version!",title:"compiler version"}})]),t._v(" "),o("ul",[o("li",[o("p",[t._v("Enter the Solidity Contract code: Copy the code from your editor and paste it into the text area.\n"),o("br"),t._v(" "),o("strong",[t._v("Note:")]),t._v(" You may need to flatten your Solidity code if it utilizes a library or inherits dependencies from another contract.\n"),o("br"),t._v("\nWe recommend using "),o("a",{attrs:{href:"https://medium.com/coinmonks/flattening-smart-contracts-using-hardhat-dffe7dbc7b3f",target:"_blank",rel:"noopener noreferrer"}},[t._v("Hardhat flatten"),o("OutboundLink")],1),t._v(", "),o("a",{attrs:{href:"https://github.com/NomicFoundation/truffle-flattener",target:"_blank",rel:"noopener noreferrer"}},[t._v("Truffle flattener"),o("OutboundLink")],1),t._v(" or the "),o("a",{attrs:{href:"https://github.com/poanetwork/solidity-flattener",target:"_blank",rel:"noopener noreferrer"}},[t._v("POA Solidity flattener"),o("OutboundLink")],1),t._v(".")])]),t._v(" "),o("li",[o("p",[t._v("Constructor arguments: If constructor arguments are required by the contract, you should add them here, but in "),o("a",{attrs:{href:"https://solidity.readthedocs.io/en/develop/abi-spec.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("ABI hex-encoded form"),o("OutboundLink")],1),t._v(".")])])]),t._v(" "),o("br"),t._v(" "),o("h3",{attrs:{id:"how-can-you-obtain-your-constructor-arguments"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#how-can-you-obtain-your-constructor-arguments"}},[t._v("#")]),t._v(" How can you obtain your constructor arguments?")]),t._v(" "),o("blockquote",[o("p",[o("strong",[t._v("Note:")]),t._v(" The easiest way to get the constructor argument data is to print it to the console while deploying.")])]),t._v(" "),o("p",[t._v("For example, if using our "),o("RouterLink",{attrs:{to:"/api/tools/hello-world.html"}},[t._v("tutorial")]),t._v(", you can find the line:")],1),t._v(" "),o("div",{staticClass:"language-js extra-class"},[o("pre",{pre:!0,attrs:{class:"language-js"}},[o("code",[o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" greeterContract "),o("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("await")]),t._v(" deployer"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("deploy")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("artifact"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("greeting"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),o("p",[t._v("if you add the next line as")]),t._v(" "),o("div",{staticClass:"language-js extra-class"},[o("pre",{pre:!0,attrs:{class:"language-js"}},[o("code",[t._v("console"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("greeterContract"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("interface"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),o("span",{pre:!0,attrs:{class:"token function"}},[t._v("encodeDeploy")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("greeting"),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),o("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),o("p",[t._v("then you will receive constructor argument data.")]),t._v(" "),o("ul",[o("li",[t._v("Lastly, click the "),o("strong",[t._v("Verify Smart Contract")]),t._v(" button.")])]),t._v(" "),o("br"),t._v("\nIf all goes well, you will see a success message.\n"),o("br"),t._v(" "),o("p",[o("img",{attrs:{src:r(398),alt:"Smart Contract Verified!",title:"Contract Verified"}})])])}),[],!1,null,null,null);e.default=a.exports}}]);