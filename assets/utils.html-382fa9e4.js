import{_ as o,W as c,X as i,Z as a,$ as s,a0 as t,a2 as p,Y as n,D as r}from"./framework-674379d2.js";const l={},d=n(`<h1 id="实用工具" tabindex="-1"><a class="header-anchor" href="#实用工具" aria-hidden="true">#</a> 实用工具</h1><p><code>zksync-web3</code>为zkSync建设者提供了一些有用的工具。它们可以通过以下方式导入。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> utils <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>大多数实用程序是由zkSync团队内部使用的。所以本文件将只描述那些对你有帮助的工具。</p><h2 id="以太坊的-地址" tabindex="-1"><a class="header-anchor" href="#以太坊的-地址" aria-hidden="true">#</a> 以太坊的 &quot;地址&quot;</h2><p>而以太坊实际上是部署在地址上的代币。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">L2_ETH_TOKEN_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;0x000000000000000000000000000000000000800a&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>zkSync还允许在我们的SDK和API中使用更友好的零地址别名。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">ETH_ADDRESS</span> <span class="token operator">=</span> <span class="token string">&quot;0x0000000000000000000000000000000000000000&quot;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="zksync智能合约的abi" tabindex="-1"><a class="header-anchor" href="#zksync智能合约的abi" aria-hidden="true">#</a> zkSync智能合约的ABI</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">ZKSYNC_MAIN_ABI</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">utils</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;../abi/IZkSync.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ierc20接口" tabindex="-1"><a class="header-anchor" href="#ierc20接口" aria-hidden="true">#</a> IERC20接口</h2><p>在与zkSync上的本地令牌进行交互时很方便。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">IERC20</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">utils</span><span class="token punctuation">.</span><span class="token function">Interface</span><span class="token punctuation">(</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">&quot;../abi/IERC20.json&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="编码paymaster参数" tabindex="-1"><a class="header-anchor" href="#编码paymaster参数" aria-hidden="true">#</a> 编码paymaster参数</h2>`,15),u=a("code",null,"paymasterParams",-1),k=n(`<div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">getPaymasterParams</span><span class="token punctuation">(</span>paymasterAddress<span class="token operator">:</span> Address<span class="token punctuation">,</span> paymasterInput<span class="token operator">:</span> PaymasterInput<span class="token punctuation">)</span><span class="token operator">:</span> PaymasterParams
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div>`,1),m=n(`<h2 id="有用的气体常数" tabindex="-1"><a class="header-anchor" href="#有用的气体常数" aria-hidden="true">#</a> 有用的气体常数</h2><p>目前，没有任何方法可以准确估计所需的 &quot;gasPerPubdataLimit&quot;。这就是为什么目前强烈建议提供\`DEFAULT_GAS_PER_PUBDATA_LIMIT&#39;。用户不会因为提供它而被收取更多的费用。 以后就可以查询当前推荐的限额了。</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">const</span> <span class="token constant">GAS_PER_PUBDATA_BYTE</span> <span class="token operator">=</span> <span class="token number">17</span><span class="token punctuation">;</span>

<span class="token comment">// The large L2 gas per pubdata to sign. This gas is enough to ensure that</span>
<span class="token comment">// any reasonable limit will be accepted. Note, that the operator is NOT required to</span>
<span class="token comment">// use the honest value of gas per pubdata and it can use any value up to the one signed by the user.</span>
<span class="token comment">// In the future releases, we will provide a way to estimate the current gasPerPubdata.</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">DEFAULT_GAS_PER_PUBDATA_LIMIT</span> <span class="token operator">=</span> <span class="token number">50000</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">RECOMMENDED_GAS_LIMIT</span> <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token constant">DEPOSIT</span><span class="token operator">:</span> <span class="token number">600_000</span><span class="token punctuation">,</span>
    <span class="token constant">EXECUTE</span><span class="token operator">:</span> <span class="token number">620_000</span><span class="token punctuation">,</span>
    <span class="token constant">ERC20_APPROVE</span><span class="token operator">:</span> <span class="token number">50_000</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,3);function v(h,y){const e=r("RouterLink");return c(),i("div",null,[d,a("p",null,[s("实用方法，为普通"),t(e,{to:"/api/js/.../.../dev/developer-guides/aa.html#built-in-paymaster-flows"},{default:p(()=>[s("paymaster flows")]),_:1}),s("返回正确形成的"),u,s("对象。")]),k,a("p",null,[s("`PaymasterInput'的定义可以在"),t(e,{to:"/api/js/types.html"},{default:p(()=>[s("这里")]),_:1}),s("找到。")]),m])}const _=o(l,[["render",v],["__file","utils.html.vue"]]);export{_ as default};
