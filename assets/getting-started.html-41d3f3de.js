import{_ as i,W as l,X as r,Z as n,$ as s,a0 as a,a2 as e,Y as p,D as c}from"./framework-674379d2.js";const u={},d=n("h1",{id:"开始使用",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#开始使用","aria-hidden":"true"},"#"),s(" 开始使用")],-1),k={href:"https://hardhat.org",target:"_blank",rel:"noopener noreferrer"},m=n("p",null,"zkSync为Hardhat提供了以下插件。",-1),v={href:"https://www.chaijs.com/",target:"_blank",rel:"noopener noreferrer"},h=n("p",null,"要了解更多关于Hardhat本身的信息，请查看[其官方文档]（https://hardhat.org/getting-started/）。",-1),g={href:"https://github.com/matter-labs/hardhat-zksync/tree/main/examples/vyper-example",target:"_blank",rel:"noopener noreferrer"},y=n("h2",{id:"前提条件",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#前提条件","aria-hidden":"true"},"#"),s(" 前提条件")],-1),b=n("p",null,"对于本教程，必须安装以下程序。",-1),w=n("li",null,[n("code",null,"yarn"),s("软件包管理器。"),n("code",null,"npm"),s("例子将很快被添加。")],-1),f=n("code",null,"ETH",-1),_={href:"https://portal.zksync.io/faucet",target:"_blank",rel:"noopener noreferrer"},z=p(`<h2 id="项目设置" tabindex="-1"><a class="header-anchor" href="#项目设置" aria-hidden="true">#</a> 项目设置</h2><ol><li>为了初始化项目并安装依赖性，在终端运行以下命令。</li></ol><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mkdir greeter-example
cd greeter-example
yarn init -y
yarn add -D typescript ts-node @types/node ethers@^5.7.2 zksync-web3@^0.13.1 @ethersproject/hash @ethersproject/web hardhat @matterlabs/hardhat-zksync-solc @matterlabs/hardhat-zksync-deploy
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>typescript、ts-node和@types/node的依赖是可选的--插件在vanilla JavaScript环境下可以正常工作。不过，请注意，本教程确实使用了TypeScript。</p>`,4),q={class:"hint-container tip"},x=n("p",{class:"hint-container-title"},"Tips",-1),C=n("code",null,"TypeScript",-1),S={href:"https://yarnpkg.com/getting-started/editor-sdks",target:"_blank",rel:"noopener noreferrer"},E=p(`<h2 id="configuration" tabindex="-1"><a class="header-anchor" href="#configuration" aria-hidden="true">#</a> Configuration</h2><ol start="2"><li>创建<code>hardhat.config.ts</code>文件并在其中粘贴以下代码。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token string">&quot;@matterlabs/hardhat-zksync-deploy&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token string">&quot;@matterlabs/hardhat-zksync-solc&quot;</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
  zksolc<span class="token operator">:</span> <span class="token punctuation">{</span>
    version<span class="token operator">:</span> <span class="token string">&quot;1.3.1&quot;</span><span class="token punctuation">,</span>
    compilerSource<span class="token operator">:</span> <span class="token string">&quot;binary&quot;</span><span class="token punctuation">,</span>
    settings<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  defaultNetwork<span class="token operator">:</span> <span class="token string">&quot;zkTestnet&quot;</span><span class="token punctuation">,</span>
  networks<span class="token operator">:</span> <span class="token punctuation">{</span>
    zkTestnet<span class="token operator">:</span> <span class="token punctuation">{</span>
      url<span class="token operator">:</span> <span class="token string">&quot;https://zksync2-testnet.zksync.dev&quot;</span><span class="token punctuation">,</span> <span class="token comment">// URL of the zkSync network RPC</span>
      ethNetwork<span class="token operator">:</span> <span class="token string">&quot;goerli&quot;</span><span class="token punctuation">,</span> <span class="token comment">// Can also be the RPC URL of the Ethereum network (e.g. \`https://goerli.infura.io/v3/&lt;API_KEY&gt;\`)</span>
      zksync<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  solidity<span class="token operator">:</span> <span class="token punctuation">{</span>
    version<span class="token operator">:</span> <span class="token string">&quot;0.8.17&quot;</span><span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>要了解更多关于hardhat.config.ts文件中的每个具体属性，请查看插件文档./plugins.md)</p></div><h2 id="write-and-deploy-a-contract" tabindex="-1"><a class="header-anchor" href="#write-and-deploy-a-contract" aria-hidden="true">#</a> Write and deploy a contract</h2><ol start="3"><li>创建合约和部署文件夹。在合约文件夹中，我们将存储所有的智能合约文件。在deploy文件夹中，我们将放置所有与部署合约有关的脚本。</li><li>创建contracts/Greeter.sol合约并粘贴以下代码。</li></ol><div class="language-solidity line-numbers-mode" data-ext="solidity"><pre class="language-solidity"><code><span class="token comment">//SPDX-License-Identifier: Unlicensed</span>
<span class="token keyword">pragma</span> <span class="token keyword">solidity</span> <span class="token operator">^</span><span class="token version number">0.8.0</span><span class="token punctuation">;</span>

<span class="token keyword">contract</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>
    <span class="token builtin">string</span> <span class="token keyword">private</span> greeting<span class="token punctuation">;</span>

    <span class="token keyword">constructor</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _greeting<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        greeting <span class="token operator">=</span> _greeting<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">view</span> <span class="token keyword">returns</span> <span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> greeting<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">function</span> <span class="token function">setGreeting</span><span class="token punctuation">(</span><span class="token builtin">string</span> <span class="token keyword">memory</span> _greeting<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token punctuation">{</span>
        greeting <span class="token operator">=</span> _greeting<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>运行<code>yarn hardhat compile</code>，它使用<code>hardhat-zksync-solc</code>插件来编译合同。<code>artifacts-zk</code>和<code>cache-zk</code>文件夹将被创建在根目录下（而不是常规Hardhat的<code>artifacts</code>和<code>cache</code>）。</li></ol><div class="hint-container tip"><p class="hint-container-title">Tips</p><p>注意<code>artifacts-zk</code>和<code>cache-zk</code>文件夹包含了编译工件和缓存，不应该被添加到版本控制中，所以把它们包含在你的项目的<code>.gitignore</code>文件中是个好的做法。</p></div><ol start="6"><li>在<code>deploy/deploy.ts</code>中创建部署脚本，代码如下。</li></ol><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> utils<span class="token punctuation">,</span> Wallet <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;zksync-web3&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> ethers <span class="token keyword">from</span> <span class="token string">&quot;ethers&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> HardhatRuntimeEnvironment <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;hardhat/types&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> Deployer <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&quot;@matterlabs/hardhat-zksync-deploy&quot;</span><span class="token punctuation">;</span>

<span class="token comment">// An example of a deploy script that will deploy and call a simple contract.</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>hre<span class="token operator">:</span> HardhatRuntimeEnvironment<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Running deploy script for the Greeter contract</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Initialize the wallet.</span>
  <span class="token keyword">const</span> wallet <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Wallet</span><span class="token punctuation">(</span><span class="token string">&quot;&lt;WALLET-PRIVATE-KEY&gt;&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Create deployer object and load the artifact of the contract we want to deploy.</span>
  <span class="token keyword">const</span> deployer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Deployer</span><span class="token punctuation">(</span>hre<span class="token punctuation">,</span> wallet<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> artifact <span class="token operator">=</span> <span class="token keyword">await</span> deployer<span class="token punctuation">.</span><span class="token function">loadArtifact</span><span class="token punctuation">(</span><span class="token string">&quot;Greeter&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Deposit some funds to L2 in order to be able to perform L2 transactions.</span>
  <span class="token keyword">const</span> depositAmount <span class="token operator">=</span> ethers<span class="token punctuation">.</span>utils<span class="token punctuation">.</span><span class="token function">parseEther</span><span class="token punctuation">(</span><span class="token string">&quot;0.001&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> depositHandle <span class="token operator">=</span> <span class="token keyword">await</span> deployer<span class="token punctuation">.</span>zkWallet<span class="token punctuation">.</span><span class="token function">deposit</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    to<span class="token operator">:</span> deployer<span class="token punctuation">.</span>zkWallet<span class="token punctuation">.</span>address<span class="token punctuation">,</span>
    token<span class="token operator">:</span> utils<span class="token punctuation">.</span><span class="token constant">ETH_ADDRESS</span><span class="token punctuation">,</span>
    amount<span class="token operator">:</span> depositAmount<span class="token punctuation">,</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token comment">// Wait until the deposit is processed on zkSync</span>
  <span class="token keyword">await</span> depositHandle<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Deploy this contract. The returned object will be of a \`Contract\` type, similarly to ones in \`ethers\`.</span>
  <span class="token comment">// \`greeting\` is an argument for contract constructor.</span>
  <span class="token keyword">const</span> greeting <span class="token operator">=</span> <span class="token string">&quot;Hi there!&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> greeterContract <span class="token operator">=</span> <span class="token keyword">await</span> deployer<span class="token punctuation">.</span><span class="token function">deploy</span><span class="token punctuation">(</span>artifact<span class="token punctuation">,</span> <span class="token punctuation">[</span>greeting<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Show the contract info.</span>
  <span class="token keyword">const</span> contractAddress <span class="token operator">=</span> greeterContract<span class="token punctuation">.</span>address<span class="token punctuation">;</span>
  <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>artifact<span class="token punctuation">.</span>contractName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> was deployed to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>contractAddress<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token comment">// Call the deployed contract.</span>
  <span class="token keyword">const</span> greetingFromContract <span class="token operator">=</span> <span class="token keyword">await</span> greeterContract<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>greetingFromContract <span class="token operator">==</span> greeting<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Contract greets us with </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>greeting<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Contract said something unexpected: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>greetingFromContract<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment">// Edit the greeting of the contract</span>
  <span class="token keyword">const</span> newGreeting <span class="token operator">=</span> <span class="token string">&quot;Hey guys&quot;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> setNewGreetingHandle <span class="token operator">=</span> <span class="token keyword">await</span> greeterContract<span class="token punctuation">.</span><span class="token function">setGreeting</span><span class="token punctuation">(</span>newGreeting<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">await</span> setNewGreetingHandle<span class="token punctuation">.</span><span class="token function">wait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token keyword">const</span> newGreetingFromContract <span class="token operator">=</span> <span class="token keyword">await</span> greeterContract<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>newGreetingFromContract <span class="token operator">==</span> newGreeting<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Contract greets us with </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newGreeting<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">!</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">Contract said something unexpected: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>newGreetingFromContract<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11),G={start:"7"},H=n("p",null,[s("将"),n("code",null,"WALLET-PRIVATE-KEY"),s("文本替换为你的Ethereum钱包的私钥后，使用以下命令运行该脚本。"),n("code",null,"yarn hardhat deploy-zksync"),s("。这个脚本将")],-1),T=n("li",null,"从Goerli转移0.001个ETH到zkSync。",-1),L=n("code",null,"Greeting",-1),R=n("li",null,[s("从合同中检索信息，调用"),n("code",null,"greet()"),s("方法。")],-1),A=n("li",null,[s("用"),n("code",null,"setGreeting()"),s("方法更新合同中的问候信息。")],-1),D=n("li",null,"再次从合同中获取消息。",-1),N=n("p",null,[n("strong",null,"恭喜你! 你的Hardhat项目现在已经在zkSync Era Testnet上运行了 🎉"),s("。")],-1),V=p('<div class="hint-container tip"><p class="hint-container-title">请求-速率超标消息</p><p>这条信息是由使用ethers提供的默认RPC端点引起的。为了避免这种情况，请使用你自己的Goerli RPC端点。你可以[在这里找到多个节点提供者]（https://github.com/arddluma/awesome-list-rpc-nodes-providers）。</p></div><h2 id="了解更多" tabindex="-1"><a class="header-anchor" href="#了解更多" aria-hidden="true">#</a> 了解更多</h2><ul><li>要了解更多关于zkSync Hardhat插件的信息，请查看<a href="./plugins">plugins documentation</a>。</li><li>如果你想了解更多关于如何使用Javascript与zkSync互动，请查看<a href="./js">zksync-web3 Javascript SDK documentation</a> 。</li></ul><h2 id="未来版本" tabindex="-1"><a class="header-anchor" href="#未来版本" aria-hidden="true">#</a> 未来版本</h2><p>未来将发布的插件有两个主要改进点。</p><ul><li>**与现有hardhat插件的兼容性。**与其他hardhat插件的兼容性是未来的计划，但还没有成为重点。</li><li><strong>改进的跨平台支持</strong>。</li></ul>',6);function W(P,I){const o=c("ExternalLinkIcon"),t=c("RouterLink");return l(),r("div",null,[d,n("p",null,[n("a",k,[s("Hardhat"),a(o)]),s("是一个Ethereum开发环境，为在Solidity中轻松开发智能合约而设计。它最突出的特点之一是可扩展性：你可以轻松地将新的插件添加到你的Hardhat项目中。")]),m,n("ul",null,[n("li",null,[a(t,{to:"/api/hardhat/hardhat-zksync-solc.html"},{default:e(()=>[s("@matterlabs/hardhat-zksync-solc")]),_:1}),s(" - 用于编译用Solidity编写的合同。")]),n("li",null,[a(t,{to:"/api/hardhat/hardhat-zksync-vyper.html"},{default:e(()=>[s("@matterlabs/hardhat-zksync-vyper")]),_:1}),s(" - 用于编译用Vyper编写的合同。")]),n("li",null,[a(t,{to:"/api/hardhat/hardhat-zksync-deploy.html"},{default:e(()=>[s("@matterlabs/hardhat-zksync-deploy")]),_:1}),s(" - 用来部署智能合约。")]),n("li",null,[a(t,{to:"/api/hardhat/hardhat-zksync-chai-matchers.html"},{default:e(()=>[s("@matterlabs/hardhat-zksync-chai-matchers")]),_:1}),s(" - 为测试智能合约的"),n("a",v,[s("Chai"),a(o)]),s("断言库增加了zkSync的特定功能。")]),n("li",null,[a(t,{to:"/api/hardhat/hardhat-zksync-verify.html"},{default:e(()=>[s("@matterlabs/hardhat-zksync-verify")]),_:1}),s(" - 用来验证智能合约。")])]),h,n("p",null,[s("本教程展示了如何使用Hardhat从头开始设置一个zkSync Solidity项目。 如果你使用 Vyper，请查看 GitHub 中的 "),a(t,{to:"/api/hardhat/hardhat-zksync-vyper.html"},{default:e(()=>[s("Vyper 插件文档")]),_:1}),s(" 或 "),n("a",g,[s("这个例子"),a(o)])]),y,b,n("ul",null,[w,n("li",null,[s("一个在L1上有足够的Göerli "),f,s("的钱包，以支付桥接资金到zkSync以及部署智能合约。我们建议使用"),n("a",_,[s("我们来自zkSync门户的龙头"),a(o)]),s("。")])]),z,n("div",q,[x,n("p",null,[s("如果使用Yarn 2及以上版本，你可能需要做一些额外的步骤，以使"),C,s("在你的编辑器中按预期工作。要了解更多，请查看"),n("a",S,[s("Yarn的官方文档"),a(o)])])]),E,n("ol",G,[n("li",null,[H,n("ul",null,[T,n("li",null,[s("向"),a(t,{to:"/api/hardhat/.../.../dev/fundamentals/interacting.html"},{default:e(()=>[s("zkSync Era Testnet")]),_:1}),s('部署带有 "你好！"信息的'),L,s("合约。")]),R,A,D]),N])]),V])}const j=i(u,[["render",W],["__file","getting-started.html.vue"]]);export{j as default};
